{"version":3,"sources":["views/application/form/FormAdd.tsx"],"names":["FormAdd","dispatch","useDispatch","history","useHistory","saveSurveyFunc","sessionStorage","setItem","this","text","useQuery","gql","listFormCategories","isFormTypeLoading","loading","isFormTypeError","error","formCategories","data","type","SNACKBAR_OPEN","open","message","variant","alertSeverity","anchorOrigin","vertical","horizontal","_isEmpty","formTypes","_get","onSubmitHandler","values","a","setStatus","setSubmitting","categoryAndFormType","formTypeId","title","split","categoryId","currentTemplate","JSON","stringify","getItem","client","mutate","mutation","createForm","variables","Form","CategoryId","FormTypeId","Title","Template","formId","formNewLink","generatePath","id","push","success","container","spacing","gridSpacing","item","xs","initialValues","validationSchema","yup","shape","required","onSubmit","errors","handleChange","handleBlur","handleSubmit","touched","isSubmitting","noValidate","alignItems","lg","defaultValue","fullWidth","placeholder","onChange","onBlur","Boolean","helperText","name","htmlFor","native","map","categoryName","types","FormTypes","label","formType","Name","typeId","categoryIdAndFormTypeId","value","direction","justifyContent","color","disabled"],"mappings":"sZAsNeA,UAlMC,WACf,IAAMC,EAAWC,cACXC,EAAUC,cAEhB,SAASC,IAGRC,eAAeC,QAAQ,WAAYC,KAAKC,MAGzC,MAIIC,YACHC,YADY,IAAD,sCAERC,MALMC,EADV,EACCC,QACOC,EAFR,EAECC,MACMC,EAHP,EAGCC,KAOD,GAAIL,EAAmB,OAAO,cAAC,IAAD,IAC9B,GAAIE,EASH,OARAd,EAAS,CACRkB,KAAMC,IACNC,MAAM,EACNC,QAAS,uBACTC,QAAS,QACTC,cAAe,QACfC,aAAc,CAAEC,SAAU,MAAOC,WAAY,YAEvC,6BAGR,GAAIC,IAASX,GAAiB,OAAO,6BACrC,IAAMY,EAAYC,IAAKb,EAAgB,sBAEjCc,EAAe,uCAAG,WACvBC,EADuB,0CAAAC,EAAA,6DAErBC,EAFqB,EAErBA,UAAWC,EAFU,EAEVA,cAEOC,EAA+BJ,EAA3CK,WAAiCC,EAAUN,EAAVM,MAJlB,EAKUF,EAAoBG,MAAM,KALpC,mBAKhBC,EALgB,KAKJH,EALI,KAOjBI,EAAkBC,KAAKC,UAC5BrC,eAAesC,QAAQ,aARD,kBAYHC,IAAOC,OAAO,CAChCC,SAAUpC,YAAF,kDACLqC,KAEHC,UAAW,CACVC,KAAM,CACLC,WAAYX,EACZY,WAAYf,EACZgB,MAAOf,EACPgB,SAAUb,MArBS,OAYhBvB,EAZgB,OAyBtBjB,EAAS,CACRkB,KAAMC,IACNC,MAAM,EACNC,QAAS,mBACTC,QAAS,QACTC,cAAe,UACfC,aAAc,CAAEC,SAAU,MAAOC,WAAY,YAExC4B,EAASzB,IAAKZ,EAAM,CAAC,OAAQ,aAAc,WAC3CsC,EAAcC,YAAa,YAAa,CAC7CC,GAAIH,IAELpD,EAAQwD,KAAKH,GArCS,kDAuChBlC,EAAUQ,IAAK,EAAD,GAAI,UAAW,wBACnCI,EAAU,CAAE0B,SAAS,IACrBzB,GAAc,GAEdlC,EAAS,CACRkB,KAAMC,IACNC,MAAM,EACNC,UACAC,QAAS,QACTC,cAAe,QACfC,aAAc,CAAEC,SAAU,MAAOC,WAAY,YAjDxB,0DAAH,wDAqDrB,OACC,cAAC,IAAD,CAAMkC,WAAS,EAACC,QAASC,IAAzB,SACC,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACC,cAAC,IAAD,CAAU3B,MAAM,eAAhB,SACC,cAAC,IAAD,CACC4B,cAAe,CACd5B,MAAO,GACPD,WAAY,IAEb8B,iBAAkBC,MAAaC,MAAM,CACpC/B,MAAO8B,MAAaE,SAAS,oBAC7BjC,WAAY+B,MAAaE,SAAS,0BAEnCC,SAAUxC,EATX,SAWE,gBACAyC,EADA,EACAA,OACAC,EAFA,EAEAA,aACAC,EAHA,EAGAA,WACAC,EAJA,EAIAA,aACAC,EALA,EAKAA,QACA5C,EANA,EAMAA,OACA6C,EAPA,EAOAA,aAPA,OASA,sBAAMC,YAAU,EAACP,SAAUI,EAA3B,SACC,eAAC,IAAD,CAAMd,WAAS,EAACC,QAAS,EAAGiB,WAAW,SAAvC,UACC,eAAC,IAAD,CAAMf,MAAI,EAACC,GAAI,GAAIe,GAAI,EAAvB,UACC,cAAC,IAAD,oBACA,cAAC,IAAD,CACCC,aAAcjD,EAAOM,MACrB4C,WAAS,EACTC,YAAY,QACZC,SAAUX,EACVY,OAAQX,EACR1D,MAAO4D,EAAQtC,OAASgD,QAAQd,EAAOlC,OACvCiD,WAAYX,EAAQtC,OAASkC,EAAOlC,MACpCkD,KAAK,aAGP,eAAC,IAAD,CAAMxB,MAAI,EAACC,GAAI,GAAIe,GAAI,EAAvB,UACC,cAAC,IAAD,CAAYS,QAAQ,aAApB,uBACA,cAAC,IAAD,CACCC,QAAM,EACNhC,GAAG,aACHuB,aAAcjD,EAAOK,WACrB+C,SAAUX,EACVzD,MAAO4D,EAAQvC,YAAciD,QAAQd,EAAOnC,YAC5CmD,KAAK,aANN,SAQE3D,EAAU8D,KAAI,SAACzE,GACf,IACQ0E,EAGJ1E,EAHHmC,MACWwC,EAER3E,EAFH4E,UACItD,EACDtB,EADHwC,GAED,OACC,0BAAUqC,MAAOH,EAAjB,SACEC,EAAMF,KAAI,SAACK,GACX,IAAcR,EAAqBQ,EAA3BC,KAAgBC,EAAWF,EAAftC,GACdyC,EAAuB,UAAM3D,EAAN,YAAoB0D,GACjD,OACC,wBACCE,MAAOD,EADR,SAIEX,GAFIW,OAP2B3D,WAkBxC,cAAC,IAAD,CAAMwB,MAAI,EAACC,GAAI,GAAIe,GAAI,GAAvB,SACC,cAAC,IAAD,CACCoB,MAAM,GACNZ,KAAK,WACLnF,eAAgBA,MAGlB,cAAC,IAAD,CAAM2D,MAAI,EAACC,GAAI,GAAf,SACC,cAAC,IAAD,CAAOoC,UAAU,MAAMC,eAAe,WAAtC,SACC,cAAC,IAAD,UACC,cAAC,IAAD,CACCC,MAAM,UACNhF,QAAQ,YACRJ,KAAK,SACLqF,SAAU3B,EAJX","file":"static/js/16.f0a77f56.chunk.js","sourcesContent":["import { useDispatch } from 'react-redux';\nimport { Button, Grid, Stack, TextField, Select } from '@material-ui/core';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as yup from 'yup';\nimport { useQuery, gql } from '@apollo/client';\nimport _isEmpty from 'lodash.isempty';\nimport _get from 'lodash.get';\nimport { generatePath, useHistory } from 'react-router-dom';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport AnimateButton from '../../../ui-component/extended/AnimateButton';\nimport { SNACKBAR_OPEN } from '../../../store/actions';\nimport SurveyComponent from './components/SurveyCreator';\nimport Loader from '../../../ui-component/Loader';\nimport { listFormCategories } from '../../../graphql/queries';\nimport { createForm } from '../../../graphql/mutations';\nimport { gridSpacing } from '../../../store/constant';\nimport { client } from '../../../dataProvider';\nimport InputLabel from '../../../ui-component/extended/Form/InputLabel';\nimport { FormType } from '../../../types';\n\nconst FormAdd = () => {\n\tconst dispatch = useDispatch();\n\tconst history = useHistory();\n\n\tfunction saveSurveyFunc() {\n\t\t// @ts-ignore\n\t\t// eslint-disable-next-line react/no-this-in-sfc\n\t\tsessionStorage.setItem('template', this.text);\n\t}\n\n\tconst {\n\t\tloading: isFormTypeLoading,\n\t\terror: isFormTypeError,\n\t\tdata: formCategories,\n\t} = useQuery(\n\t\tgql`\n\t\t\t${listFormCategories}\n\t\t`\n\t);\n\n\tif (isFormTypeLoading) return <Loader />;\n\tif (isFormTypeError) {\n\t\tdispatch({\n\t\t\ttype: SNACKBAR_OPEN,\n\t\t\topen: true,\n\t\t\tmessage: 'Something went wrong',\n\t\t\tvariant: 'alert',\n\t\t\talertSeverity: 'error',\n\t\t\tanchorOrigin: { vertical: 'top', horizontal: 'center' },\n\t\t});\n\t\treturn <></>;\n\t}\n\n\tif (_isEmpty(formCategories)) return <></>;\n\tconst formTypes = _get(formCategories, 'listFormCategories');\n\n\tconst onSubmitHandler = async (\n\t\tvalues: FormType,\n\t\t{ setStatus, setSubmitting }: FormikHelpers<FormType>\n\t) => {\n\t\tconst { formTypeId: categoryAndFormType, title } = values;\n\t\tconst [categoryId, formTypeId] = categoryAndFormType.split(',');\n\n\t\tconst currentTemplate = JSON.stringify(\n\t\t\tsessionStorage.getItem('template') as string\n\t\t);\n\n\t\ttry {\n\t\t\tconst data = await client.mutate({\n\t\t\t\tmutation: gql`\n\t\t\t\t\t${createForm}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tForm: {\n\t\t\t\t\t\tCategoryId: categoryId,\n\t\t\t\t\t\tFormTypeId: formTypeId,\n\t\t\t\t\t\tTitle: title,\n\t\t\t\t\t\tTemplate: currentTemplate,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tdispatch({\n\t\t\t\ttype: SNACKBAR_OPEN,\n\t\t\t\topen: true,\n\t\t\t\tmessage: 'Form has created',\n\t\t\t\tvariant: 'alert',\n\t\t\t\talertSeverity: 'success',\n\t\t\t\tanchorOrigin: { vertical: 'top', horizontal: 'center' },\n\t\t\t});\n\t\t\tconst formId = _get(data, ['data', 'createForm', 'FormId']);\n\t\t\tconst formNewLink = generatePath('/form/:id', {\n\t\t\t\tid: formId,\n\t\t\t});\n\t\t\thistory.push(formNewLink);\n\t\t} catch (e: any) {\n\t\t\tconst message = _get(e, 'message', 'Something went wrong');\n\t\t\tsetStatus({ success: false });\n\t\t\tsetSubmitting(false);\n\n\t\t\tdispatch({\n\t\t\t\ttype: SNACKBAR_OPEN,\n\t\t\t\topen: true,\n\t\t\t\tmessage,\n\t\t\t\tvariant: 'alert',\n\t\t\t\talertSeverity: 'error',\n\t\t\t\tanchorOrigin: { vertical: 'top', horizontal: 'center' },\n\t\t\t});\n\t\t}\n\t};\n\treturn (\n\t\t<Grid container spacing={gridSpacing}>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<MainCard title='Add New Form'>\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\ttitle: '',\n\t\t\t\t\t\t\tformTypeId: '',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvalidationSchema={yup.object().shape({\n\t\t\t\t\t\t\ttitle: yup.string().required('Title is require'),\n\t\t\t\t\t\t\tformTypeId: yup.string().required('Form Type is require'),\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tonSubmit={onSubmitHandler}\n\t\t\t\t\t>\n\t\t\t\t\t\t{({\n\t\t\t\t\t\t\terrors,\n\t\t\t\t\t\t\thandleChange,\n\t\t\t\t\t\t\thandleBlur,\n\t\t\t\t\t\t\thandleSubmit,\n\t\t\t\t\t\t\ttouched,\n\t\t\t\t\t\t\tvalues,\n\t\t\t\t\t\t\tisSubmitting,\n\t\t\t\t\t\t}) => (\n\t\t\t\t\t\t\t<form noValidate onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t<Grid container spacing={2} alignItems='center'>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} lg={6}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Title</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={values.title}\n\t\t\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t\t\tplaceholder='Title'\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\t\t\t\t\terror={touched.title && Boolean(errors.title)}\n\t\t\t\t\t\t\t\t\t\t\thelperText={touched.title && errors.title}\n\t\t\t\t\t\t\t\t\t\t\tname='title'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} lg={6}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel htmlFor='formTypeId'>Form Type</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tnative\n\t\t\t\t\t\t\t\t\t\t\tid='formTypeId'\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={values.formTypeId}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t\terror={touched.formTypeId && Boolean(errors.formTypeId)}\n\t\t\t\t\t\t\t\t\t\t\tname='formTypeId'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{formTypes.map((data: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\t\t\tTitle: categoryName,\n\t\t\t\t\t\t\t\t\t\t\t\t\tFormTypes: types,\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: categoryId,\n\t\t\t\t\t\t\t\t\t\t\t\t} = data;\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<optgroup label={categoryName} key={categoryId}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{types.map((formType: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst { Name: name, id: typeId } = formType;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst categoryIdAndFormTypeId = `${categoryId},${typeId}`;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={categoryIdAndFormTypeId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={categoryIdAndFormTypeId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</optgroup>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} lg={12}>\n\t\t\t\t\t\t\t\t\t\t<SurveyComponent\n\t\t\t\t\t\t\t\t\t\t\tvalue=''\n\t\t\t\t\t\t\t\t\t\t\tname='Template'\n\t\t\t\t\t\t\t\t\t\t\tsaveSurveyFunc={saveSurveyFunc}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t\t<Stack direction='row' justifyContent='flex-end'>\n\t\t\t\t\t\t\t\t\t\t\t<AnimateButton>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</AnimateButton>\n\t\t\t\t\t\t\t\t\t\t</Stack>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Formik>\n\t\t\t\t</MainCard>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\nexport default FormAdd;\n"],"sourceRoot":""}