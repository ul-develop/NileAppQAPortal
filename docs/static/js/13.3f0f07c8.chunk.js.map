{"version":3,"sources":["../node_modules/react-phone-input-2/lib/lib.js","../node_modules/classnames/index.js","../node_modules/@material-ui/core/Stack/Stack.js","../../../../src/react/data/MutationData.ts","../../../../src/react/hooks/useMutation.ts","../../source/constants.js","../../source/ParseError.js","../../../source/tools/semver-compare.js","../../source/metadata.js","../../../../source/helpers/extension/createExtensionPattern.js","../../../source/helpers/isViablePhoneNumber.js","../../../../source/helpers/extension/extractExtension.js","../../../source/helpers/parseDigits.js","../../source/parseIncompletePhoneNumber.js","../../../source/helpers/checkNumberLength.js","../../../source/helpers/mergeArrays.js","../../source/isPossibleNumber_.js","../../../source/helpers/matchesEntirely.js","../../../source/helpers/getNumberType.js","../../../source/helpers/applyInternationalSeparatorStyle.js","../../../source/helpers/formatNationalNumberUsingFormat.js","../../../source/helpers/getIddPrefix.js","../../source/format_.js","../../../source/helpers/RFC3966.js","../../source/PhoneNumber.js","../../source/validate_.js","../../../source/helpers/stripIddPrefix.js","../../../source/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../../../source/helpers/extractNationalNumber.js","../../../source/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../../../source/helpers/extractCountryCallingCode.js","../../../source/helpers/getCountryByCallingCode.js","../../source/parse_.js","../../source/parsePhoneNumber_.js","../../source/parsePhoneNumber.js","../../source/parsePhoneNumberFromString_.js","../../source/parsePhoneNumberFromString.js","../../source/isPossiblePhoneNumber.js","../../source/getCountries.js","../../source/PropTypes.js","../../source/helpers.js","../../source/closeBraces.js","../../source/format.js","../../source/templateFormatter.js","../../source/dom.js","../../source/inputControl.js","../../source/parse.js","../../source/edit.js","../../../source/react/Input.js","../../source/AsYouTypeState.js","../../source/AsYouTypeFormatter.util.js","../../source/AsYouTypeFormatter.complete.js","../../source/AsYouTypeFormatter.js","../../source/AsYouTypeParser.js","../../source/AsYouType.js","../../../source/helpers/inputValuePrefix.js","../../source/InputSmart.js","../../source/InputBasic.js","../../source/formatIncompletePhoneNumber.js","../../source/Flag.js","../../source/InternationalIcon.js","../../../source/helpers/countries.js","../../source/CountryIcon.js","../../../source/helpers/getInternationalPhoneNumberPrefix.js","../../../source/helpers/phoneInputHelpers.js","../../source/PhoneInputWithCountry.js","../../../source/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js","../../source/unicode.js","../../source/CountrySelect.js","../../source/PhoneInputWithCountryDefault.js","../node_modules/react-phone-number-input/min/index.js","../node_modules/@material-ui/core/CardActions/cardActionsClasses.js","../node_modules/@material-ui/core/CardActions/CardActions.js"],"names":["module","exports","e","t","r","n","a","i","l","call","m","c","d","o","Object","defineProperty","enumerable","get","Symbol","toStringTag","value","__esModule","create","bind","default","prototype","hasOwnProperty","p","s","require","arguments","length","push","Array","isArray","apply","u","join","parseInt","self","Function","toString","f","h","y","b","NaN","valueOf","replace","test","slice","this","window","exec","keys","IE_PROTO","RegExp","splice","x","g","v","clear","set","C","_","w","S","O","j","__data__","map","N","TypeError","cache","has","Cache","delete","pop","hash","string","Math","max","min","Date","now","setTimeout","leading","maxWait","trailing","cancel","clearTimeout","flush","nodeType","process","binding","isTypedArray","size","forEach","k","E","T","I","A","D","P","F","M","L","R","z","B","G","$","Uint8Array","V","propertyIsEnumerable","K","U","q","Ne","H","W","J","Z","Q","Y","Pe","X","ee","te","re","ne","ae","oe","ie","ue","ce","se","add","le","de","Me","xe","pe","me","ye","qe","ze","be","Ee","Se","De","ge","ve","$e","Ve","Re","Oe","Ue","je","byteLength","byteOffset","buffer","name","message","constructor","_e","He","Te","Ie","Ge","ke","Le","Ae","Be","Ce","Ke","ArrayBuffer","resolve","Fe","String","fe","we","webpackPolyfill","deprecate","paths","children","padEnd","repeat","configurable","writable","iterator","from","key","ReferenceError","setPrototypeOf","getPrototypeOf","__proto__","next","done","return","concat","regions","iso2","countryCode","dialCode","format","priority","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","isAreaCode","areaCodeLength","mainCode","includes","hasAreaCodes","values","findIndex","filterRegions","some","sortTerritories","sort","getFilteredCountryList","find","localizeCountries","localName","getCustomAreas","JSON","parse","stringify","excludeCountries","onlyCountries","preferredCountries","hiddenAreaCodes","getProbableCandidate","state","toLowerCase","guessSelectedCountry","props","enableAreaCodes","trim","reduce","updateCountry","indexOf","setState","selectedCountry","formattedNumber","disableCountryCode","formatNumber","scrollTo","dropdownRef","document","body","offsetHeight","getBoundingClientRect","top","scrollTop","enableSearch","scrollToTop","enableAreaCodeStretch","enableLongNumbers","autoFormat","split","shift","prefix","remainingText","formattedText","cursorToEnd","numberInputRef","focus","charAt","setSelectionRange","getElement","getCountryData","handleFlagDropdownClick","preventDefault","showDropdown","disabled","highlightCountryIndex","handleInput","target","onChange","freezeSelection","countryCodeEditable","returnValue","country","persist","disableCountryGuess","substring","selectionStart","handleInputClick","onClick","handleDoubleClick","handleFlagItemClick","handleInputFocus","jumpCursorToEnd","placeholder","onFocus","handleInputBlur","onBlur","handleInputCopy","copyNumbersOnly","getSelection","clipboardData","setData","getHighlightCountryIndex","getSearchFilteredCountries","searchCountry","queryString","handleKeydown","className","which","ENTER","ESC","blur","UP","DOWN","TAB","SPACE","fromCharCode","debouncedQueryStingSearcher","handleInputKeyDown","onEnterKeyPress","onKeyDown","handleClickOutside","dropdownContainerRef","contains","handleSearchChange","currentTarget","searchValue","getDropdownCountryName","Set","getCountryDropdownList","disableDropdown","searchNotFound","disableSearchIcon","searchClass","searchStyle","searchPlaceholder","autocompleteSearch","preferred","active","highlight","createElement","assign","ref","tabIndex","role","dropdownClass","style","dropdownStyle","search","type","autoFocus","autoComplete","enableTerritories","preserveOrder","masks","areaCodes","localization","defaultMask","alwaysDefaultMask","disableInitialCountryGuess","addEventListener","enableClickOutside","removeEventListener","updateFormattedNumber","renderStringAsFlag","isValid","defaultErrorMessage","specialLabel","containerClass","arrow","up","inputClass","open","buttonClass","containerStyle","inputStyle","onDoubleClick","onCopy","inputProps","buttonStyle","title","Component","defaultProps","flagsImagePath","RIGHT","LEFT","PLUS","hasOwn","classNames","classes","arg","argType","inner","joinChildren","separator","childrenArray","React","toArray","Boolean","output","child","index","resolveBreakpointValues","previous","base","acc","breakpoint","StackRoot","experimentalStyled","styleProps","theme","styles","_extends","display","handleBreakpoints","direction","propValue","flexDirection","spacing","transformer","createUnarySpacing","breakpoints","directionValues","spacingValues","deepmerge","margin","row","column","getValue","Stack","inProps","themeProps","useThemeProps","extendSxProp","component","divider","other","_objectWithoutPropertiesLoose","_jsx","as","options","context","result","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","catch","error","onError","getOptions","onMutationError","data","undefined","errors","verifyDocumentType","mutation","Mutation","mostRecentMutationId","execute","isMounted","client","refreshClient","afterExecute","unmount","cleanup","loading","ignoreResults","updateResult","called","onCompleted","graphQLErrors","isMostRecentMutation","previousResult","OperationData","useMutation","updatedOptions","mutationDataRef","mutationData","current","setOptions","VALID_DIGITS","VALID_PUNCTUATION","ParseError","Error","pa","pb","na","Number","nb","isNaN","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","metadata","is_object","type_of","validateMetadata","setVersion","countries","v1","nonGeographic","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","hasCountry","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","numberingPlan","globalMetadataObject","v2","formats","_getFormats","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","_getNationalPrefixIsOptionalWhenFormatting","types","hasTypes","getType","Type","_format","usesNationalPrefix","nationalPrefixFormattingRule","FIRST_GROUP_ONLY_PREFIX_PATTERN","getCountryCallingCode","isSupportedCountry","version","compare","getExtensionDigitsPattern","maxLength","createExtensionPattern","purpose","optionalExtnSuffix","rfcExtn","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","EXTN_PATTERN","DIGITS","parseDigit","character","parseDigits","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","prevParsedCharacters","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","element","mergeArrays","actual_length","minimum_length","isPossibleNumber","matchesEntirely","text","regular_expression","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","isNumberTypeEqualTo","applyInternationalSeparatorStyle","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalFormat","withNationalPrefix","carrierCode","SINGLE_IDD_PREFIX_REG_EXP","DEFAULT_OPTIONS","formatExtension","countryCallingCode","addExtension","formatNationalNumber","ext","formatRFC3966","fromCountry","iddPrefix","countryMetadata","getIddPrefix","formatIDD","formatAs","availableFormats","nationalNnumber","lastLeadingDigitsPattern","chooseFormatForNumber","PhoneNumber","_metadata","isCountryCode","phoneNumber","CAPTURING_DIGIT_PATTERN","stripIddPrefix","IDDPrefixPattern","matchedGroups","extractNationalNumberFromPossiblyIncompleteNumber","prefixPattern","prefixMatch","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","nationalPrefix","extractNationalNumber","nationalSignificantNumber","shouldExtractNationalPrefix","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","numberWithoutIDD","shorterNumber","getCountryByCallingCode","nationalPhoneNumber","possibleCountries","phone","selectCountryFromList","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","extract","part","parseRFC3966","throwOnError","startsAt","extractFormattedPhoneNumber","isViablePhoneNumberStart","withExtensionStripped","start","numberWithoutExtension","matches","extractExtension","parseInput","formattedPhoneNumber","extractCountryCallingCode","defaultCountry","defaultCallingCode","exactCountry","parsePhoneNumber","valid","possible","parseNumber","normalizeArguments","args","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString","parsePhoneNumberFromString_","getCountries","country_calling_codes","PropTypes","isRequired","labels","count_occurences","symbol","count","closeBraces","retained_template","template","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","formatter","should_close_braces","characters_in_template","value_character_index","filled_in_template","close_braces","template_formatter","caret","found","possibly_last_input_character_index","end","selectionEnd","Keys","setCaretPosition","caret_position","navigator","ANDROID_USER_AGENT_REG_EXP","isAndroid","operation","event","getOperation","selection","eraseSelection","formatInputText","_parse","on_change","focused_input_character_index","parse_character","newValueAndCaret","edit","formatted","InputComponent","inputComponent","rest","internalRef","useRef","setRef","useCallback","_onChange","_onKeyDown","onInputKeyDown","isEmptyValue","Input","onCut","onPaste","func","AsYouTypeState","onCountryChange","onCallingCodeChange","properties","nextDigits","digits","IDDPrefix","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","times","cutAndStripNonPairedParens","cutBeforeIndex","cleared_string","stripNonPairedParens","formatCompleteNumber","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","matcher","useNationalPrefixFormattingRule","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","formattedNationalNumber","isValidFormattedNationalNumber","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","NON_ALTERING_FORMAT_REG_EXP","AsYouTypeFormatter","international","formattedCompleteNumber","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","leadingDigits","leadingDigitsPatternIndex","matchingFormats","chosenFormat","leadingDigitsPatternsCount","leadingDigitsPattern","getTemplateForFormat","missingPlus","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","complexPrefixBeforeNationalSignificantNumber","pattern","strictPattern","nationalNumberDummyDigits","numberFormat","getFormatFormat","numberFormatWithNationalPrefix","nationalPrefixIncludedInTemplate","position","populateTemplateWithDigits","populatedNationalNumberTemplatePosition","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","onNationalSignificantNumberChange","extractedNumber","hasPlus","_extractFormattedDigitsAndPlus","formattedDigits","extractFormattedDigitsAndPlus","justLeadingPlus","hasReceivedThreeLeadingDigits","isWaitingForCountryCallingCode","nationalPrefixForParsing","nationalDigits","prevNationalSignificantNumber","extractNationalSignificantNumber","nationalSignificantNumberIndex","nationalSignificantNumberMatchesInput","extractAnotherNationalSignificantNumber","extractIddPrefix","fixMissingPlus","newCallingCode","AsYouType","getCountryAndCallingCode","optionsOrDefaultCountry","parser","reExtractNationalSignificantNumber","getFullNumber","isInternational","getTemplate","getInputValuePrefix","withCountryCallingCode","removeInputValuePrefix","createInput","defaultMetadata","InputSmart","newValue","newValueFormatted","InputBasic","formatIncompletePhoneNumber","countryName","flags","flagUrl","alt","src","aspectRatio","InternationalIcon3x2","xmlns","viewBox","stroke","fill","strokeWidth","strokeMiterlimit","strokeLinecap","x1","y1","x2","y2","InternationalIcon1x1","isCountrySupportedWithError","console","getSupportedCountries","createCountryIconComponent","FlagComponent","flagComponent","InternationalIcon","internationalIcon","label","_aspectRatio","CountryIcon","DefaultInternationalIcon","ONLY_DIGITS_REGEXP","getInternationalPhoneNumberPrefix","getPhoneDigitsForNewCountry","phoneDigits","prevCountry","newCountry","useNationalFormat","countryCallingCodePrefix","country_calling_code","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","required","derived_country","getCountryFromPossiblyIncompleteInternationalPhoneNumber","couldNumberBelongToCountry","convertInternationalPhoneDigitsToNational","compareStrings","locales","intlPhoneNumberPrefix","getInitialPhoneDigits","generateNationalNumberDigits","PhoneNumberInput_","focusInputOnCountrySelection","newPhoneDigits","hasUserSelectedACountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","prevPhoneDigits","countryRequired","getAnyCountry","onPhoneDigitsChange","_phoneDigits","stateUpdate","isFocused","countrySelectProps","displayInitialValueAsLocalNumber","initialValueFormat","preSelectedCountry","getPreSelectedCountry","prevProps","newDefaultCountry","newReset","prevDefaultCountry","prevValue","prevReset","_getInitialPhoneDigits","parameters","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","supportedCountries","parsedCountry","hasUserSelectedACountryUpdate","getPhoneInputWithCountryStateUpdateFromNewProps","prevState","generator","dependencies","countryOptionsOrder","order","optionsOnTop","optionsOnBottom","appendTo","option","sortCountryOptions","countryNames","compareStringsLocales","_compareStrings","countrySelectOptions","ZZ","getCountrySelectOptions","countryOptions","getSupportedCountryOptions","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","numberInputProps","smartCaret","CountrySelectComponent","ContainerComponent","iconComponent","PureComponent","PhoneNumberInput","inputRef","labelsPropType","countrySelectComponent","containerComponent","metadataPropType","reset","getRegionalIndicatorSymbol","letter","CountrySelect","onChange_","useMemo","getSelectedOption","DIVIDER_STYLE","bool","fontSize","backgroundColor","color","CountrySelectWithIcon","Icon","Arrow","getIconAspectRatio","arrowComponent","unicodeFlags","selectedOption","createPhoneInput","PhoneInputDefault","_arguments","isPossiblePhoneNumber","_isPossiblePhoneNumber","getCardActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","CardActionsRoot","overridesResolver","root","disableSpacing","alignItems","padding","marginLeft","CardActions","slots","composeClasses","useUtilityClasses","clsx"],"mappings":";8HAAAA,EAAOC,QAAQ,SAASC,GAAG,IAAIC,EAAE,GAAG,SAASC,EAAEC,GAAG,GAAGF,EAAEE,GAAG,OAAOF,EAAEE,GAAGJ,QAAQ,IAAIK,EAAEH,EAAEE,GAAG,CAACE,EAAEF,EAAEG,GAAE,EAAGP,QAAQ,IAAI,OAAOC,EAAEG,GAAGI,KAAKH,EAAEL,QAAQK,EAAEA,EAAEL,QAAQG,GAAGE,EAAEE,GAAE,EAAGF,EAAEL,QAAQ,OAAOG,EAAEM,EAAER,EAAEE,EAAEO,EAAER,EAAEC,EAAEQ,EAAE,SAASV,EAAEC,EAAEE,GAAGD,EAAES,EAAEX,EAAEC,IAAIW,OAAOC,eAAeb,EAAEC,EAAE,CAACa,YAAW,EAAGC,IAAIZ,KAAKD,EAAEA,EAAE,SAASF,GAAG,oBAAoBgB,QAAQA,OAAOC,aAAaL,OAAOC,eAAeb,EAAEgB,OAAOC,YAAY,CAACC,MAAM,WAAWN,OAAOC,eAAeb,EAAE,aAAa,CAACkB,OAAM,KAAMhB,EAAED,EAAE,SAASD,EAAEC,GAAG,GAAG,EAAEA,IAAID,EAAEE,EAAEF,IAAI,EAAEC,EAAE,OAAOD,EAAE,GAAG,EAAEC,GAAG,iBAAiBD,GAAGA,GAAGA,EAAEmB,WAAW,OAAOnB,EAAE,IAAIG,EAAES,OAAOQ,OAAO,MAAM,GAAGlB,EAAEA,EAAEC,GAAGS,OAAOC,eAAeV,EAAE,UAAU,CAACW,YAAW,EAAGI,MAAMlB,IAAI,EAAEC,GAAG,iBAAiBD,EAAE,IAAI,IAAII,KAAKJ,EAAEE,EAAEQ,EAAEP,EAAEC,EAAE,SAASH,GAAG,OAAOD,EAAEC,IAAIoB,KAAK,KAAKjB,IAAI,OAAOD,GAAGD,EAAEC,EAAE,SAASH,GAAG,IAAIC,EAAED,GAAGA,EAAEmB,WAAW,WAAW,OAAOnB,EAAEsB,SAAS,WAAW,OAAOtB,GAAG,OAAOE,EAAEQ,EAAET,EAAE,IAAIA,GAAGA,GAAGC,EAAES,EAAE,SAASX,EAAEC,GAAG,OAAOW,OAAOW,UAAUC,eAAejB,KAAKP,EAAEC,IAAIC,EAAEuB,EAAE,GAAGvB,EAAEA,EAAEwB,EAAE,GAAj5B,CAAq5B,CAAC,SAAS1B,EAAEC,GAAGD,EAAED,QAAQ4B,EAAQ,IAAU,SAAS3B,EAAEC,EAAEC,GAAG,IAAIC,GAKh+B,WAAW,aAAa,IAAID,EAAE,GAAGsB,eAAe,SAASpB,IAAI,IAAI,IAAIJ,EAAE,GAAGC,EAAE,EAAEA,EAAE2B,UAAUC,OAAO5B,IAAI,CAAC,IAAIE,EAAEyB,UAAU3B,GAAG,GAAGE,EAAE,CAAC,IAAIQ,SAASR,EAAE,GAAG,WAAWQ,GAAG,WAAWA,EAAEX,EAAE8B,KAAK3B,QAAQ,GAAG4B,MAAMC,QAAQ7B,IAAIA,EAAE0B,OAAO,CAAC,IAAIxB,EAAED,EAAE6B,MAAM,KAAK9B,GAAGE,GAAGL,EAAE8B,KAAKzB,QAAQ,GAAG,WAAWM,EAAE,IAAI,IAAIuB,KAAK/B,EAAED,EAAEK,KAAKJ,EAAE+B,IAAI/B,EAAE+B,IAAIlC,EAAE8B,KAAKI,IAAI,OAAOlC,EAAEmC,KAAK,KAAKnC,EAAED,SAASK,EAAEkB,QAAQlB,EAAEJ,EAAED,QAAQK,QAAG,KAAUD,EAAE,WAAW,OAAOC,GAAG6B,MAAMhC,EAAE,OAAOD,EAAED,QAAQI,GAAhb,IAAub,SAASH,EAAEC,EAAEC,IAAG,SAAUD,GAAG,IAAIC,EAAE,aAAaC,EAAE,qBAAqBC,EAAE,aAAaO,EAAE,cAAcN,EAAE+B,SAASF,EAAE,iBAAiBjC,GAAGA,GAAGA,EAAEW,SAASA,QAAQX,EAAEQ,EAAE,iBAAiB4B,MAAMA,MAAMA,KAAKzB,SAASA,QAAQyB,KAAKX,EAAEQ,GAAGzB,GAAG6B,SAAS,cAATA,GAA0BhC,EAAEM,OAAOW,UAAUgB,SAASC,EAAEd,EAAEV,OAAON,EAAE8B,EAAEA,EAAEjB,eAAU,EAAOE,EAAEf,EAAEA,EAAE6B,cAAS,EAAO,SAASE,EAAEzC,GAAG,GAAG,iBAAiBA,EAAE,OAAOA,EAAE,GAAG0C,EAAE1C,GAAG,OAAOyB,EAAEA,EAAElB,KAAKP,GAAG,GAAG,IAAIC,EAAED,EAAE,GAAG,MAAM,KAAKC,GAAG,EAAED,IAAG,IAAK,KAAKC,EAAE,SAASO,EAAER,GAAG,IAAIC,SAASD,EAAE,QAAQA,IAAI,UAAUC,GAAG,YAAYA,GAAG,SAASyC,EAAE1C,GAAG,MAAM,iBAAiBA,GAAG,SAASA,GAAG,QAAQA,GAAG,iBAAiBA,EAAxC,CAA2CA,IAAI,mBAAmBM,EAAEC,KAAKP,GAAG,SAAS2C,EAAE3C,GAAG,OAAOA,GAAGA,EAAE,SAASA,GAAG,GAAG,iBAAiBA,EAAE,OAAOA,EAAE,GAAG0C,EAAE1C,GAAG,OAAO4C,IAAI,GAAGpC,EAAER,GAAG,CAAC,IAAIC,EAAE,mBAAmBD,EAAE6C,QAAQ7C,EAAE6C,UAAU7C,EAAEA,EAAEQ,EAAEP,GAAGA,EAAE,GAAGA,EAAE,GAAG,iBAAiBD,EAAE,OAAO,IAAIA,EAAEA,GAAGA,EAAEA,EAAEA,EAAE8C,QAAQ5C,EAAE,IAAI,IAAIgC,EAAE9B,EAAE2C,KAAK/C,GAAG,OAAOkC,GAAGvB,EAAEoC,KAAK/C,GAAGK,EAAEL,EAAEgD,MAAM,GAAGd,EAAE,EAAE,GAAG/B,EAAE4C,KAAK/C,GAAG4C,KAAK5C,EAAvQ,CAA0QA,MAAM,KAAKA,KAAI,IAAK,uBAAuBA,EAAE,GAAG,EAAE,GAAGA,GAAGA,EAAEA,EAAE,EAAE,IAAIA,EAAEA,EAAE,EAAEA,EAAED,QAAQ,SAASC,EAAEC,EAAEC,GAAG,IAAIC,EAAEC,EAAIC,EAAE,OAAOL,EAAE,OAAOG,EAAEH,GAAG,GAAGyC,EAAEtC,GAAGC,EAAE,SAASJ,GAAG,IAAIC,EAAE0C,EAAE3C,GAAGE,EAAED,EAAE,EAAE,OAAOA,GAAGA,EAAEC,EAAED,EAAEC,EAAED,EAAE,EAAjD,CAAoDC,GAAK,EAAEG,EAAEL,EAAE6B,OAAOzB,GAAGA,SAAI,IAASC,IAAID,EAAEA,GAAGC,EAAED,EAAEC,GAAgBD,EAAEA,GAA5D,EAAiEA,EAAjE,GAAuEF,EAAEE,EAAEH,EAAEwC,EAAExC,GAAGD,EAAEgD,MAAM9C,EAAEA,EAAED,EAAE4B,SAAS5B,KAAKM,KAAK0C,KAAK/C,EAAE,KAAK,SAASF,EAAEC,GAAG,IAAIC,EAAEA,EAAE,WAAW,OAAO+C,KAAlB,GAA0B,IAAI/C,EAAEA,GAAG,IAAIoC,SAAS,cAAb,GAA8B,MAAMtC,GAAG,iBAAiBkD,SAAShD,EAAEgD,QAAQlD,EAAED,QAAQG,GAAG,SAASF,EAAEC,EAAEC,IAAG,SAAUD,GAAG,IAAkLI,EAA9KH,EAAE,8BAA8BC,EAAE,iBAAiBF,GAAGA,GAAGA,EAAEW,SAASA,QAAQX,EAAEG,EAAE,iBAAiBiC,MAAMA,MAAMA,KAAKzB,SAASA,QAAQyB,KAAK1B,EAAER,GAAGC,GAAGkC,SAAS,cAATA,GAAgCJ,EAAEH,MAAMR,UAAUd,EAAE6B,SAASf,UAAUG,EAAEd,OAAOW,UAAUjB,EAAEK,EAAE,sBAAsB6B,GAAGnC,EAAE,SAAS8C,KAAK7C,GAAGA,EAAE8C,MAAM9C,EAAE8C,KAAKC,UAAU,KAAK,iBAAiBhD,EAAE,GAAGK,EAAED,EAAE8B,SAASd,EAAEC,EAAEF,eAAeiB,EAAEf,EAAEa,SAAS/B,EAAE8C,OAAO,IAAI5C,EAAEH,KAAKkB,GAAGqB,QAAQ,sBAAsB,QAAQA,QAAQ,yDAAyD,SAAS,KAAKJ,EAAER,EAAEqB,OAAOZ,EAAEa,EAAE7C,EAAE,OAAO8C,EAAED,EAAE5C,OAAO,UAAU,SAAS8C,EAAE1D,GAAG,IAAIC,GAAG,EAAEC,EAAEF,EAAEA,EAAE6B,OAAO,EAAE,IAAIoB,KAAKU,UAAU1D,EAAEC,GAAG,CAAC,IAAIC,EAAEH,EAAEC,GAAGgD,KAAKW,IAAIzD,EAAE,GAAGA,EAAE,KAAK,SAAS0D,EAAE7D,GAAG,IAAIC,GAAG,EAAEC,EAAEF,EAAEA,EAAE6B,OAAO,EAAE,IAAIoB,KAAKU,UAAU1D,EAAEC,GAAG,CAAC,IAAIC,EAAEH,EAAEC,GAAGgD,KAAKW,IAAIzD,EAAE,GAAGA,EAAE,KAAK,SAAS2D,EAAE9D,GAAG,IAAIC,GAAG,EAAEC,EAAEF,EAAEA,EAAE6B,OAAO,EAAE,IAAIoB,KAAKU,UAAU1D,EAAEC,GAAG,CAAC,IAAIC,EAAEH,EAAEC,GAAGgD,KAAKW,IAAIzD,EAAE,GAAGA,EAAE,KAAK,SAAS4D,EAAE/D,EAAEC,GAAG,IAAI,IAAIC,EAAEC,EAAEC,EAAEJ,EAAE6B,OAAOzB,KAAK,IAAIF,EAAEF,EAAEI,GAAG,OAAOD,EAAEF,IAAIC,GAAGA,GAAGC,GAAGA,EAAE,OAAOC,EAAE,OAAO,EAAE,SAAS4D,EAAEhE,GAAG,SAASiE,EAAEjE,KAAKC,EAAED,EAAEwC,GAAGA,KAAKvC,MAAM,SAASD,GAAG,IAAIC,EAAEgE,EAAEjE,GAAGyC,EAAElC,KAAKP,GAAG,GAAG,MAAM,qBAAqBC,GAAG,8BAA8BA,EAAhG,CAAmGD,IAAI,SAASA,GAAG,IAAIC,GAAE,EAAG,GAAG,MAAMD,GAAG,mBAAmBA,EAAEuC,SAAS,IAAItC,KAAKD,EAAE,IAAI,MAAMA,IAAI,OAAOC,EAA/F,CAAkGD,GAAGQ,EAAEN,GAAG6C,KAAK,SAAS/C,GAAG,GAAG,MAAMA,EAAE,CAAC,IAAI,OAAOU,EAAEH,KAAKP,GAAG,MAAMA,IAAI,IAAI,OAAOA,EAAE,GAAG,MAAMA,KAAK,MAAM,GAAxF,CAA4FA,IAAI,IAAIC,EAAE,SAASiE,EAAElE,EAAEC,GAAG,IAAIC,EAAEC,EAAEC,EAAEJ,EAAEmE,SAAS,OAAO,WAAWhE,SAASD,EAAED,KAAK,UAAUE,GAAG,UAAUA,GAAG,WAAWA,EAAE,cAAcD,EAAE,OAAOA,GAAGE,EAAE,iBAAiBH,EAAE,SAAS,QAAQG,EAAEgE,IAAI,SAASZ,EAAExD,EAAEC,GAAG,IAAIC,EAAE,SAASF,EAAEC,GAAG,OAAO,MAAMD,OAAE,EAAOA,EAAEC,GAAtC,CAA0CD,EAAEC,GAAG,OAAO+D,EAAE9D,GAAGA,OAAE,EAAO,SAASmE,EAAErE,EAAEC,GAAG,GAAG,mBAAmBD,GAAGC,GAAG,mBAAmBA,EAAE,MAAM,IAAIqE,UAAU,uBAAuB,IAAIpE,EAAE,SAAFA,IAAa,IAAIC,EAAEyB,UAAUxB,EAAEH,EAAEA,EAAEgC,MAAMgB,KAAK9C,GAAGA,EAAE,GAAGQ,EAAET,EAAEqE,MAAM,GAAG5D,EAAE6D,IAAIpE,GAAG,OAAOO,EAAEI,IAAIX,GAAG,IAAIC,EAAEL,EAAEiC,MAAMgB,KAAK9C,GAAG,OAAOD,EAAEqE,MAAM5D,EAAEiD,IAAIxD,EAAEC,GAAGA,GAAG,OAAOH,EAAEqE,MAAM,IAAIF,EAAEI,OAAOX,GAAG5D,EAAE,SAAS+D,EAAEjE,GAAG,IAAIC,SAASD,EAAE,QAAQA,IAAI,UAAUC,GAAG,YAAYA,GAAGyD,EAAEnC,UAAUoC,MAAM,WAAWV,KAAKkB,SAASV,EAAEA,EAAE,MAAM,IAAIC,EAAEnC,UAAUmD,OAAO,SAAS1E,GAAG,OAAOiD,KAAKuB,IAAIxE,WAAWiD,KAAKkB,SAASnE,IAAI0D,EAAEnC,UAAUR,IAAI,SAASf,GAAG,IAAIC,EAAEgD,KAAKkB,SAAS,GAAGV,EAAE,CAAC,IAAIvD,EAAED,EAAED,GAAG,MAAM,8BAA8BE,OAAE,EAAOA,EAAE,OAAOuB,EAAElB,KAAKN,EAAED,GAAGC,EAAED,QAAG,GAAQ0D,EAAEnC,UAAUiD,IAAI,SAASxE,GAAG,IAAIC,EAAEgD,KAAKkB,SAAS,OAAOV,OAAE,IAASxD,EAAED,GAAGyB,EAAElB,KAAKN,EAAED,IAAI0D,EAAEnC,UAAUqC,IAAI,SAAS5D,EAAEC,GAAG,OAAOgD,KAAKkB,SAASnE,GAAGyD,QAAG,IAASxD,EAAE,4BAA4BA,EAAEgD,MAAMY,EAAEtC,UAAUoC,MAAM,WAAWV,KAAKkB,SAAS,IAAIN,EAAEtC,UAAUmD,OAAO,SAAS1E,GAAG,IAAIC,EAAEgD,KAAKkB,SAASjE,EAAE6D,EAAE9D,EAAED,GAAG,QAAQE,EAAE,KAAKA,GAAGD,EAAE4B,OAAO,EAAE5B,EAAE0E,MAAMjC,EAAEnC,KAAKN,EAAEC,EAAE,IAAG,IAAK2D,EAAEtC,UAAUR,IAAI,SAASf,GAAG,IAAIC,EAAEgD,KAAKkB,SAASjE,EAAE6D,EAAE9D,EAAED,GAAG,OAAOE,EAAE,OAAE,EAAOD,EAAEC,GAAG,IAAI2D,EAAEtC,UAAUiD,IAAI,SAASxE,GAAG,OAAO+D,EAAEd,KAAKkB,SAASnE,IAAI,GAAG6D,EAAEtC,UAAUqC,IAAI,SAAS5D,EAAEC,GAAG,IAAIC,EAAE+C,KAAKkB,SAAShE,EAAE4D,EAAE7D,EAAEF,GAAG,OAAOG,EAAE,EAAED,EAAE4B,KAAK,CAAC9B,EAAEC,IAAIC,EAAEC,GAAG,GAAGF,EAAEgD,MAAMa,EAAEvC,UAAUoC,MAAM,WAAWV,KAAKkB,SAAS,CAACS,KAAK,IAAIlB,EAAEU,IAAI,IAAIzB,GAAGkB,GAAGgB,OAAO,IAAInB,IAAII,EAAEvC,UAAUmD,OAAO,SAAS1E,GAAG,OAAOkE,EAAEjB,KAAKjD,GAAG0E,OAAO1E,IAAI8D,EAAEvC,UAAUR,IAAI,SAASf,GAAG,OAAOkE,EAAEjB,KAAKjD,GAAGe,IAAIf,IAAI8D,EAAEvC,UAAUiD,IAAI,SAASxE,GAAG,OAAOkE,EAAEjB,KAAKjD,GAAGwE,IAAIxE,IAAI8D,EAAEvC,UAAUqC,IAAI,SAAS5D,EAAEC,GAAG,OAAOiE,EAAEjB,KAAKjD,GAAG4D,IAAI5D,EAAEC,GAAGgD,MAAMoB,EAAEI,MAAMX,EAAE9D,EAAED,QAAQsE,IAAI9D,KAAK0C,KAAK/C,EAAE,KAAK,SAASF,EAAEC,EAAEC,IAAG,SAAUD,GAAG,IAAIC,EAAE,aAAaC,EAAE,qBAAqBC,EAAE,aAAaO,EAAE,cAAcN,EAAE+B,SAASF,EAAE,iBAAiBjC,GAAGA,GAAGA,EAAEW,SAASA,QAAQX,EAAEQ,EAAE,iBAAiB4B,MAAMA,MAAMA,KAAKzB,SAASA,QAAQyB,KAAKX,EAAEQ,GAAGzB,GAAG6B,SAAS,cAATA,GAA0BhC,EAAEM,OAAOW,UAAUgB,SAASC,EAAEsC,KAAKC,IAAIrE,EAAEoE,KAAKE,IAAIvD,EAAE,WAAW,OAAOC,EAAEuD,KAAKC,OAAO,SAASzC,EAAEzC,GAAG,IAAIC,SAASD,EAAE,QAAQA,IAAI,UAAUC,GAAG,YAAYA,GAAG,SAASO,EAAER,GAAG,GAAG,iBAAiBA,EAAE,OAAOA,EAAE,GAAG,SAASA,GAAG,MAAM,iBAAiBA,GAAG,SAASA,GAAG,QAAQA,GAAG,iBAAiBA,EAAxC,CAA2CA,IAAI,mBAAmBM,EAAEC,KAAKP,GAA/G,CAAmHA,GAAG,OAAO4C,IAAI,GAAGH,EAAEzC,GAAG,CAAC,IAAIC,EAAE,mBAAmBD,EAAE6C,QAAQ7C,EAAE6C,UAAU7C,EAAEA,EAAEyC,EAAExC,GAAGA,EAAE,GAAGA,EAAE,GAAG,iBAAiBD,EAAE,OAAO,IAAIA,EAAEA,GAAGA,EAAEA,EAAEA,EAAE8C,QAAQ5C,EAAE,IAAI,IAAIgC,EAAE9B,EAAE2C,KAAK/C,GAAG,OAAOkC,GAAGvB,EAAEoC,KAAK/C,GAAGK,EAAEL,EAAEgD,MAAM,GAAGd,EAAE,EAAE,GAAG/B,EAAE4C,KAAK/C,GAAG4C,KAAK5C,EAAEA,EAAED,QAAQ,SAASC,EAAEC,EAAEC,GAAG,IAAIC,EAAEC,EAAEO,EAAEN,EAAE6B,EAAEzB,EAAEiB,EAAE,EAAEpB,GAAE,EAAGoC,GAAE,EAAGC,GAAE,EAAG,GAAG,mBAAmB3C,EAAE,MAAM,IAAIsE,UAAU,uBAAuB,SAASb,EAAExD,GAAG,IAAIC,EAAEC,EAAEQ,EAAEP,EAAE,OAAOD,EAAEC,OAAE,EAAOsB,EAAEzB,EAAEI,EAAEL,EAAEiC,MAAMtB,EAAET,GAAG,SAASwD,EAAE1D,GAAG,OAAO0B,EAAE1B,EAAEkC,EAAEiD,WAAWrB,EAAE7D,GAAGK,EAAEmD,EAAEzD,GAAGK,EAAE,SAASwD,EAAE7D,GAAG,IAAIE,EAAEF,EAAES,EAAE,YAAO,IAASA,GAAGP,GAAGD,GAAGC,EAAE,GAAGwC,GAAG1C,EAAE0B,GAAGf,EAAE,SAASmD,IAAI,IAAI9D,EAAEyB,IAAI,GAAGoC,EAAE7D,GAAG,OAAO+D,EAAE/D,GAAGkC,EAAEiD,WAAWrB,EAAE,SAAS9D,GAAG,IAAIE,EAAED,GAAGD,EAAES,GAAG,OAAOiC,EAAEhC,EAAER,EAAES,GAAGX,EAAE0B,IAAIxB,EAAhD,CAAmDF,IAAI,SAAS+D,EAAE/D,GAAG,OAAOkC,OAAE,EAAOS,GAAGxC,EAAEsD,EAAEzD,IAAIG,EAAEC,OAAE,EAAOC,GAAG,SAAS2D,IAAI,IAAIhE,EAAEyB,IAAIvB,EAAE2D,EAAE7D,GAAG,GAAGG,EAAEyB,UAAUxB,EAAE6C,KAAKxC,EAAET,EAAEE,EAAE,CAAC,QAAG,IAASgC,EAAE,OAAOwB,EAAEjD,GAAG,GAAGiC,EAAE,OAAOR,EAAEiD,WAAWrB,EAAE7D,GAAGwD,EAAEhD,GAAG,YAAO,IAASyB,IAAIA,EAAEiD,WAAWrB,EAAE7D,IAAII,EAAE,OAAOJ,EAAEO,EAAEP,IAAI,EAAEwC,EAAEvC,KAAKI,IAAIJ,EAAEkF,QAAQzE,GAAG+B,EAAE,YAAYxC,GAAGsC,EAAEhC,EAAEN,EAAEmF,UAAU,EAAEpF,GAAGU,EAAEgC,EAAE,aAAazC,IAAIA,EAAEoF,SAAS3C,GAAGqB,EAAEuB,OAAO,gBAAW,IAASrD,GAAGsD,aAAatD,GAAGR,EAAE,EAAEvB,EAAEM,EAAEL,EAAE8B,OAAE,GAAQ8B,EAAEyB,MAAM,WAAW,YAAO,IAASvD,EAAE7B,EAAE0D,EAAEtC,MAAMuC,KAAKzD,KAAK0C,KAAK/C,EAAE,KAAK,SAASF,EAAEC,EAAEC,IAAG,SAAUF,EAAEE,GAAG,IAAIC,EAAE,qBAAqBC,EAAE,eAAeO,EAAE,kBAAkBN,EAAE,eAAe6B,EAAE,mDAAmDzB,EAAE,QAAQiB,EAAE,MAAMpB,EAAE,mGAAmGkC,EAAE,WAAW9B,EAAE,8BAA8Be,EAAE,mBAAmBgB,EAAE,GAAGA,EAAE,yBAAyBA,EAAE,yBAAyBA,EAAE,sBAAsBA,EAAE,uBAAuBA,EAAE,uBAAuBA,EAAE,uBAAuBA,EAAE,8BAA8BA,EAAE,wBAAwBA,EAAE,yBAAwB,EAAGA,EAAEtC,GAAGsC,EAAE,kBAAkBA,EAAE,wBAAwBA,EAAE,oBAAoBA,EAAE,qBAAqBA,EAAE,iBAAiBA,EAAE,kBAAkBA,EAAE,qBAAqBA,EAAErC,GAAGqC,EAAE,mBAAmBA,EAAE9B,GAAG8B,EAAE,mBAAmBA,EAAEpC,GAAGoC,EAAE,mBAAmBA,EAAE,qBAAoB,EAAG,IAAIjC,EAAE,iBAAiBR,GAAGA,GAAGA,EAAEY,SAASA,QAAQZ,EAAE0C,EAAE,iBAAiBL,MAAMA,MAAMA,KAAKzB,SAASA,QAAQyB,KAAKM,EAAEnC,GAAGkC,GAAGJ,SAAS,cAATA,GAA0BmB,EAAExD,IAAIA,EAAEyF,UAAUzF,EAAEyD,EAAED,GAAG,iBAAiBvD,GAAGA,IAAIA,EAAEwF,UAAUxF,EAAE2D,EAAEH,GAAGA,EAAE3D,UAAU0D,GAAGjD,EAAEmF,QAAQ7B,EAAE,WAAW,IAAI,OAAOD,GAAGA,EAAE+B,QAAQ,QAAQ,MAAM5F,KAAjD,GAAyD+D,EAAED,GAAGA,EAAE+B,aAAa,SAAS7B,EAAEhE,EAAEC,EAAEC,EAAEC,GAAG,IAAIC,GAAG,EAAEO,EAAEX,EAAEA,EAAE6B,OAAO,EAAE,IAAI1B,GAAGQ,IAAIT,EAAEF,IAAII,MAAMA,EAAEO,GAAGT,EAAED,EAAEC,EAAEF,EAAEI,GAAGA,EAAEJ,GAAG,OAAOE,EAAE,SAASgE,EAAElE,EAAEC,GAAG,IAAI,IAAIC,GAAG,EAAEC,EAAEH,EAAEA,EAAE6B,OAAO,IAAI3B,EAAEC,GAAG,GAAGF,EAAED,EAAEE,GAAGA,EAAEF,GAAG,OAAM,EAAG,OAAM,EAAG,SAASwD,EAAExD,EAAEC,EAAEC,EAAEC,EAAEC,GAAG,OAAOA,EAAEJ,GAAG,SAASA,EAAEI,EAAEO,GAAGT,EAAEC,GAAGA,GAAE,EAAGH,GAAGC,EAAEC,EAAEF,EAAEI,EAAEO,MAAMT,EAAE,SAASmE,EAAErE,GAAG,IAAIC,GAAE,EAAG,GAAG,MAAMD,GAAG,mBAAmBA,EAAEuC,SAAS,IAAItC,KAAKD,EAAE,IAAI,MAAMA,IAAI,OAAOC,EAAE,SAASgE,EAAEjE,GAAG,IAAIC,GAAG,EAAEC,EAAE6B,MAAM/B,EAAE8F,MAAM,OAAO9F,EAAE+F,SAAS,SAAS/F,EAAEG,GAAGD,IAAID,GAAG,CAACE,EAAEH,MAAME,EAAE,SAAS8F,EAAEhG,GAAG,IAAIC,GAAG,EAAEC,EAAE6B,MAAM/B,EAAE8F,MAAM,OAAO9F,EAAE+F,SAAS,SAAS/F,GAAGE,IAAID,GAAGD,KAAKE,EAAE,IAAI+F,EAAEC,EAAEC,EAAEC,EAAErE,MAAMR,UAAU8E,EAAE/D,SAASf,UAAU+E,EAAE1F,OAAOW,UAAUgF,EAAE5D,EAAE,sBAAsB6D,GAAGP,EAAE,SAAS9C,KAAKoD,GAAGA,EAAEnD,MAAMmD,EAAEnD,KAAKC,UAAU,KAAK,iBAAiB4C,EAAE,GAAGQ,EAAEJ,EAAE9D,SAASmE,EAAEJ,EAAE9E,eAAemF,EAAEL,EAAE/D,SAASqE,EAAEtD,OAAO,IAAImD,EAAElG,KAAKmG,GAAG5D,QAAQ,sBAAsB,QAAQA,QAAQ,yDAAyD,SAAS,KAAK+D,EAAElE,EAAE3B,OAAO8F,EAAEnE,EAAEoE,WAAWC,EAAEV,EAAEW,qBAAqBC,EAAEd,EAAE7C,OAAO4D,GAAGjB,EAAEtF,OAAOwC,KAAK+C,EAAEvF,OAAO,SAASZ,GAAG,OAAOkG,EAAEC,EAAEnG,MAAMoH,EAAEC,GAAG1E,EAAE,YAAY2E,EAAED,GAAG1E,EAAE,OAAO4E,EAAEF,GAAG1E,EAAE,WAAW6E,EAAEH,GAAG1E,EAAE,OAAO8E,EAAEJ,GAAG1E,EAAE,WAAW+E,EAAEL,GAAGzG,OAAO,UAAU+G,EAAEC,GAAGR,GAAGS,EAAED,GAAGN,GAAGQ,GAAGF,GAAGL,GAAGQ,GAAGH,GAAGJ,GAAGQ,GAAGJ,GAAGH,GAAGQ,GAAGpB,EAAEA,EAAEtF,eAAU,EAAO2G,GAAGD,GAAGA,GAAGpF,aAAQ,EAAOsF,GAAGF,GAAGA,GAAG1F,cAAS,EAAO,SAAS6F,GAAGpI,GAAG,IAAIC,GAAG,EAAEC,EAAEF,EAAEA,EAAE6B,OAAO,EAAE,IAAIoB,KAAKU,UAAU1D,EAAEC,GAAG,CAAC,IAAIC,EAAEH,EAAEC,GAAGgD,KAAKW,IAAIzD,EAAE,GAAGA,EAAE,KAAK,SAASkI,GAAGrI,GAAG,IAAIC,GAAG,EAAEC,EAAEF,EAAEA,EAAE6B,OAAO,EAAE,IAAIoB,KAAKU,UAAU1D,EAAEC,GAAG,CAAC,IAAIC,EAAEH,EAAEC,GAAGgD,KAAKW,IAAIzD,EAAE,GAAGA,EAAE,KAAK,SAASmI,GAAGtI,GAAG,IAAIC,GAAG,EAAEC,EAAEF,EAAEA,EAAE6B,OAAO,EAAE,IAAIoB,KAAKU,UAAU1D,EAAEC,GAAG,CAAC,IAAIC,EAAEH,EAAEC,GAAGgD,KAAKW,IAAIzD,EAAE,GAAGA,EAAE,KAAK,SAASoI,GAAGvI,GAAG,IAAIC,GAAG,EAAEC,EAAEF,EAAEA,EAAE6B,OAAO,EAAE,IAAIoB,KAAKkB,SAAS,IAAImE,KAAKrI,EAAEC,GAAG+C,KAAKuF,IAAIxI,EAAEC,IAAI,SAASwI,GAAGzI,GAAGiD,KAAKkB,SAAS,IAAIkE,GAAGrI,GAA4N,SAAS0I,GAAG1I,EAAEC,GAAG,IAAI,IAAIC,EAAEF,EAAE6B,OAAO3B,KAAK,GAAGyI,GAAG3I,EAAEE,GAAG,GAAGD,GAAG,OAAOC,EAAE,OAAO,EAAEkI,GAAG7G,UAAUoC,MAAM,WAAWV,KAAKkB,SAASuD,EAAEA,EAAE,MAAM,IAAIU,GAAG7G,UAAUmD,OAAO,SAAS1E,GAAG,OAAOiD,KAAKuB,IAAIxE,WAAWiD,KAAKkB,SAASnE,IAAIoI,GAAG7G,UAAUR,IAAI,SAASf,GAAG,IAAIC,EAAEgD,KAAKkB,SAAS,GAAGuD,EAAE,CAAC,IAAIxH,EAAED,EAAED,GAAG,MAAM,8BAA8BE,OAAE,EAAOA,EAAE,OAAOwG,EAAEnG,KAAKN,EAAED,GAAGC,EAAED,QAAG,GAAQoI,GAAG7G,UAAUiD,IAAI,SAASxE,GAAG,IAAIC,EAAEgD,KAAKkB,SAAS,OAAOuD,OAAE,IAASzH,EAAED,GAAG0G,EAAEnG,KAAKN,EAAED,IAAIoI,GAAG7G,UAAUqC,IAAI,SAAS5D,EAAEC,GAAG,OAAOgD,KAAKkB,SAASnE,GAAG0H,QAAG,IAASzH,EAAE,4BAA4BA,EAAEgD,MAAMoF,GAAG9G,UAAUoC,MAAM,WAAWV,KAAKkB,SAAS,IAAIkE,GAAG9G,UAAUmD,OAAO,SAAS1E,GAAG,IAAIC,EAAEgD,KAAKkB,SAASjE,EAAEwI,GAAGzI,EAAED,GAAG,QAAQE,EAAE,KAAKA,GAAGD,EAAE4B,OAAO,EAAE5B,EAAE0E,MAAMuC,EAAE3G,KAAKN,EAAEC,EAAE,IAAG,IAAKmI,GAAG9G,UAAUR,IAAI,SAASf,GAAG,IAAIC,EAAEgD,KAAKkB,SAASjE,EAAEwI,GAAGzI,EAAED,GAAG,OAAOE,EAAE,OAAE,EAAOD,EAAEC,GAAG,IAAImI,GAAG9G,UAAUiD,IAAI,SAASxE,GAAG,OAAO0I,GAAGzF,KAAKkB,SAASnE,IAAI,GAAGqI,GAAG9G,UAAUqC,IAAI,SAAS5D,EAAEC,GAAG,IAAIC,EAAE+C,KAAKkB,SAAShE,EAAEuI,GAAGxI,EAAEF,GAAG,OAAOG,EAAE,EAAED,EAAE4B,KAAK,CAAC9B,EAAEC,IAAIC,EAAEC,GAAG,GAAGF,EAAEgD,MAAMqF,GAAG/G,UAAUoC,MAAM,WAAWV,KAAKkB,SAAS,CAACS,KAAK,IAAIwD,GAAGhE,IAAI,IAAIkD,GAAGe,IAAIxD,OAAO,IAAIuD,KAAKE,GAAG/G,UAAUmD,OAAO,SAAS1E,GAAG,OAAO4I,GAAG3F,KAAKjD,GAAG0E,OAAO1E,IAAIsI,GAAG/G,UAAUR,IAAI,SAASf,GAAG,OAAO4I,GAAG3F,KAAKjD,GAAGe,IAAIf,IAAIsI,GAAG/G,UAAUiD,IAAI,SAASxE,GAAG,OAAO4I,GAAG3F,KAAKjD,GAAGwE,IAAIxE,IAAIsI,GAAG/G,UAAUqC,IAAI,SAAS5D,EAAEC,GAAG,OAAO2I,GAAG3F,KAAKjD,GAAG4D,IAAI5D,EAAEC,GAAGgD,MAAMsF,GAAGhH,UAAUiH,IAAID,GAAGhH,UAAUO,KAAK,SAAS9B,GAAG,OAAOiD,KAAKkB,SAASP,IAAI5D,EAAE,6BAA6BiD,MAAMsF,GAAGhH,UAAUiD,IAAI,SAASxE,GAAG,OAAOiD,KAAKkB,SAASK,IAAIxE,IAAIyI,GAAGlH,UAAUoC,MAAM,WAAWV,KAAKkB,SAAS,IAAIkE,IAAII,GAAGlH,UAAUmD,OAAO,SAAS1E,GAAG,OAAOiD,KAAKkB,SAASO,OAAO1E,IAAIyI,GAAGlH,UAAUR,IAAI,SAASf,GAAG,OAAOiD,KAAKkB,SAASpD,IAAIf,IAAIyI,GAAGlH,UAAUiD,IAAI,SAASxE,GAAG,OAAOiD,KAAKkB,SAASK,IAAIxE,IAAIyI,GAAGlH,UAAUqC,IAAI,SAAS5D,EAAEC,GAAG,IAAIC,EAAE+C,KAAKkB,SAAS,GAAGjE,aAAamI,GAAG,CAAC,IAAIlI,EAAED,EAAEiE,SAAS,IAAImD,GAAGnH,EAAE0B,OAAO,IAAI,OAAO1B,EAAE2B,KAAK,CAAC9B,EAAEC,IAAIgD,KAAK/C,EAAE+C,KAAKkB,SAAS,IAAImE,GAAGnI,GAAG,OAAOD,EAAE0D,IAAI5D,EAAEC,GAAGgD,MAAM,IAAI4F,GAAMC,IAAID,GAAG,SAAS7I,EAAEC,GAAG,OAAOD,GAAG+I,GAAG/I,EAAEC,EAAE+I,KAAK,SAAShJ,EAAEC,GAAG,GAAG,MAAMD,EAAE,OAAOA,EAAE,IAAIiJ,GAAGjJ,GAAG,OAAO6I,GAAG7I,EAAEC,GAAG,IAAI,IAAIC,EAAEF,EAAE6B,OAAO1B,GAAQ,EAAEC,EAAEQ,OAAOZ,KAAaG,EAAED,IAAI,IAAKD,EAAEG,EAAED,GAAGA,EAAEC,KAAK,OAAOJ,IAAI+I,GAAsB,SAAS9I,EAAEC,EAAEC,GAAG,IAAI,IAAIC,GAAG,EAAEO,EAAEC,OAAOX,GAAGI,EAAEF,EAAEF,GAAGiC,EAAE7B,EAAEwB,OAAOK,KAAK,CAAC,IAAIzB,EAAEJ,IAAQD,GAAG,IAAG,IAAKF,EAAES,EAAEF,GAAGA,EAAEE,GAAG,MAAM,OAAOV,GAAM,SAASiJ,GAAGlJ,EAAEC,GAAG,IAAI,IAAIC,EAAE,EAAEC,GAAGF,EAAEkJ,GAAGlJ,EAAED,GAAG,CAACC,GAAGmJ,GAAGnJ,IAAI4B,OAAO,MAAM7B,GAAGE,EAAEC,GAAGH,EAAEA,EAAEqJ,GAAGpJ,EAAEC,OAAO,OAAOA,GAAGA,GAAGC,EAAEH,OAAE,EAAO,SAASsJ,GAAGtJ,EAAEC,GAAG,OAAO,MAAMD,GAAGC,KAAKW,OAAOZ,GAAG,SAASuJ,GAAGvJ,EAAEC,EAAEC,EAAEgC,EAAEzB,GAAG,OAAOT,IAAIC,IAAI,MAAMD,GAAG,MAAMC,IAAIuJ,GAAGxJ,KAAKyJ,GAAGxJ,GAAGD,GAAGA,GAAGC,GAAGA,EAAE,SAASD,EAAEC,EAAEC,EAAEgC,EAAEzB,EAAEiB,GAAG,IAAIpB,EAAEoJ,GAAG1J,GAAGwC,EAAEkH,GAAGzJ,GAAGS,EAAE,iBAAiBe,EAAE,iBAAiBnB,IAAII,GAAGA,EAAEiJ,GAAG3J,KAAKG,EAAEQ,EAAED,GAAG8B,IAAIf,GAAGA,EAAEkI,GAAG1J,KAAKE,EAAEQ,EAAEc,GAAG,IAAIgB,EAAE/B,GAAGC,IAAI0D,EAAErE,GAAGQ,EAAEiB,GAAGd,IAAI0D,EAAEpE,GAAGyC,EAAEhC,GAAGe,EAAE,GAAGiB,IAAID,EAAE,OAAOf,IAAIA,EAAE,IAAI+G,IAAInI,GAAGsJ,GAAG5J,GAAG6J,GAAG7J,EAAEC,EAAEC,EAAEgC,EAAEzB,EAAEiB,GAAG,SAAS1B,EAAEC,EAAEC,EAAEC,EAAEQ,EAAEuB,EAAEzB,GAAG,OAAOP,GAAG,IAAI,oBAAoB,GAAGF,EAAE8J,YAAY7J,EAAE6J,YAAY9J,EAAE+J,YAAY9J,EAAE8J,WAAW,OAAM,EAAG/J,EAAEA,EAAEgK,OAAO/J,EAAEA,EAAE+J,OAAO,IAAI,uBAAuB,QAAQhK,EAAE8J,YAAY7J,EAAE6J,aAAa3J,EAAE,IAAI2G,EAAE9G,GAAG,IAAI8G,EAAE7G,KAAK,IAAI,mBAAmB,IAAI,gBAAgB,IAAI,kBAAkB,OAAO0I,IAAI3I,GAAGC,GAAG,IAAI,iBAAiB,OAAOD,EAAEiK,MAAMhK,EAAEgK,MAAMjK,EAAEkK,SAASjK,EAAEiK,QAAQ,IAAI,kBAAkB,IAAI,kBAAkB,OAAOlK,GAAGC,EAAE,GAAG,KAAKG,EAAE,IAAIsB,EAAEuC,EAAE,KAAK5D,EAAE,IAAIC,EAAE,EAAE4B,EAAE,GAAGR,IAAIA,EAAEsE,GAAGhG,EAAE8F,MAAM7F,EAAE6F,OAAOxF,EAAE,OAAM,EAAG,IAAIkC,EAAE/B,EAAEM,IAAIf,GAAG,GAAGwC,EAAE,OAAOA,GAAGvC,EAAEiC,GAAG,EAAEzB,EAAEmD,IAAI5D,EAAEC,GAAG,IAAIS,EAAEmJ,GAAGnI,EAAE1B,GAAG0B,EAAEzB,GAAGE,EAAEQ,EAAEuB,EAAEzB,GAAG,OAAOA,EAAEiE,OAAO1E,GAAGU,EAAE,IAAI,kBAAkB,GAAGwH,GAAG,OAAOA,GAAG3H,KAAKP,IAAIkI,GAAG3H,KAAKN,GAAG,OAAM,EAAhqB,CAAoqBD,EAAEC,EAAES,EAAER,EAAEgC,EAAEzB,EAAEiB,GAAG,KAAK,EAAEjB,GAAG,CAAC,IAAIkC,EAAEF,GAAGiE,EAAEnG,KAAKP,EAAE,eAAeyD,EAAEjD,GAAGkG,EAAEnG,KAAKN,EAAE,eAAe,GAAG0C,GAAGc,EAAE,CAAC,IAAIC,EAAEf,EAAE3C,EAAEkB,QAAQlB,EAAE6D,EAAEJ,EAAExD,EAAEiB,QAAQjB,EAAE,OAAOyB,IAAIA,EAAE,IAAI+G,IAAIvI,EAAEwD,EAAEG,EAAE3B,EAAEzB,EAAEiB,IAAI,QAAIgB,IAAkBhB,IAAIA,EAAE,IAAI+G,IAAI,SAASzI,EAAEC,EAAEC,EAAEC,EAAEC,EAAEO,GAAG,IAAIN,EAAE,EAAED,EAAE8B,EAAE8G,GAAGhJ,GAAGS,EAAEyB,EAAEL,OAAsB,GAAGpB,GAAhBuI,GAAG/I,GAAG4B,SAAiBxB,EAAE,OAAM,EAAW,IAAR,IAAIC,EAAEG,EAAOH,KAAK,CAAC,IAAIkC,EAAEN,EAAE5B,GAAG,KAAKD,EAAEmC,KAAKvC,EAAEyG,EAAEnG,KAAKN,EAAEuC,IAAI,OAAM,EAAG,IAAI9B,EAAEC,EAAEI,IAAIf,GAAG,GAAGU,GAAGC,EAAEI,IAAId,GAAG,OAAOS,GAAGT,EAAE,IAAIwB,GAAE,EAAGd,EAAEiD,IAAI5D,EAAEC,GAAGU,EAAEiD,IAAI3D,EAAED,GAAW,IAAR,IAAIyC,EAAEpC,IAASC,EAAEG,GAAG,CAAQ,IAAID,EAAER,EAAbwC,EAAEN,EAAE5B,IAAcoC,EAAEzC,EAAEuC,GAAG,GAAGrC,EAAE,IAAIwC,EAAEtC,EAAEF,EAAEuC,EAAElC,EAAEgC,EAAEvC,EAAED,EAAEW,GAAGR,EAAEK,EAAEkC,EAAEF,EAAExC,EAAEC,EAAEU,GAAG,UAAK,IAASgC,EAAEnC,IAAIkC,GAAGxC,EAAEM,EAAEkC,EAAEvC,EAAEC,EAAEO,GAAGgC,GAAG,CAAClB,GAAE,EAAG,MAAMgB,IAAIA,EAAE,eAAeD,GAAG,GAAGf,IAAIgB,EAAE,CAAC,IAAIgB,EAAEzD,EAAEmK,YAAYzG,EAAEzD,EAAEkK,YAAY1G,GAAGC,KAAK,gBAAgB1D,MAAM,gBAAgBC,IAAI,mBAAmBwD,GAAGA,aAAaA,GAAG,mBAAmBC,GAAGA,aAAaA,IAAIjC,GAAE,GAAI,OAAOd,EAAE+D,OAAO1E,GAAGW,EAAE+D,OAAOzE,GAAGwB,EAAxlB,CAA2lBzB,EAAEC,EAAEC,EAAEgC,EAAEzB,EAAEiB,IAAnrD,CAAurD1B,EAAEC,EAAEsJ,GAAGrJ,EAAEgC,EAAEzB,IAAqG,SAAS2J,GAAGpK,GAAG,MAAM,mBAAmBA,EAAEA,EAAE,MAAMA,EAAEqK,GAAG,iBAAiBrK,EAAE0J,GAAG1J,GAAG,SAASA,EAAEC,GAAG,OAAGkJ,GAAGnJ,IAAIsK,GAAGrK,GAAUsK,GAAGlB,GAAGrJ,GAAGC,GAAU,SAASC,GAAG,IAAIC,EAAE,SAASH,EAAEC,EAAEC,GAAG,IAAIC,EAAE,MAAMH,OAAE,EAAOkJ,GAAGlJ,EAAEC,GAAG,YAAO,IAASE,OAA7D,EAAiEA,EAAjE,CAAoED,EAAEF,GAAG,YAAO,IAASG,GAAGA,IAAIF,EAAE,SAASD,EAAEC,GAAG,OAAO,MAAMD,GAAG,SAASA,EAAEC,EAAEC,GAA6C,IAAtB,IAAIC,EAAEC,GAAG,EAAEO,GAA/BV,EAAEkJ,GAAGlJ,EAAED,GAAG,CAACC,GAAGmJ,GAAGnJ,IAAkB4B,SAAczB,EAAEO,GAAG,CAAC,IAAIN,EAAEgJ,GAAGpJ,EAAEG,IAAI,KAAKD,EAAE,MAAMH,GAAGE,EAAEF,EAAEK,IAAI,MAAML,EAAEA,EAAEK,GAAG,OAAGF,MAAoBQ,EAAEX,EAAEA,EAAE6B,OAAO,IAAI2I,GAAG7J,IAAI8J,GAAGpK,EAAEM,KAAK+I,GAAG1J,IAAI0K,GAAG1K,IAA9L,CAAmMA,EAAEC,EAAEqJ,IAArO,CAA0OpJ,EAAEF,GAAGuJ,GAAGtJ,EAAEE,OAAE,EAAO,IAAza,CAA8aH,EAAE,GAAGA,EAAE,IAAI,SAASA,GAAG,IAAIC,EAAE,SAASD,GAA0B,IAAvB,IAAIC,EAAE+I,GAAGhJ,GAAGE,EAAED,EAAE4B,OAAY3B,KAAK,CAAC,IAAIC,EAAEF,EAAEC,GAAGE,EAAEJ,EAAEG,GAAGF,EAAEC,GAAG,CAACC,EAAEC,EAAEkK,GAAGlK,IAAI,OAAOH,EAAxF,CAA2FD,GAAG,OAAG,GAAGC,EAAE4B,QAAQ5B,EAAE,GAAG,GAAUsK,GAAGtK,EAAE,GAAG,GAAGA,EAAE,GAAG,IAAW,SAASC,GAAG,OAAOA,IAAIF,GAAG,SAASA,EAAEC,EAAEC,EAAEC,GAAG,IAAIC,EAAEF,EAAE2B,OAAOlB,EAAEP,EAAO,GAAG,MAAMJ,EAAE,OAAOW,EAAE,IAAIX,EAAEY,OAAOZ,GAAGI,KAAK,CAAC,IAAI8B,EAAEhC,EAAEE,GAAG,GAAM8B,EAAE,GAAGA,EAAE,KAAKlC,EAAEkC,EAAE,MAAMA,EAAE,KAAKlC,GAAG,OAAM,EAAG,OAAOI,EAAEO,GAAG,CAAC,IAAIF,GAAGyB,EAAEhC,EAAEE,IAAI,GAAGsB,EAAE1B,EAAES,GAAGH,EAAE4B,EAAE,GAAG,GAAMA,EAAE,IAAI,QAAG,IAASR,KAAKjB,KAAKT,GAAG,OAAM,MAAO,CAAC,IAAsBU,EAAlB8B,EAAE,IAAIiG,GAA6B,UAAK,IAAS/H,EAAE6I,GAAGjJ,EAAEoB,EAAEvB,EAAE,EAAEqC,GAAG9B,GAAG,OAAM,GAAI,OAAM,EAAtU,CAA0UR,EAAEF,EAAEC,IAAlhB,CAAuhBD,GAAGmJ,GAAGlJ,EAAED,IAAIE,EAAEmJ,GAAGpJ,GAAG,SAASD,GAAG,OAAO,MAAMA,OAAE,EAAOA,EAAEE,KAAK,SAASF,GAAG,OAAO,SAASC,GAAG,OAAOiJ,GAAGjJ,EAAED,IAA3C,CAAgDC,GAAG,IAAIA,EAAEC,EAA4L,SAASkJ,GAAGpJ,GAAG,OAAO0J,GAAG1J,GAAGA,EAAE2K,GAAG3K,GAAG,SAAS6J,GAAG7J,EAAEC,EAAEC,EAAEC,EAAEC,EAAEO,GAAG,IAAIN,EAAE,EAAED,EAAE8B,EAAElC,EAAE6B,OAAOpB,EAAER,EAAE4B,OAAO,GAAGK,GAAGzB,KAAKJ,GAAGI,EAAEyB,GAAG,OAAM,EAAG,IAAIR,EAAEf,EAAEI,IAAIf,GAAG,GAAG0B,GAAGf,EAAEI,IAAId,GAAG,OAAOyB,GAAGzB,EAAE,IAAIK,GAAG,EAAEkC,GAAE,EAAG9B,EAAE,EAAEN,EAAE,IAAImI,QAAG,EAAO,IAAI5H,EAAEiD,IAAI5D,EAAEC,GAAGU,EAAEiD,IAAI3D,EAAED,KAAKM,EAAE4B,GAAG,CAAC,IAAIT,EAAEzB,EAAEM,GAAGmC,EAAExC,EAAEK,GAAG,GAAGH,EAAE,IAAIK,EAAEH,EAAEF,EAAEsC,EAAEhB,EAAEnB,EAAEL,EAAED,EAAEW,GAAGR,EAAEsB,EAAEgB,EAAEnC,EAAEN,EAAEC,EAAEU,GAAG,QAAG,IAASH,EAAE,CAAC,GAAGA,EAAE,SAASgC,GAAE,EAAG,MAAM,GAAG9B,GAAG,IAAIwD,EAAEjE,GAAG,SAASD,EAAEC,GAAG,IAAIS,EAAE8D,IAAIvE,KAAKwB,IAAIzB,GAAGE,EAAEuB,EAAEzB,EAAEG,EAAEC,EAAEO,IAAI,OAAOD,EAAE8H,IAAIvI,MAAM,CAACuC,GAAE,EAAG,YAAY,GAAGf,IAAIgB,IAAIvC,EAAEuB,EAAEgB,EAAEtC,EAAEC,EAAEO,GAAG,CAAC6B,GAAE,EAAG,OAAO,OAAO7B,EAAE+D,OAAO1E,GAAGW,EAAE+D,OAAOzE,GAAGuC,EAAE,SAASoG,GAAG5I,EAAEC,GAAG,IAAIC,EAAEC,EAAEC,EAAEJ,EAAEmE,SAAS,OAAO,WAAWhE,SAASD,EAAED,KAAK,UAAUE,GAAG,UAAUA,GAAG,WAAWA,EAAE,cAAcD,EAAE,OAAOA,GAAGE,EAAE,iBAAiBH,EAAE,SAAS,QAAQG,EAAEgE,IAAI,SAASiD,GAAGrH,EAAEC,GAAG,IAAIC,EAAE,SAASF,EAAEC,GAAG,OAAO,MAAMD,OAAE,EAAOA,EAAEC,GAAtC,CAA0CD,EAAEC,GAAG,OAAtqE,SAAYD,GAAG,SAASwJ,GAAGxJ,IAAI,SAASA,GAAG,QAAQwG,GAAGA,KAAKxG,EAA5B,CAA+BA,MAAM4K,GAAG5K,IAAIqE,EAAErE,GAAG4G,EAAElG,GAAGqC,KAAK6E,GAAG5H,IAAglE6K,CAAG3K,GAAGA,OAAE,EAAO,IAAIyJ,GAAG,SAAS3J,GAAG,OAAO2G,EAAEpG,KAAKP,IAAI,SAASyK,GAAGzK,EAAEC,GAAG,SAASA,EAAE,MAAMA,EAAE,iBAAiBA,KAAK,iBAAiBD,GAAGyB,EAAEsB,KAAK/C,KAAKA,GAAG,GAAGA,EAAE,GAAG,GAAGA,EAAEC,EAAE,SAASkJ,GAAGnJ,EAAEC,GAAG,GAAGyJ,GAAG1J,GAAG,OAAM,EAAG,IAAIE,SAASF,EAAE,QAAQ,UAAUE,GAAG,UAAUA,GAAG,WAAWA,GAAG,MAAMF,IAAI8K,GAAG9K,KAAMS,EAAEsC,KAAK/C,KAAKkC,EAAEa,KAAK/C,IAAI,MAAMC,GAAGD,KAAKY,OAAOX,GAAI,SAASqK,GAAGtK,GAAG,OAAOA,GAAGA,IAAIwJ,GAAGxJ,GAAG,SAASuK,GAAGvK,EAAEC,GAAG,OAAO,SAASC,GAAG,OAAO,MAAMA,GAAIA,EAAEF,KAAKC,SAAI,IAASA,GAAGD,KAAKY,OAAOV,MAAOkH,GAAG,qBAAqBuC,GAAG,IAAIvC,EAAE,IAAI2D,YAAY,MAAMzD,GAAGqC,GAAG,IAAIrC,IAAIlH,GAAGmH,GAAG,oBAAoBoC,GAAGpC,EAAEyD,YAAYxD,GAAGmC,GAAG,IAAInC,IAAInH,GAAGoH,GAAG,oBAAoBkC,GAAG,IAAIlC,MAAMkC,GAAG,SAAS3J,GAAG,IAAIC,EAAE0G,EAAEpG,KAAKP,GAAGE,EAAED,GAAGU,EAAEX,EAAEmK,iBAAY,EAAOhK,EAAED,EAAE0H,GAAG1H,QAAG,EAAO,GAAGC,EAAE,OAAOA,GAAG,KAAKwH,EAAE,MAAM,oBAAoB,KAAKE,EAAE,OAAOzH,EAAE,KAAK0H,GAAG,MAAM,mBAAmB,KAAKC,GAAG,OAAO1H,EAAE,KAAK2H,GAAG,MAAM,mBAAmB,OAAO/H,IAAI,IAAI0K,GAAGM,IAAI,SAASjL,GAAG,IAAIC,EAAED,EAAE,OAAOC,EAAED,GAAG,GAAG,SAASA,GAAG,GAAG,iBAAiBA,EAAE,OAAOA,EAAE,GAAG8K,GAAG9K,GAAG,OAAOmI,GAAGA,GAAG5H,KAAKP,GAAG,GAAG,IAAIC,EAAED,EAAE,GAAG,MAAM,KAAKC,GAAG,EAAED,IAAG,IAAK,KAAKC,EAApH,CAAuHA,GAAG,IAAIC,EAAE,GAAG,OAAOwB,EAAEqB,KAAK/C,IAAIE,EAAE4B,KAAK,IAAI9B,EAAE8C,QAAQxC,GAAG,SAASN,EAAEC,EAAEE,EAAEC,GAAGF,EAAE4B,KAAK3B,EAAEC,EAAE0C,QAAQN,EAAE,MAAMvC,GAAGD,MAAME,KAAK,SAASmJ,GAAGrJ,GAAG,GAAG,iBAAiBA,GAAG8K,GAAG9K,GAAG,OAAOA,EAAE,IAAIC,EAAED,EAAE,GAAG,MAAM,KAAKC,GAAG,EAAED,IAAG,IAAK,KAAKC,EAAE,SAAS2H,GAAG5H,GAAG,GAAG,MAAMA,EAAE,CAAC,IAAI,OAAOyG,EAAElG,KAAKP,GAAG,MAAMA,IAAI,IAAI,OAAOA,EAAE,GAAG,MAAMA,KAAK,MAAM,GAAG,SAASiL,GAAGjL,EAAEC,GAAG,GAAG,mBAAmBD,GAAGC,GAAG,mBAAmBA,EAAE,MAAM,IAAIqE,UAAU,uBAAuB,IAAIpE,EAAE,SAAFA,IAAa,IAAIC,EAAEyB,UAAUxB,EAAEH,EAAEA,EAAEgC,MAAMgB,KAAK9C,GAAGA,EAAE,GAAGQ,EAAET,EAAEqE,MAAM,GAAG5D,EAAE6D,IAAIpE,GAAG,OAAOO,EAAEI,IAAIX,GAAG,IAAIC,EAAEL,EAAEiC,MAAMgB,KAAK9C,GAAG,OAAOD,EAAEqE,MAAM5D,EAAEiD,IAAIxD,EAAEC,GAAGA,GAAG,OAAOH,EAAEqE,MAAM,IAAI0G,GAAGxG,OAAO6D,IAAIpI,EAAE,SAASyI,GAAG3I,EAAEC,GAAG,OAAOD,IAAIC,GAAGD,GAAGA,GAAGC,GAAGA,EAAE,SAASyK,GAAG1K,GAAG,OAAO,SAASA,GAAG,OAAOyJ,GAAGzJ,IAAIiJ,GAAGjJ,GAA7B,CAAiCA,IAAI0G,EAAEnG,KAAKP,EAAE,aAAagH,EAAEzG,KAAKP,EAAE,WAAW2G,EAAEpG,KAAKP,IAAIG,GAAG8K,GAAGxG,MAAM6D,GAAG,IAAIoB,GAAG3H,MAAMC,QAAQ,SAASiH,GAAGjJ,GAAG,OAAO,MAAMA,GAAGwK,GAAGxK,EAAE6B,UAAU+I,GAAG5K,GAAG,SAAS4K,GAAG5K,GAAG,IAAIC,EAAEuJ,GAAGxJ,GAAG2G,EAAEpG,KAAKP,GAAG,GAAG,MAAM,qBAAqBC,GAAG,8BAA8BA,EAAE,SAASuK,GAAGxK,GAAG,MAAM,iBAAiBA,GAAGA,GAAG,GAAGA,EAAE,GAAG,GAAGA,GAAG,iBAAiB,SAASwJ,GAAGxJ,GAAG,IAAIC,SAASD,EAAE,QAAQA,IAAI,UAAUC,GAAG,YAAYA,GAAG,SAASwJ,GAAGzJ,GAAG,QAAQA,GAAG,iBAAiBA,EAAE,SAAS8K,GAAG9K,GAAG,MAAM,iBAAiBA,GAAGyJ,GAAGzJ,IAAI,mBAAmB2G,EAAEpG,KAAKP,GAAG,IAAI4J,GAAG7F,EAAE,SAAS/D,GAAG,OAAO,SAASC,GAAG,OAAOD,EAAEC,IAAxC,CAA6C8D,GAAG,SAAS/D,GAAG,OAAOyJ,GAAGzJ,IAAIwK,GAAGxK,EAAE6B,WAAWY,EAAEkE,EAAEpG,KAAKP,KAAK,SAASgJ,GAAGhJ,GAAG,OAAOiJ,GAAGjJ,GAAzxR,SAAYA,EAAEC,GAAG,IAAIC,EAAEwJ,GAAG1J,IAAI0K,GAAG1K,GAAG,SAASA,EAAEC,GAAG,IAAI,IAAIC,GAAG,EAAEC,EAAE4B,MAAM/B,KAAKE,EAAEF,GAAGG,EAAED,GAAGD,EAAEC,GAAG,OAAOC,EAA9D,CAAiEH,EAAE6B,OAAOqJ,QAAQ,GAAG/K,EAAED,EAAE2B,OAAOzB,IAAID,EAAE,IAAI,IAAIQ,KAAKX,GAAGC,IAAIyG,EAAEnG,KAAKP,EAAEW,IAAIP,IAAI,UAAUO,GAAG8J,GAAG9J,EAAER,KAAKD,EAAE4B,KAAKnB,GAAG,OAAOT,EAAqkRiL,CAAGnL,GAAnvG,SAAYA,GAAG,GAAGE,GAAGD,EAAED,IAAIC,EAAEkK,YAAmDlK,KAArC,mBAAmBC,GAAGA,EAAEqB,WAAW+E,GAAQ,OAAOa,EAAEnH,GAAG,IAAIC,EAAEC,EAAIE,EAAE,GAAG,IAAI,IAAIO,KAAKC,OAAOZ,GAAG0G,EAAEnG,KAAKP,EAAEW,IAAI,eAAeA,GAAGP,EAAE0B,KAAKnB,GAAG,OAAOP,EAA8jGgL,CAAGpL,GAAG,SAASqK,GAAGrK,GAAG,OAAOA,EAAEE,EAAEH,QAAQ,SAASC,EAAEC,EAAEC,GAAG,IAAIC,EAAEuJ,GAAG1J,GAAGgE,EAAER,EAAEpD,EAAEwB,UAAUC,OAAO,EAAE,OAAO1B,EAAEH,EAAEoK,GAAGnK,GAAGC,EAAEE,EAAE0I,OAAOvI,KAAK0C,KAAK/C,EAAE,GAAGA,EAAE,EAAFA,CAAKF,KAAK,SAASA,EAAEC,GAAGD,EAAED,QAAQ,SAASC,GAAG,OAAOA,EAAEqL,kBAAkBrL,EAAEsL,UAAU,aAAatL,EAAEuL,MAAM,GAAGvL,EAAEwL,WAAWxL,EAAEwL,SAAS,IAAI5K,OAAOC,eAAeb,EAAE,SAAS,CAACc,YAAW,EAAGC,IAAI,WAAW,OAAOf,EAAEM,KAAKM,OAAOC,eAAeb,EAAE,KAAK,CAACc,YAAW,EAAGC,IAAI,WAAW,OAAOf,EAAEK,KAAKL,EAAEqL,gBAAgB,GAAGrL,IAAI,SAASA,EAAEC,GAAGiL,OAAO3J,UAAUkK,SAASP,OAAO3J,UAAUkK,OAAO,SAASzL,EAAEC,GAAG,OAAOD,IAAI,EAAEC,EAAEiL,YAAO,IAASjL,EAAEA,EAAE,KAAKgD,KAAKpB,OAAO7B,EAAEkL,OAAOjI,QAAQjD,GAAGiD,KAAKpB,QAAQ5B,EAAE4B,SAAS5B,GAAGA,EAAEyL,OAAO1L,EAAEC,EAAE4B,SAASqJ,OAAOjI,MAAMhD,EAAE+C,MAAM,EAAEhD,OAAO,SAASA,EAAEC,EAAEC,GAAG,aAAa,SAASC,EAAEH,EAAEC,EAAEC,GAAG,OAAOD,KAAKD,EAAEY,OAAOC,eAAeb,EAAEC,EAAE,CAACiB,MAAMhB,EAAEY,YAAW,EAAG6K,cAAa,EAAGC,UAAS,IAAK5L,EAAEC,GAAGC,EAAEF,EAAE,SAASI,EAAEJ,GAAG,GAAGgB,OAAO6K,YAAYjL,OAAOZ,IAAI,uBAAuBY,OAAOW,UAAUgB,SAAShC,KAAKP,GAAG,OAAO+B,MAAM+J,KAAK9L,GAAG,SAASW,EAAEX,GAAG,OAAO,SAASA,GAAG,GAAG+B,MAAMC,QAAQhC,GAAG,CAAC,IAAI,IAAIC,EAAE,EAAEC,EAAE,IAAI6B,MAAM/B,EAAE6B,QAAQ5B,EAAED,EAAE6B,OAAO5B,IAAIC,EAAED,GAAGD,EAAEC,GAAG,OAAOC,GAAnG,CAAuGF,IAAII,EAAEJ,IAAI,WAAW,MAAM,IAAIsE,UAAU,mDAA/B,GAAqF,SAASjE,EAAEL,GAAG,GAAG+B,MAAMC,QAAQhC,GAAG,OAAOA,EAAE,SAASkC,IAAI,MAAM,IAAIoC,UAAU,wDAAwD,SAAS7D,EAAET,EAAEC,GAAG,KAAKD,aAAaC,GAAG,MAAM,IAAIqE,UAAU,qCAAqC,SAAS5C,EAAE1B,EAAEC,GAAG,IAAI,IAAIC,EAAE,EAAEA,EAAED,EAAE4B,OAAO3B,IAAI,CAAC,IAAIC,EAAEF,EAAEC,GAAGC,EAAEW,WAAWX,EAAEW,aAAY,EAAGX,EAAEwL,cAAa,EAAG,UAAUxL,IAAIA,EAAEyL,UAAS,GAAIhL,OAAOC,eAAeb,EAAEG,EAAE4L,IAAI5L,IAAI,SAASG,EAAEN,GAAG,OAAOM,EAAE,mBAAmBU,QAAQ,iBAAiBA,OAAO6K,SAAS,SAAS7L,GAAG,cAAcA,GAAG,SAASA,GAAG,OAAOA,GAAG,mBAAmBgB,QAAQhB,EAAEmK,cAAcnJ,QAAQhB,IAAIgB,OAAOO,UAAU,gBAAgBvB,IAAIA,GAAG,SAASwC,EAAExC,GAAG,OAAOwC,EAAE,mBAAmBxB,QAAQ,WAAWV,EAAEU,OAAO6K,UAAU,SAAS7L,GAAG,OAAOM,EAAEN,IAAI,SAASA,GAAG,OAAOA,GAAG,mBAAmBgB,QAAQhB,EAAEmK,cAAcnJ,QAAQhB,IAAIgB,OAAOO,UAAU,SAASjB,EAAEN,KAAKA,GAAG,SAASU,EAAEV,GAAG,QAAG,IAASA,EAAE,MAAM,IAAIgM,eAAe,6DAA6D,OAAOhM,EAAE,SAASyB,EAAEzB,GAAG,OAAOyB,EAAEb,OAAOqL,eAAerL,OAAOsL,eAAe,SAASlM,GAAG,OAAOA,EAAEmM,WAAWvL,OAAOsL,eAAelM,KAAKA,GAAG,SAASyC,EAAEzC,EAAEC,GAAG,OAAOwC,EAAE7B,OAAOqL,gBAAgB,SAASjM,EAAEC,GAAG,OAAOD,EAAEmM,UAAUlM,EAAED,IAAIA,EAAEC,GAAGC,EAAEA,EAAED,GAAG,IAAIO,EAAEN,EAAE,GAAGwC,EAAExC,EAAEC,EAAEK,GAAGmC,EAAEzC,EAAE,GAAGuD,EAAEvD,EAAEC,EAAEwC,GAAGe,EAAExD,EAAE,GAAG2D,EAAE3D,EAAEC,EAAEuD,GAAGI,EAAE5D,EAAE,GAAG6D,EAAE7D,EAAEC,EAAE2D,GAAGE,EAAE9D,EAAE,GAAGgE,EAAEhE,EAAEC,EAAE6D,GAAGR,EAAEtD,EAAE,GAAGmE,EAAEnE,EAAEC,EAAEqD,GAAQ,SAASS,EAAEjE,EAAEC,GAAG,OAAOI,EAAEL,IAAI,SAASA,EAAEC,GAAG,IAAIC,EAAE,GAAGC,GAAE,EAAGC,GAAE,EAAGO,OAAE,EAAO,IAAI,IAAI,IAAIN,EAAE6B,EAAElC,EAAEgB,OAAO6K,cAAc1L,GAAGE,EAAE6B,EAAEkK,QAAQC,QAAQnM,EAAE4B,KAAKzB,EAAEa,QAAQjB,GAAGC,EAAE2B,SAAS5B,GAAGE,GAAE,IAAK,MAAMH,GAAGI,GAAE,EAAGO,EAAEX,EAAvH,QAAiI,IAAIG,GAAG,MAAM+B,EAAEoK,QAAQpK,EAAEoK,SAAzB,QAA0C,GAAGlM,EAAE,MAAMO,GAAG,OAAOT,EAA1O,CAA6OF,EAAEC,IAAIiC,IAArRhC,EAAE,GAAuR,IAAI8F,EAAE,CAAC,CAAC,cAAc,CAAC,QAAQ,KAAK,MAAM,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,gBAAgB,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,KAAK,OAAO,CAAC,sBAAsB,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,YAAY,CAAC,UAAU,iBAAiB,KAAK,KAAK,gBAAgB,EAAE,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,OAAO,MAAM,OAAO,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,MAAM,MAAM,QAAQ,CAAC,UAAU,CAAC,OAAO,WAAW,KAAK,OAAO,CAAC,QAAQ,CAAC,UAAU,aAAa,KAAK,OAAO,CAAC,YAAY,CAAC,WAAW,KAAK,KAAK,iBAAiB,EAAE,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,YAAY,KAAK,MAAM,CAAC,aAAa,CAAC,OAAO,WAAW,KAAK,MAAM,kBAAkB,CAAC,UAAU,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,UAAU,CAAC,eAAe,KAAK,OAAO,CAAC,aAAa,CAAC,QAAQ,KAAK,OAAO,CAAC,WAAW,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,UAAU,CAAC,SAAS,WAAW,KAAK,MAAM,kBAAkB,CAAC,UAAU,CAAC,SAAS,YAAY,KAAK,KAAK,gBAAgB,CAAC,SAAS,CAAC,UAAU,mBAAmB,KAAK,OAAO,CAAC,QAAQ,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,QAAQ,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,iBAAiB,KAAK,OAAO,CAAC,yBAAyB,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,WAAW,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,iBAAiB,KAAK,KAAK,kBAAkB,CAAC,iCAAiC,CAAC,QAAQ,KAAK,OAAO,CAAC,SAAS,CAAC,QAAQ,KAAK,OAAO,CAAC,WAAW,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,eAAe,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,WAAW,CAAC,QAAQ,KAAK,OAAO,CAAC,WAAW,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,iBAAiB,KAAK,IAAI,iBAAiB,EAAE,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,QAAQ,CAAC,aAAa,CAAC,UAAU,KAAK,OAAO,CAAC,wBAAwB,CAAC,UAAU,aAAa,KAAK,MAAM,GAAG,GAAG,CAAC,2BAA2B,CAAC,UAAU,KAAK,OAAO,CAAC,OAAO,CAAC,UAAU,KAAK,OAAO,CAAC,QAAQ,CAAC,UAAU,iBAAiB,KAAK,MAAM,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,gBAAgB,CAAC,WAAW,CAAC,UAAU,iBAAiB,KAAK,KAAK,gBAAgB,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,QAAQ,CAAC,UAAU,KAAK,OAAO,CAAC,QAAQ,CAAC,UAAU,KAAK,OAAO,CAAC,aAAa,CAAC,UAAU,mBAAmB,KAAK,MAAM,aAAa,CAAC,wBAAgB,CAAC,UAAU,KAAK,MAAM,eAAe,CAAC,UAAU,CAAC,SAAS,WAAW,YAAY,KAAK,OAAO,CAAC,OAAO,CAAC,UAAU,aAAa,KAAK,MAAM,CAAC,aAAU,CAAC,UAAU,aAAa,KAAK,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,SAAS,YAAY,KAAK,MAAM,aAAa,CAAC,iBAAiB,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,WAAW,UAAU,KAAK,KAAK,eAAe,CAAC,WAAW,CAAC,UAAU,KAAK,OAAO,CAAC,WAAW,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,qBAAqB,CAAC,UAAU,aAAa,KAAK,IAAI,GAAG,EAAE,CAAC,MAAM,MAAM,QAAQ,CAAC,UAAU,CAAC,UAAU,iBAAiB,KAAK,OAAO,CAAC,QAAQ,CAAC,SAAS,gBAAgB,KAAK,MAAM,CAAC,cAAc,CAAC,UAAU,mBAAmB,KAAK,MAAM,aAAa,CAAC,oBAAoB,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,WAAW,UAAU,UAAU,KAAK,MAAM,eAAe,CAAC,WAAW,CAAC,UAAU,KAAK,OAAO,CAAC,OAAO,CAAC,WAAW,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,WAAW,UAAU,KAAK,MAAM,gBAAgB,CAAC,SAAS,CAAC,SAAS,YAAY,KAAK,KAAK,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,iBAAiB,KAAK,OAAO,CAAC,mBAAmB,CAAC,WAAW,KAAK,OAAO,CAAC,QAAQ,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,OAAO,WAAW,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,WAAW,UAAU,KAAK,KAAK,iBAAiB,CAAC,QAAQ,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,YAAY,KAAK,MAAM,CAAC,UAAU,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,aAAa,CAAC,UAAU,aAAa,KAAK,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,KAAK,QAAQ,CAAC,YAAY,CAAC,UAAU,mBAAmB,KAAK,MAAM,aAAa,CAAC,SAAS,CAAC,UAAU,KAAK,OAAO,CAAC,gBAAgB,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,iBAAiB,KAAK,OAAO,CAAC,QAAQ,CAAC,UAAU,aAAa,KAAK,MAAM,aAAa,CAAC,WAAW,CAAC,UAAU,mBAAmB,KAAK,OAAO,CAAC,YAAY,CAAC,QAAQ,KAAK,MAAM,aAAa,CAAC,UAAU,CAAC,SAAS,YAAY,KAAK,MAAM,CAAC,UAAU,CAAC,UAAU,KAAK,MAAM,YAAY,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,eAAe,CAAC,YAAY,CAAC,QAAQ,KAAK,MAAM,CAAC,OAAO,CAAC,eAAe,KAAK,KAAK,gBAAgB,CAAC,OAAO,CAAC,eAAe,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,YAAY,KAAK,MAAM,cAAc,CAAC,SAAS,CAAC,eAAe,KAAK,MAAM,gBAAgB,CAAC,QAAQ,CAAC,SAAS,YAAY,KAAK,KAAK,cAAc,GAAG,CAAC,UAAU,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,gBAAgB,CAAC,SAAS,CAAC,eAAe,KAAK,OAAO,CAAC,aAAa,CAAC,OAAO,WAAW,KAAK,IAAI,gBAAgB,EAAE,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,UAAU,CAAC,QAAQ,CAAC,UAAU,KAAK,OAAO,CAAC,WAAW,CAAC,WAAW,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,SAAS,CAAC,eAAe,KAAK,OAAO,CAAC,aAAa,CAAC,OAAO,WAAW,KAAK,OAAO,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,WAAW,UAAU,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,eAAe,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,QAAQ,CAAC,SAAS,gBAAgB,KAAK,OAAO,CAAC,gBAAgB,CAAC,UAAU,KAAK,OAAO,CAAC,YAAY,CAAC,SAAS,WAAW,UAAU,UAAU,KAAK,OAAO,CAAC,aAAa,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,QAAQ,CAAC,QAAQ,KAAK,OAAO,CAAC,YAAY,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,aAAa,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,KAAK,OAAO,CAAC,WAAW,CAAC,QAAQ,KAAK,KAAK,gBAAgB,CAAC,WAAW,CAAC,QAAQ,KAAK,OAAO,CAAC,OAAO,CAAC,UAAU,KAAK,OAAO,CAAC,QAAQ,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,mBAAmB,CAAC,WAAW,KAAK,OAAO,CAAC,aAAa,CAAC,UAAU,aAAa,KAAK,OAAO,CAAC,aAAa,CAAC,UAAU,KAAK,OAAO,CAAC,YAAY,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,mBAAmB,KAAK,KAAK,eAAe,EAAE,CAAC,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,QAAQ,CAAC,aAAa,CAAC,WAAW,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,MAAM,iBAAiB,CAAC,SAAS,CAAC,UAAU,KAAK,OAAO,CAAC,WAAW,CAAC,QAAQ,KAAK,OAAO,CAAC,aAAa,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,gBAAgB,KAAK,OAAO,CAAC,aAAa,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,QAAQ,KAAK,MAAM,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,QAAQ,CAAC,UAAU,KAAK,OAAO,CAAC,QAAQ,CAAC,QAAQ,KAAK,OAAO,CAAC,cAAc,CAAC,SAAS,YAAY,KAAK,KAAK,eAAe,CAAC,gBAAgB,CAAC,WAAW,KAAK,OAAO,CAAC,cAAc,CAAC,WAAW,KAAK,KAAK,gBAAgB,CAAC,YAAY,CAAC,UAAU,mBAAmB,KAAK,OAAO,CAAC,QAAQ,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,cAAc,CAAC,QAAQ,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,UAAU,KAAK,KAAK,cAAc,CAAC,OAAO,CAAC,eAAe,KAAK,OAAO,CAAC,WAAW,CAAC,QAAQ,KAAK,KAAK,eAAe,CAAC,QAAQ,CAAC,WAAW,KAAK,OAAO,CAAC,YAAY,CAAC,eAAe,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,mBAAmB,KAAK,OAAO,CAAC,mBAAmB,CAAC,WAAW,KAAK,OAAO,CAAC,WAAW,CAAC,UAAU,iBAAiB,KAAK,OAAO,CAAC,OAAO,CAAC,UAAU,iBAAiB,KAAK,MAAM,CAAC,cAAc,CAAC,QAAQ,KAAK,KAAK,gBAAgB,CAAC,SAAS,CAAC,SAAS,WAAW,UAAU,KAAK,KAAK,eAAe,CAAC,WAAW,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,cAAc,CAAC,UAAU,aAAa,KAAK,IAAI,GAAG,EAAE,CAAC,MAAM,QAAQ,CAAC,QAAQ,CAAC,eAAe,KAAK,OAAO,CAAC,aAAU,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,YAAY,KAAK,MAAM,CAAC,SAAS,CAAC,SAAS,OAAO,UAAU,UAAU,KAAK,IAAI,kBAAkB,GAAG,CAAC,SAAS,CAAC,UAAU,KAAK,OAAO,CAAC,wBAAwB,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,cAAc,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,mCAAmC,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,QAAQ,CAAC,WAAW,KAAK,OAAO,CAAC,aAAa,CAAC,UAAU,KAAK,OAAO,CAAC,iCAAwB,CAAC,UAAU,KAAK,OAAO,CAAC,eAAe,CAAC,eAAe,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,aAAa,CAAC,UAAU,KAAK,OAAO,CAAC,eAAe,CAAC,UAAU,KAAK,OAAO,CAAC,YAAY,CAAC,QAAQ,KAAK,KAAK,aAAa,CAAC,WAAW,CAAC,SAAS,YAAY,KAAK,OAAO,CAAC,WAAW,CAAC,SAAS,WAAW,YAAY,KAAK,OAAO,CAAC,kBAAkB,CAAC,WAAW,KAAK,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,OAAO,CAAC,eAAe,CAAC,UAAU,KAAK,MAAM,CAAC,cAAc,CAAC,QAAQ,KAAK,KAAK,iBAAiB,CAAC,cAAc,CAAC,SAAS,gBAAgB,KAAK,OAAO,CAAC,QAAQ,CAAC,SAAS,YAAY,KAAK,KAAK,eAAe,CAAC,YAAY,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC,UAAU,KAAK,OAAO,CAAC,WAAW,CAAC,UAAU,iBAAiB,KAAK,OAAO,CAAC,YAAY,CAAC,UAAU,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,WAAW,UAAU,KAAK,KAAK,iBAAiB,CAAC,cAAc,CAAC,UAAU,KAAK,KAAK,gBAAgB,CAAC,QAAQ,CAAC,eAAe,KAAK,OAAO,CAAC,SAAS,CAAC,QAAQ,KAAK,OAAO,CAAC,aAAa,CAAC,OAAO,WAAW,KAAK,OAAO,CAAC,WAAW,CAAC,UAAU,KAAK,OAAO,CAAC,WAAW,CAAC,QAAQ,KAAK,MAAM,CAAC,cAAc,CAAC,QAAQ,KAAK,OAAO,CAAC,OAAO,CAAC,UAAU,KAAK,OAAO,CAAC,QAAQ,CAAC,WAAW,KAAK,OAAO,CAAC,sBAAsB,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,UAAU,CAAC,SAAS,gBAAgB,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,KAAK,KAAK,iBAAiB,CAAC,eAAe,CAAC,OAAO,WAAW,KAAK,OAAO,CAAC,SAAS,CAAC,QAAQ,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,SAAS,WAAW,KAAK,MAAM,kBAAkB,CAAC,uBAAuB,CAAC,eAAe,KAAK,OAAO,CAAC,iBAAiB,CAAC,SAAS,YAAY,KAAK,KAAK,eAAe,CAAC,gBAAgB,CAAC,UAAU,iBAAiB,KAAK,IAAI,iBAAiiBAAiB,KAAK,OAAO,CAAC,aAAa,CAAC,OAAO,WAAW,KAAK,OAAO,CAAC,UAAU,CAAC,WAAW,KAAK,OAAO,CAAC,eAAe,CAAC,UAAU,KAAK,KAAK,eAAe,GAAG,CAAC,YAAY,CAAC,UAAU,iBAAiB,KAAK,MAAM,CAAC,UAAU,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC,eAAe,KAAK,OAAO,CAAC,SAAS,CAAC,UAAU,KAAK,OAAO,CAAC,WAAW,CAAC,UAAU,KAAK,QAAQC,EAAE,CAAC,CAAC,iBAAiB,CAAC,WAAW,KAAK,QAAQ,CAAC,WAAW,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,UAAU,CAAC,UAAU,iBAAiB,KAAK,QAAQ,CAAC,yBAAyB,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,iBAAiB,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,eAAe,CAAC,WAAW,KAAK,OAAO,CAAC,mBAAmB,CAAC,UAAU,iBAAiB,KAAK,OAAO,CAAC,gBAAgB,CAAC,UAAU,KAAK,OAAO,CAAC,YAAY,CAAC,UAAU,KAAK,OAAO,CAAC,YAAY,CAAC,WAAW,KAAK,OAAO,CAAC,SAAS,CAAC,SAAS,YAAY,KAAK,KAAK,eAAe,CAAC,aAAa,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,iBAAiB,CAAC,WAAW,KAAK,OAAO,CAAC,2BAA2B,CAAC,WAAW,KAAK,QAAQ,CAAC,sBAAmB,CAAC,UAAU,aAAa,KAAK,MAAM,GAAG,GAAG,CAAC,eAAe,CAAC,UAAU,KAAK,OAAO,CAAC,eAAe,CAAC,UAAU,aAAa,KAAK,MAAM,GAAG,GAAG,CAAC,4BAA4B,CAAC,UAAU,iBAAiB,KAAK,OAAO,CAAC,eAAe,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,UAAU,CAAC,WAAW,KAAK,OAAO,CAAC,2BAA2B,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,sBAAsB,CAAC,UAAU,aAAa,KAAK,QAAQ,CAAC,oBAAoB,CAAC,WAAW,KAAK,QAAQ,SAASC,EAAElG,EAAEC,EAAEC,EAAEC,EAAEC,GAAG,OAAOF,GAAGE,EAAEJ,EAAE,GAAGyL,OAAOxL,EAAE4B,OAAO,KAAK,IAAI1B,EAAEH,EAAE,GAAGyL,OAAOxL,EAAE4B,OAAO,KAAK,IAAI3B,EAAE,SAASiG,EAAEnG,EAAEC,EAAEC,EAAEE,EAAEC,GAAG,IAAI6B,EAAEzB,EAAEiB,EAAE,GAAG,OAAOjB,GAAE,IAAKR,EAAE,EAAEiC,EAAE,IAAIqK,OAAOtK,MAAMC,EAAEvB,EAAEX,EAAEoE,KAAK,SAASpE,GAAG,IAAIW,EAAE,CAACsJ,KAAKjK,EAAE,GAAGwM,QAAQxM,EAAE,GAAGyM,KAAKzM,EAAE,GAAG0M,YAAY1M,EAAE,GAAG2M,SAAS3M,EAAE,GAAG4M,OAAO1G,EAAEhG,EAAEF,EAAE,GAAGA,EAAE,GAAGI,EAAEC,GAAGwM,SAAS7M,EAAE,IAAI,GAAGkC,EAAE,GAAG,OAAOlC,EAAE,IAAIA,EAAE,GAAGoE,KAAK,SAASnE,GAAG,IAAIC,EAAE,SAASF,GAAG,IAAI,IAAIC,EAAE,EAAEA,EAAE2B,UAAUC,OAAO5B,IAAI,CAAC,IAAIC,EAAE,MAAM0B,UAAU3B,GAAG2B,UAAU3B,GAAG,GAAGG,EAAEQ,OAAOwC,KAAKlD,GAAG,mBAAmBU,OAAOkM,wBAAwB1M,EAAEA,EAAEmM,OAAO3L,OAAOkM,sBAAsB5M,GAAG6M,QAAQ,SAAS/M,GAAG,OAAOY,OAAOoM,yBAAyB9M,EAAEF,GAAGc,gBAAgBV,EAAE2F,SAAS,SAAS9F,GAAGE,EAAEH,EAAEC,EAAEC,EAAED,OAAO,OAAOD,EAApU,CAAuU,GAAGW,GAAGT,EAAEyM,SAAS3M,EAAE,GAAGC,EAAEC,EAAE+M,YAAW,EAAG/M,EAAEgN,eAAejN,EAAE4B,OAAOK,EAAEJ,KAAK5B,MAAMgC,EAAEL,OAAO,GAAGlB,EAAEwM,UAAS,EAAG1M,GAAG,UAAUR,EAAEkK,YAAYF,MAAMhK,EAAEmN,SAASpN,EAAE,KAAKW,EAAE0M,cAAa,EAAG,CAAC1M,GAAG4L,OAAOrK,KAAKR,EAAEA,EAAE6K,OAAOrK,GAAG,CAACvB,KAAK,CAACA,QAAQe,GAAG,SAAS0E,EAAEpG,EAAEC,EAAEC,EAAEC,GAAG,GAAG,OAAOD,EAAE,CAAC,IAAIE,EAAEQ,OAAOwC,KAAKlD,GAAGS,EAAEC,OAAO0M,OAAOpN,GAAGE,EAAE2F,SAAS,SAAS7F,EAAEE,GAAG,GAAGD,EAAE,OAAOH,EAAE8B,KAAK,CAAC5B,EAAES,EAAEP,KAAK,IAAIC,EAAEL,EAAEuN,WAAW,SAASvN,GAAG,OAAOA,EAAE,KAAKE,KAAK,IAAI,IAAIG,EAAE,CAAC,IAAI6B,EAAE,CAAChC,GAAGgC,EAAEjC,GAAGU,EAAEP,GAAGJ,EAAE8B,KAAKI,QAAQlC,EAAEK,GAAGJ,GAAGU,EAAEP,OAAO,SAASiG,EAAErG,EAAEC,GAAG,OAAO,IAAIA,EAAE4B,OAAO7B,EAAEA,EAAEoE,KAAK,SAASpE,GAAG,IAAIE,EAAED,EAAEsN,WAAW,SAAStN,GAAG,OAAOA,EAAE,KAAKD,EAAE,MAAM,IAAI,IAAIE,EAAE,OAAOF,EAAE,IAAIG,EAAEF,EAAEC,GAAG,OAAOC,EAAE,KAAKH,EAAE,GAAGG,EAAE,IAAIA,EAAE,KAAKH,EAAE,GAAGG,EAAE,IAAIA,EAAE,KAAKH,EAAE,GAAGG,EAAE,IAAIH,KAAK,IAAIsG,EAAE,SAAStG,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAE6B,EAAER,EAAEpB,EAAEkC,EAAE9B,EAAEe,EAAEgB,EAAEjC,EAAEkC,GAAGjC,EAAEwC,KAAKjD,GAAGiD,KAAKuK,cAAc,SAASxN,EAAEC,GAAG,GAAG,iBAAiBD,EAAE,CAAC,IAAIE,EAAEF,EAAE,OAAOC,EAAE8M,QAAQ,SAAS/M,GAAG,OAAOA,EAAEwM,QAAQiB,MAAM,SAASzN,GAAG,OAAOA,IAAIE,QAAQ,OAAOD,EAAE8M,QAAQ,SAAS9M,GAAG,OAAOD,EAAEoE,KAAK,SAASpE,GAAG,OAAOC,EAAEuM,QAAQiB,MAAM,SAASxN,GAAG,OAAOA,IAAID,QAAQyN,MAAM,SAASzN,GAAG,OAAOA,SAASiD,KAAKyK,gBAAgB,SAAS1N,EAAEC,GAAG,IAAIC,EAAE,GAAGqM,OAAO5L,EAAEX,GAAGW,EAAEV,IAAI,OAAOC,EAAEyN,MAAM,SAAS3N,EAAEC,GAAG,OAAOD,EAAEiK,KAAKhK,EAAEgK,MAAM,EAAEjK,EAAEiK,KAAKhK,EAAEgK,KAAK,EAAE,KAAK/J,GAAG+C,KAAK2K,uBAAuB,SAAS5N,EAAEC,EAAEC,GAAG,OAAO,IAAIF,EAAE6B,OAAO5B,EAAEC,EAAEF,EAAEoE,KAAK,SAASpE,GAAG,IAAIE,EAAED,EAAE4N,MAAM,SAAS5N,GAAG,OAAOA,EAAEwM,OAAOzM,KAAK,GAAGE,EAAE,OAAOA,KAAK6M,QAAQ,SAAS/M,GAAG,OAAOA,KAAKC,EAAE8M,QAAQ,SAAS9M,GAAG,OAAOD,EAAEyN,MAAM,SAASzN,GAAG,OAAOA,IAAIC,EAAEwM,YAAYxJ,KAAK6K,kBAAkB,SAAS9N,EAAEC,EAAEC,GAAG,IAAI,IAAIC,EAAE,EAAEA,EAAEH,EAAE6B,OAAO1B,SAAI,IAASF,EAAED,EAAEG,GAAGsM,MAAMzM,EAAEG,GAAG4N,UAAU9N,EAAED,EAAEG,GAAGsM,WAAM,IAASxM,EAAED,EAAEG,GAAG8J,QAAQjK,EAAEG,GAAG4N,UAAU9N,EAAED,EAAEG,GAAG8J,OAAO,OAAO/J,GAAGF,EAAE2N,MAAM,SAAS3N,EAAEC,GAAG,OAAOD,EAAE+N,UAAU9N,EAAE8N,WAAW,EAAE/N,EAAE+N,UAAU9N,EAAE8N,UAAU,EAAE,KAAK/N,GAAGiD,KAAK+K,eAAe,SAAShO,EAAEC,GAAG,IAAI,IAAIC,EAAE,GAAGC,EAAE,EAAEA,EAAEF,EAAE4B,OAAO1B,IAAI,CAAC,IAAIC,EAAE6N,KAAKC,MAAMD,KAAKE,UAAUnO,IAAII,EAAEuM,UAAU1M,EAAEE,GAAGD,EAAE4B,KAAK1B,GAAG,OAAOF,GAAG+C,KAAKmL,iBAAiB,SAASpO,EAAEC,GAAG,OAAO,IAAIA,EAAE4B,OAAO7B,EAAEA,EAAE+M,QAAQ,SAAS/M,GAAG,OAAOC,EAAEmN,SAASpN,EAAEyM,UAAU,IAAI9J,EAAE,SAAS3C,EAAEC,EAAEC,GAAG,IAAIC,EAAE,GAAG,OAAOiG,EAAEjG,EAAE,EAAEH,GAAE,GAAIoG,EAAEjG,EAAE,EAAEF,GAAGmG,EAAEjG,EAAE,EAAED,GAAGC,EAA9D,CAAiEG,EAAEkC,EAAE9B,GAAG+C,EAAE4C,EAAE4H,KAAKC,MAAMD,KAAKE,UAAUnI,IAAIrD,GAAGe,EAAE2C,EAAE4H,KAAKC,MAAMD,KAAKE,UAAUlI,IAAItD,GAAGkB,EAAEI,EAAEkC,EAAE1C,EAAExD,EAAEwC,EAAEjC,EAAEkC,GAAG,GAAGoB,EAAED,EAAE,GAAGE,EAAEF,EAAE,GAAG,GAAG3D,EAAE,CAAC,IAAI8D,EAAEC,EAAEkC,EAAEzC,EAAEzD,EAAEwC,EAAEjC,EAAEkC,GAAG,GAAGwB,EAAEF,EAAE,GAAGA,EAAE,GAAGF,EAAEb,KAAKyK,gBAAgBxJ,EAAEJ,GAAG3D,IAAI2D,EAAEb,KAAKuK,cAAcrN,EAAE2D,IAAIb,KAAKoL,cAAcpL,KAAK6K,kBAAkB7K,KAAKmL,iBAAiBnL,KAAK2K,uBAAuBxN,EAAE0D,EAAEpC,EAAE0L,SAAS,kBAAkBlL,GAAGT,EAAEC,EAAE0L,SAAS,kBAAkBnK,KAAKqL,mBAAmB,IAAIjO,EAAEwB,OAAO,GAAGoB,KAAK6K,kBAAkB7K,KAAK2K,uBAAuBvN,EAAEyD,EAAEpC,EAAE0L,SAAS,uBAAuB3L,EAAEC,EAAE0L,SAAS,uBAAuBnK,KAAKsL,gBAAgBtL,KAAKmL,iBAAiBnL,KAAK2K,uBAAuBxN,EAAE2D,GAAG7B,IAAIqE,EAAE,SAASvG,GAAG,SAASC,EAAED,GAAG,IAAIE,EAAEO,EAAEwC,KAAKhD,IAAIC,EAAE,SAASF,EAAEC,GAAG,OAAOA,GAAG,WAAWuC,EAAEvC,IAAI,mBAAmBA,EAAES,EAAEV,GAAGC,EAAnE,CAAsEgD,KAAKxB,EAAExB,GAAGM,KAAK0C,KAAKjD,KAAKwO,qBAAqB3K,KAAK,SAAS7D,GAAG,OAAOA,GAAG,IAAIA,EAAE6B,OAAO3B,EAAEuO,MAAMJ,cAActB,QAAQ,SAAS9M,GAAG,OAAOiE,IAAIjE,EAAEgK,KAAKyE,cAAc1O,EAAE0O,iBAAiBhO,EAAEA,EAAER,KAAK,GAAG,QAAQA,EAAEyO,qBAAqB9K,KAAK,SAAS7D,EAAEC,EAAEE,EAAEC,GAAG,IAAIO,EAAE,IAAG,IAAKT,EAAE0O,MAAMC,kBAAkBzO,EAAEqN,MAAM,SAASxN,GAAG,GAAGiE,IAAIlE,EAAEC,EAAE0M,UAAU,OAAOxM,EAAEsN,MAAM,SAASzN,GAAG,GAAGC,EAAEwM,OAAOzM,EAAEyM,MAAMzM,EAAEmN,SAAS,OAAOxM,EAAEX,GAAE,MAAM,KAAMW,GAAG,OAAOA,EAAE,IAAIN,EAAEF,EAAE0N,MAAM,SAAS7N,GAAG,OAAOA,EAAEyM,MAAMxM,KAAK,GAAG,KAAKD,EAAE8O,OAAO,OAAOzO,EAAE,IAAI6B,EAAE/B,EAAE4O,QAAQ,SAAS9O,EAAEC,GAAG,GAAGgE,IAAIlE,EAAEE,EAAEyM,UAAU,CAAC,GAAGzM,EAAEyM,SAAS9K,OAAO5B,EAAE0M,SAAS9K,OAAO,OAAO3B,EAAE,GAAGA,EAAEyM,SAAS9K,SAAS5B,EAAE0M,SAAS9K,QAAQ3B,EAAE2M,SAAS5M,EAAE4M,SAAS,OAAO3M,EAAE,OAAOD,IAAI,CAAC0M,SAAS,GAAGE,SAAS,OAAOnM,EAAEA,EAAER,KAAK,OAAOgC,EAAE+H,KAAK/H,EAAE7B,KAAKH,EAAE8O,cAAc,SAAShP,GAAG,IAAIC,EAAEE,EAAED,EAAEuO,MAAMJ,eAAepO,EAAED,EAAEiP,QAAQ,IAAI,KAAKjP,EAAEiP,QAAQ,IAAI,IAAI9O,EAAE0N,MAAM,SAAS5N,GAAG,OAAOA,EAAE0M,WAAW3M,KAAKG,EAAE0N,MAAM,SAAS5N,GAAG,OAAOA,EAAEwM,MAAMzM,OAAOC,EAAE0M,UAAUzM,EAAEgP,SAAS,CAACC,gBAAgBlP,EAAEmP,gBAAgBlP,EAAE0O,MAAMS,mBAAmB,GAAGnP,EAAEoP,aAAarP,EAAE0M,SAAS1M,MAAMC,EAAEqP,SAAS,SAASvP,EAAEC,GAAG,GAAGD,EAAE,CAAC,IAAIG,EAAED,EAAEsP,YAAY,GAAGrP,GAAGsP,SAASC,KAAK,CAAC,IAAItP,EAAED,EAAEwP,aAAahP,EAAER,EAAEyP,wBAAwBC,IAAIJ,SAASC,KAAKI,UAAUzP,EAAEM,EAAEP,EAAE8B,EAAElC,EAAES,EAAEyB,EAAE0N,wBAAwBlO,EAAEQ,EAAEyN,aAAarP,EAAEG,EAAEoP,IAAIJ,SAASC,KAAKI,UAAUtN,EAAElC,EAAEoB,EAAEhB,EAAEJ,EAAEK,EAAER,EAAE2P,UAAUrO,EAAErB,EAAE,EAAEsB,EAAE,EAAE,GAAGxB,EAAE0O,MAAMmB,aAAazP,EAAEK,EAAE,GAAGL,EAAEK,EAAEV,IAAIS,GAAGe,GAAGtB,EAAE2P,UAAUpP,OAAO,GAAG8B,EAAEnC,EAAE,CAACJ,IAAIS,GAAGe,GAAG,IAAIgB,EAAErC,EAAEsB,EAAEvB,EAAE2P,UAAUpP,EAAE+B,MAAMvC,EAAE8P,YAAY,WAAW,IAAIhQ,EAAEE,EAAEsP,YAAYxP,GAAGyP,SAASC,OAAO1P,EAAE8P,UAAU,IAAI5P,EAAEoP,aAAa,SAAStP,EAAEC,GAAG,IAAIA,EAAE,OAAOD,EAAE,IAAIG,EAAEQ,EAAEV,EAAE2M,OAAOnM,EAAEP,EAAE0O,MAAMlN,EAAEjB,EAAE4O,mBAAmB/O,EAAEG,EAAEwP,sBAAsBzN,EAAE/B,EAAEyP,kBAAkBxP,EAAED,EAAE0P,WAAW,GAAGzO,IAAIvB,EAAEQ,EAAEyP,MAAM,MAAMC,QAAQlQ,EAAEA,EAAEgC,KAAK,MAAM7B,GAAGL,EAAEgN,aAAa9M,EAAEQ,EAAEyP,MAAM,MAAM,GAAGjQ,EAAE,GAAG2C,QAAQ,MAAM,GAAG2I,OAAOxL,EAAEiN,eAAe,MAAM/M,EAAEA,EAAEgC,KAAK,MAAMhC,EAAEQ,GAAGX,GAAG,IAAIA,EAAE6B,OAAO,OAAOH,EAAE,GAAGxB,EAAE0O,MAAM0B,OAAO,GAAGtQ,GAAGA,EAAE6B,OAAO,IAAI1B,IAAIO,EAAE,OAAOgB,EAAE1B,EAAEE,EAAE0O,MAAM0B,OAAOtQ,EAAE,IAAIyB,EAAEgB,EAAEsB,IAAI5D,GAAG,SAASH,EAAEC,GAAG,GAAG,IAAID,EAAEuQ,cAAc1O,OAAO,OAAO7B,EAAE,GAAG,MAAMC,EAAE,MAAM,CAACuQ,cAAcxQ,EAAEwQ,cAAcvQ,EAAEsQ,cAAcvQ,EAAEuQ,eAAe,IAAIrQ,EAAEC,EAAEE,EAAEH,EAAEF,EAAEuQ,gBAAgBnQ,EAAEF,IAAIgC,IAAIvB,EAAER,EAAE,GAAGM,EAAEN,EAAE6C,MAAM,GAAG,MAAM,CAACwN,cAAcxQ,EAAEwQ,cAAc7P,EAAE4P,cAAc9P,KAAK,CAAC+P,cAAc,GAAGD,cAAcvQ,EAAEoQ,MAAM,MAAM,OAAO3O,EAAEe,EAAEC,EAAE+N,cAAc/N,EAAE8N,cAAcpO,KAAK,IAAIM,EAAE+N,eAAepD,SAAS,OAAO3L,EAAE2L,SAAS,OAAO3L,GAAG,KAAKA,GAAGvB,EAAEuQ,YAAY,WAAW,IAAIzQ,EAAEE,EAAEwQ,eAAe1Q,EAAE2Q,QAAQ,IAAI1Q,EAAED,EAAEkB,MAAMW,OAAO,MAAM7B,EAAEkB,MAAM0P,OAAO3Q,EAAE,KAAKA,GAAG,GAAGD,EAAE6Q,kBAAkB5Q,EAAEA,IAAIC,EAAE4Q,WAAW,SAAS9Q,GAAG,OAAOE,EAAE,WAAWqM,OAAOvM,KAAKE,EAAE6Q,eAAe,WAAW,OAAO7Q,EAAEuO,MAAMU,gBAAgB,CAAClF,KAAK/J,EAAEuO,MAAMU,gBAAgBlF,MAAM,GAAG0C,SAASzM,EAAEuO,MAAMU,gBAAgBxC,UAAU,GAAGD,YAAYxM,EAAEuO,MAAMU,gBAAgB1C,MAAM,GAAGG,OAAO1M,EAAEuO,MAAMU,gBAAgBvC,QAAQ,IAAI,IAAI1M,EAAE8Q,wBAAwB,SAAShR,GAAG,GAAGA,EAAEiR,iBAAiB/Q,EAAEuO,MAAMyC,eAAehR,EAAE0O,MAAMuC,SAAS,CAAC,IAAIlR,EAAEC,EAAEuO,MAAMtO,EAAEF,EAAEqO,mBAAmBlO,EAAEH,EAAEkP,gBAAgBxO,EAAER,EAAEoM,OAAOrM,EAAEuO,MAAMJ,eAAed,WAAW,SAASvN,GAAG,OAAOA,EAAE2M,WAAWvM,EAAEuM,UAAU3M,EAAEyM,OAAOrM,EAAEqM,QAAQvM,EAAEgP,SAAS,CAACgC,cAAchR,EAAEuO,MAAMyC,aAAaE,sBAAsBzQ,IAAI,WAAWT,EAAEuO,MAAMyC,cAAchR,EAAEqP,SAASrP,EAAE4Q,WAAW5Q,EAAEuO,MAAM2C,6BAA6BlR,EAAEmR,YAAY,SAASrR,GAAG,IAAIC,EAAED,EAAEsR,OAAOpQ,MAAMf,EAAED,EAAE0O,MAAMxO,EAAED,EAAEmQ,OAAO3P,EAAER,EAAEoR,SAASlR,EAAEH,EAAE0O,MAAMS,mBAAmB,GAAGjP,EAAE8B,EAAEhC,EAAEuO,MAAMU,gBAAgB1O,EAAEP,EAAEuO,MAAM+C,gBAAgB,IAAItR,EAAE0O,MAAM6C,oBAAoB,CAAC,IAAI/P,EAAEtB,GAAG8B,EAAEmL,aAAanN,EAAEuO,MAAMJ,cAAcR,MAAM,SAAS7N,GAAG,OAAOA,EAAEyM,OAAOvK,EAAEuK,MAAMzM,EAAEmN,YAAYR,SAASzK,EAAEyK,UAAU,GAAG1M,EAAE+C,MAAM,EAAEtB,EAAEG,UAAUH,EAAE,OAAO,GAAGzB,IAAIG,EAAE,OAAOO,GAAGA,EAAE,GAAGT,EAAE6Q,iBAAiB/Q,EAAE,IAAIE,EAAEgP,SAAS,CAACE,gBAAgB,KAAK,GAAGnP,EAAE6C,QAAQ,MAAM,IAAIjB,OAAO,GAAG,CAAC,IAAG,IAAK3B,EAAE0O,MAAMsB,kBAAkB,OAAO,GAAG,iBAAiBhQ,EAAE0O,MAAMsB,mBAAmBjQ,EAAE6C,QAAQ,MAAM,IAAIjB,OAAO3B,EAAE0O,MAAMsB,kBAAkB,OAAO,GAAGjQ,IAAIC,EAAEuO,MAAMW,gBAAgB,CAACpP,EAAEiR,eAAejR,EAAEiR,iBAAiBjR,EAAE0R,aAAY,EAAG,IAAIpR,EAAEJ,EAAE0O,MAAM+C,QAAQnP,EAAEtC,EAAEuO,MAAM/N,EAAE8B,EAAE6L,cAAc5M,EAAEe,EAAE2M,gBAAgB1M,EAAED,EAAE+L,gBAAgB,GAAG5N,GAAGX,EAAE4R,UAAU3R,EAAE4B,OAAO,EAAE,CAAC,IAAIrB,EAAEP,EAAE6C,QAAQ,MAAM,MAAM5C,EAAEuO,MAAM+C,iBAAiB/P,EAAEkL,SAAS9K,OAAOrB,EAAEqB,UAAUK,EAAEhC,EAAE0O,MAAMiD,oBAAoBpQ,EAAEvB,EAAEyO,qBAAqBnO,EAAEsR,UAAU,EAAE,GAAGxR,EAAEI,EAAE+B,IAAIhB,EAAEhB,GAAE,GAAIJ,EAAEH,EAAEoP,aAAa9O,EAAE0B,GAAGA,EAAEA,EAAEyK,SAASzK,EAAET,EAAE,IAAIiB,EAAE1C,EAAEsR,OAAOS,eAAepP,EAAEzC,EAAEuO,MAAMW,gBAAgB3L,EAAEpD,EAAEwB,OAAOc,EAAEd,OAAO3B,EAAEgP,SAAS,CAACE,gBAAgB/O,EAAEmR,gBAAgB/Q,EAAE0O,gBAAgBjN,IAAI,WAAWuB,EAAE,IAAIf,GAAGe,GAAG,KAAKpD,EAAEuQ,OAAOvQ,EAAEwB,OAAO,GAAG3B,EAAEwQ,eAAeG,kBAAkBxQ,EAAEwB,OAAO,EAAExB,EAAEwB,OAAO,GAAGa,EAAE,GAAGC,EAAEd,QAAQxB,EAAEwB,QAAQ3B,EAAEwQ,eAAeG,kBAAkBnO,EAAEA,GAAG/B,GAAGA,EAAEN,EAAEyC,QAAQ,WAAW,IAAI5C,EAAE6Q,iBAAiB/Q,EAAEK,QAAQH,EAAE8R,iBAAiB,SAAShS,GAAGE,EAAEgP,SAAS,CAACgC,cAAa,IAAKhR,EAAE0O,MAAMqD,SAAS/R,EAAE0O,MAAMqD,QAAQjS,EAAEE,EAAE6Q,mBAAmB7Q,EAAEgS,kBAAkB,SAASlS,GAAG,IAAIC,EAAED,EAAEsR,OAAOpQ,MAAMW,OAAO7B,EAAEsR,OAAOT,kBAAkB,EAAE5Q,IAAIC,EAAEiS,oBAAoB,SAASnS,EAAEC,GAAG,IAAIE,EAAED,EAAEuO,MAAMU,gBAAgB/O,EAAEF,EAAEuO,MAAMJ,cAAcR,MAAM,SAAS5N,GAAG,OAAOA,GAAGD,KAAK,GAAGI,EAAE,CAAC,IAAIO,EAAET,EAAEuO,MAAMW,gBAAgBtM,QAAQ,IAAI,IAAIA,QAAQ,IAAI,IAAIA,QAAQ,IAAI,IAAIA,QAAQ,IAAI,IAAIzC,EAAEM,EAAEkB,OAAO,EAAElB,EAAEmC,QAAQ3C,EAAEwM,SAASvM,EAAEuM,UAAUvM,EAAEuM,SAASzK,EAAEhC,EAAEoP,aAAajP,EAAEyC,QAAQ,MAAM,IAAI1C,GAAGF,EAAEgP,SAAS,CAACgC,cAAa,EAAG/B,gBAAgB/O,EAAEoR,iBAAgB,EAAGpC,gBAAgBlN,IAAI,WAAWhC,EAAEuQ,cAAcvQ,EAAE0O,MAAM2C,UAAUrR,EAAE0O,MAAM2C,SAASrP,EAAEY,QAAQ,WAAW,IAAI5C,EAAE6Q,iBAAiB9Q,EAAEiC,QAAQhC,EAAEkS,iBAAiB,SAASpS,GAAGE,EAAEwQ,gBAAgBxQ,EAAEwQ,eAAexP,QAAQhB,EAAE0O,MAAM0B,QAAQpQ,EAAEuO,MAAMU,kBAAkBjP,EAAE0O,MAAMS,oBAAoBnP,EAAEgP,SAAS,CAACE,gBAAgBlP,EAAE0O,MAAM0B,OAAOpQ,EAAEuO,MAAMU,gBAAgBxC,WAAW,WAAWzM,EAAE0O,MAAMyD,iBAAiBlN,WAAWjF,EAAEuQ,YAAY,MAAMvQ,EAAEgP,SAAS,CAACoD,YAAY,KAAKpS,EAAE0O,MAAM2D,SAASrS,EAAE0O,MAAM2D,QAAQvS,EAAEE,EAAE6Q,kBAAkB7Q,EAAE0O,MAAMyD,iBAAiBlN,WAAWjF,EAAEuQ,YAAY,IAAIvQ,EAAEsS,gBAAgB,SAASxS,GAAGA,EAAEsR,OAAOpQ,OAAOhB,EAAEgP,SAAS,CAACoD,YAAYpS,EAAE0O,MAAM0D,cAAcpS,EAAE0O,MAAM6D,QAAQvS,EAAE0O,MAAM6D,OAAOzS,EAAEE,EAAE6Q,mBAAmB7Q,EAAEwS,gBAAgB,SAAS1S,GAAG,GAAGE,EAAE0O,MAAM+D,gBAAgB,CAAC,IAAI1S,EAAEiD,OAAO0P,eAAerQ,WAAWO,QAAQ,WAAW,IAAI9C,EAAE6S,cAAcC,QAAQ,aAAa7S,GAAGD,EAAEiR,mBAAmB/Q,EAAE6S,yBAAyB,SAAS/S,GAAG,IAAIC,EAAEC,EAAEuO,MAAM2C,sBAAsBpR,EAAE,OAAOC,EAAE,GAAGA,GAAGC,EAAEuO,MAAMJ,cAAcxM,OAAO3B,EAAEuO,MAAMH,mBAAmBzM,OAAO5B,EAAED,EAAEE,EAAE0O,MAAMmB,cAAc9P,EAAEC,EAAE8S,6BAA6BnR,OAAO,EAAE5B,GAAGC,EAAE+S,cAAc,WAAW,IAAIjT,EAAEE,EAAEsO,qBAAqBtO,EAAEuO,MAAMyE,cAAchT,EAAEuO,MAAMJ,cAAc,GAAGpO,EAAEC,EAAEuO,MAAMJ,cAAcd,WAAW,SAAStN,GAAG,OAAOA,GAAGD,KAAKE,EAAEuO,MAAMH,mBAAmBzM,OAAO3B,EAAEqP,SAASrP,EAAE4Q,WAAW7Q,IAAG,GAAIC,EAAEgP,SAAS,CAACgE,YAAY,GAAG9B,sBAAsBnR,KAAKC,EAAEiT,cAAc,SAASnT,GAAG,IAAIC,EAAEC,EAAE0O,MAAMxL,KAAKjD,EAAEH,EAAEsR,OAAO8B,UAAU,GAAGjT,EAAEiN,SAAS,kBAAkBpN,EAAEqT,QAAQpT,EAAEqT,QAAQpT,EAAEuO,MAAMyC,aAAa,OAAOhR,EAAE8Q,wBAAwBhR,GAAG,GAAGG,EAAEiN,SAAS,kBAAkBpN,EAAEqT,QAAQpT,EAAEqT,OAAOtT,EAAEqT,QAAQpT,EAAEsT,KAAK,OAAOvT,EAAEsR,OAAOkC,OAAO,GAAGtT,EAAEuO,MAAMyC,eAAehR,EAAE0O,MAAMuC,YAAYhR,EAAEiN,SAAS,eAAepN,EAAEqT,QAAQpT,EAAEwT,IAAIzT,EAAEqT,QAAQpT,EAAEyT,MAAM1T,EAAEqT,QAAQpT,EAAEqT,OAAOtT,EAAEqT,QAAQpT,EAAEsT,KAAK,KAAKvT,EAAEsR,OAAOpQ,OAAO,CAAClB,EAAEiR,eAAejR,EAAEiR,iBAAiBjR,EAAE0R,aAAY,EAAG,IAAItR,EAAE,SAASJ,GAAGE,EAAEgP,SAAS,CAACkC,sBAAsBlR,EAAE6S,yBAAyB/S,KAAK,WAAWE,EAAEqP,SAASrP,EAAE4Q,WAAW5Q,EAAEuO,MAAM2C,wBAAuB,OAAQ,OAAOpR,EAAEqT,OAAO,KAAKpT,EAAEyT,KAAKtT,EAAE,GAAG,MAAM,KAAKH,EAAEwT,GAAGrT,GAAG,GAAG,MAAM,KAAKH,EAAEqT,MAAMpT,EAAE0O,MAAMmB,aAAa7P,EAAEiS,oBAAoBjS,EAAE8S,6BAA6B9S,EAAEuO,MAAM2C,wBAAwBlR,EAAE8S,6BAA6B,GAAGhT,GAAGE,EAAEiS,oBAAoB,GAAG5F,OAAO5L,EAAET,EAAEuO,MAAMH,oBAAoB3N,EAAET,EAAEuO,MAAMJ,gBAAgBnO,EAAEuO,MAAM2C,uBAAuBpR,GAAG,MAAM,KAAKC,EAAEsT,IAAI,KAAKtT,EAAE0T,IAAIzT,EAAEgP,SAAS,CAACgC,cAAa,GAAIhR,EAAEuQ,aAAa,MAAM,SAASzQ,EAAEqT,OAAOpT,EAAEmG,GAAGpG,EAAEqT,OAAOpT,EAAEwH,GAAGzH,EAAEqT,QAAQpT,EAAE2T,QAAQ1T,EAAEgP,SAAS,CAACgE,YAAYhT,EAAEuO,MAAMyE,YAAYhI,OAAO2I,aAAa7T,EAAEqT,QAAQnT,EAAEuO,MAAMqF,gCAAgC5T,EAAE6T,mBAAmB,SAAS/T,GAAG,IAAIC,EAAEC,EAAE0O,MAAMzO,EAAEF,EAAEmD,KAAKhD,EAAEH,EAAE+T,gBAAgBrT,EAAEV,EAAEgU,UAAUjU,EAAEqT,QAAQlT,EAAEmT,OAAOlT,GAAGA,EAAEJ,GAAGW,GAAGA,EAAEX,IAAIE,EAAEgU,mBAAmB,SAASlU,GAAGE,EAAEsP,cAActP,EAAEiU,qBAAqBC,SAASpU,EAAEsR,SAASpR,EAAEuO,MAAMyC,cAAchR,EAAEgP,SAAS,CAACgC,cAAa,KAAMhR,EAAEmU,mBAAmB,SAASrU,GAAG,IAAIC,EAAED,EAAEsU,cAAcpT,MAAMf,EAAED,EAAEuO,MAAMrO,EAAED,EAAEmO,mBAAmB3N,EAAER,EAAEgP,gBAAgB9O,EAAE,EAAE,GAAG,KAAKJ,GAAGU,EAAE,CAAC,IAAIuB,EAAEhC,EAAEuO,MAAMJ,cAAchO,EAAED,EAAEmM,OAAOrK,GAAGqL,WAAW,SAASvN,GAAG,OAAOA,GAAGW,KAAKwE,YAAY,WAAW,OAAOjF,EAAEqP,SAASrP,EAAE4Q,WAAWzQ,MAAM,KAAKH,EAAEgP,SAAS,CAACqF,YAAYtU,EAAEmR,sBAAsB/Q,KAAKH,EAAEsU,uBAAuB,SAASxU,GAAG,OAAOA,EAAE+N,WAAW/N,EAAEiK,MAAM/J,EAAE8S,2BAA2B,WAAW,IAAIhT,EAAEE,EAAEuO,MAAMxO,EAAED,EAAEsO,mBAAmBnO,EAAEH,EAAEqO,cAAcjO,EAAEJ,EAAEuU,YAAYlU,EAAEH,EAAE0O,MAAMmB,aAAa7N,EAAEjC,EAAEsM,OAAOpM,GAAGM,EAAEL,EAAE0O,OAAOJ,cAAc,GAAGrO,GAAGI,EAAE,CAAC,GAAG,QAAQsC,KAAKtC,GAAG,OAAOyB,EAAE6K,QAAQ,SAAS/M,GAAG,IAAIC,EAAED,EAAE2M,SAAS,MAAM,CAAC,GAAGJ,OAAOtM,IAAIwN,MAAM,SAASzN,GAAG,OAAOA,EAAE0O,cAActB,SAAS3M,SAAS,IAAIiB,EAAEQ,EAAE6K,QAAQ,SAAS/M,GAAG,IAAIC,EAAED,EAAEyM,KAAK,MAAM,CAAC,GAAGF,OAAOtM,IAAIwN,MAAM,SAASzN,GAAG,OAAOA,EAAE0O,cAActB,SAAS3M,SAASH,EAAE4B,EAAE6K,QAAQ,SAAS/M,GAAG,IAAIC,EAAED,EAAEiK,KAAK/J,EAAEF,EAAE+N,UAAiB,OAAP/N,EAAEyM,KAAW,CAAC,GAAGF,OAAOtM,GAAG,GAAGsM,OAAOrM,GAAG,KAAKuN,MAAM,SAASzN,GAAG,OAAOA,EAAE0O,cAActB,SAAS3M,SAAS,OAAOP,EAAE8P,cAAcrP,EAAE,IAAI8T,IAAI,GAAGlI,OAAO7K,EAAEpB,KAAK,OAAO4B,GAAGhC,EAAEwU,uBAAuB,WAAW,IAAI1U,EAAEC,EAAEC,EAAEuO,MAAMrO,EAAEH,EAAEqO,mBAAmB3N,EAAEV,EAAEmR,sBAAsB/Q,EAAEJ,EAAEiR,aAAahP,EAAEjC,EAAEsU,YAAY9T,EAAEP,EAAE0O,MAAMlN,EAAEjB,EAAEkU,gBAAgBrU,EAAEG,EAAE6P,OAAO9N,EAAEtC,EAAE0O,MAAMlO,EAAE8B,EAAEuN,aAAatO,EAAEe,EAAEoS,eAAenS,EAAED,EAAEqS,kBAAkBrU,EAAEgC,EAAEsS,YAAYnS,EAAEH,EAAEuS,YAAYtR,EAAEjB,EAAEwS,kBAAkBtR,EAAElB,EAAEyS,mBAAmBpR,EAAE3D,EAAE8S,6BAA6B5O,KAAK,SAASpE,EAAEC,GAAG,IAAIE,EAAEQ,IAAIV,EAAEG,EAAEiE,IAAI,CAACsN,SAAQ,EAAGuD,UAAU,OAAOlV,EAAEyM,MAAM,OAAOzM,EAAEyM,KAAK0I,OAAO,OAAOnV,EAAEyM,KAAK2I,UAAUjV,IAAIE,EAAE,QAAQkM,OAAOvM,EAAEyM,MAAM,OAAO/J,EAAEtC,EAAEiV,cAAc,KAAKzU,OAAO0U,OAAO,CAACC,IAAI,SAASvV,GAAG,OAAOE,EAAE,WAAWqM,OAAOtM,IAAID,GAAG+L,IAAI,WAAWQ,OAAOtM,GAAG,gBAAgB,WAAWsM,OAAOtM,GAAGmT,UAAUhT,EAAE,iBAAiB,IAAIoV,SAAS9T,EAAE,KAAK,IAAI,oBAAoB1B,EAAEyM,KAAKwF,QAAQ,SAAShS,GAAG,OAAOC,EAAEiS,oBAAoBnS,EAAEC,IAAIwV,KAAK,UAAUtV,EAAE,CAAC,iBAAgB,GAAI,IAAIuC,EAAEtC,EAAEiV,cAAc,MAAM,CAACjC,UAAU/S,IAAIqC,EAAEtC,EAAEiV,cAAc,OAAO,CAACjC,UAAU,gBAAgBlT,EAAEsU,uBAAuBxU,IAAI0C,EAAEtC,EAAEiV,cAAc,OAAO,CAACjC,UAAU,aAAapT,EAAE4M,OAAO1M,EAAEoP,aAAatP,EAAE2M,SAAS3M,GAAGM,EAAEN,EAAE2M,cAAc7I,EAAEpB,EAAEtC,EAAEiV,cAAc,KAAK,CAACtJ,IAAI,SAASqH,UAAU,YAAYhT,EAAEyB,OAAO,KAAKnB,GAAGA,IAAIwB,EAAE4M,SAASjL,EAAEN,OAAOnD,EAAEyB,OAAO,EAAEiC,GAAG,IAAIC,EAAEM,KAAKlE,EAAEH,EAAE,GAAGE,EAAE0O,MAAM8G,eAAc,GAAIvV,EAAEH,EAAE,gBAAe,GAAIG,EAAEH,EAAE,QAAQK,GAAGL,IAAI,OAAO0C,EAAEtC,EAAEiV,cAAc,KAAK,CAACE,IAAI,SAASvV,GAAG,OAAOU,GAAGV,GAAGA,EAAE2Q,QAAQzQ,EAAEsP,YAAYxP,GAAGoT,UAAUrP,EAAE4R,MAAMzV,EAAE0O,MAAMgH,cAAcH,KAAK,UAAUD,SAAS,KAAK9U,GAAGgC,EAAEtC,EAAEiV,cAAc,KAAK,CAACjC,UAAU/O,IAAIlE,EAAE,CAAC0V,QAAO,GAAIrV,EAAEA,MAAMiC,GAAGC,EAAEtC,EAAEiV,cAAc,OAAO,CAACjC,UAAU/O,IAAIlE,EAAE,CAAC,gBAAe,GAAI,GAAGoM,OAAO/L,EAAE,UAAUA,IAAIiV,KAAK,MAAM,aAAa,oBAAoB,gBAAM/S,EAAEtC,EAAEiV,cAAc,QAAQ,CAACjC,UAAU/O,IAAIlE,EAAE,CAAC,cAAa,GAAI,GAAGoM,OAAO/L,EAAE,QAAQA,IAAImV,MAAMhT,EAAEmT,KAAK,SAASxD,YAAY7O,EAAEsS,WAAU,EAAGC,aAAatS,EAAE,KAAK,MAAMxC,MAAMgB,EAAEqP,SAASrR,EAAEmU,sBAAsBxQ,EAAEhC,OAAO,EAAEgC,EAAEnB,EAAEtC,EAAEiV,cAAc,KAAK,CAACjC,UAAU,sBAAsB1Q,EAAEtC,EAAEiV,cAAc,OAAO,KAAK5T,MAAM,IAAIC,EAAEpB,EAAE,IAAIgG,EAAEtG,EAAE6O,gBAAgB7O,EAAEiW,kBAAkBjW,EAAEwM,QAAQxM,EAAEqO,cAAcrO,EAAEsO,mBAAmBtO,EAAEoO,iBAAiBpO,EAAEkW,cAAclW,EAAEmW,MAAMnW,EAAE6M,SAAS7M,EAAEoW,UAAUpW,EAAEqW,aAAarW,EAAEsQ,OAAOtQ,EAAEsW,YAAYtW,EAAEuW,mBAAmB9T,EAAEnC,EAAE+N,cAAc7N,EAAEF,EAAEgO,mBAAmB3L,EAAErC,EAAEiO,gBAAgB7K,EAAE1D,EAAEkB,MAAMlB,EAAEkB,MAAM4B,QAAQ,MAAM,IAAI,GAAGpB,EAAE1B,EAAEwW,2BAA2B,EAAE9S,EAAE7B,OAAO,EAAE3B,EAAEyO,qBAAqBjL,EAAEoO,UAAU,EAAE,GAAG9R,EAAE2R,QAAQlP,EAAEE,IAAI,EAAE3C,EAAE2R,SAASlP,EAAEoL,MAAM,SAAS5N,GAAG,OAAOA,EAAEwM,MAAMzM,EAAE2R,YAAY,EAAE,IAAI7N,EAAEE,EAAEN,EAAE7B,OAAO,GAAGH,IAAIwC,IAAIR,EAAEhC,EAAEiL,UAAUjL,EAAEiL,SAAS,GAAG7I,EAAE,KAAKJ,GAAG,IAAIhC,EAAE,GAAGxB,EAAEoP,cAActP,EAAEqP,mBAAmB,GAAGrL,GAAGN,EAAEhC,EAAEuI,KAAKvI,OAAE,GAAQ,IAAI8B,EAAEf,EAAE8K,WAAW,SAASvN,GAAG,OAAOA,GAAG0B,KAAK,OAAOxB,EAAEuO,MAAM,CAACyC,aAAalR,EAAEkR,aAAa9B,gBAAgBtL,EAAEuK,cAAc5L,EAAE6L,mBAAmB9N,EAAE+N,gBAAgB5L,EAAEwM,gBAAgBzN,EAAE0P,sBAAsB5N,EAAE0P,YAAY,GAAG1B,iBAAgB,EAAGsC,4BAA4BrQ,IAAIvD,EAAE+S,cAAc,KAAKsB,YAAY,IAAIrU,EAAE,IAAIA,EAAEI,EAAI,OAAO,SAASN,EAAEC,GAAG,GAAG,mBAAmBA,GAAG,OAAOA,EAAE,MAAM,IAAIqE,UAAU,sDAAsDtE,EAAEuB,UAAUX,OAAOQ,OAAOnB,GAAGA,EAAEsB,UAAU,CAAC4I,YAAY,CAACjJ,MAAMlB,EAAE4L,UAAS,EAAGD,cAAa,KAAM1L,GAAGwC,EAAEzC,EAAEC,GAA/N,CAAmOA,EAAED,GAAGE,EAAED,GAAGK,EAAE,CAAC,CAACyL,IAAI,oBAAoB7K,MAAM,WAAWuO,SAASgH,kBAAkBxT,KAAK2L,MAAM8H,oBAAoBjH,SAASgH,iBAAiB,YAAYxT,KAAKiR,sBAAsB,CAACnI,IAAI,uBAAuB7K,MAAM,WAAWuO,SAASkH,qBAAqB1T,KAAK2L,MAAM8H,oBAAoBjH,SAASkH,oBAAoB,YAAY1T,KAAKiR,sBAAsB,CAACnI,IAAI,qBAAqB7K,MAAM,SAASlB,EAAEC,EAAEC,GAAGF,EAAE2R,UAAU1O,KAAK2L,MAAM+C,QAAQ1O,KAAK+L,cAAc/L,KAAK2L,MAAM+C,SAAS3R,EAAEkB,QAAQ+B,KAAK2L,MAAM1N,OAAO+B,KAAK2T,sBAAsB3T,KAAK2L,MAAM1N,SAAS,CAAC6K,IAAI,wBAAwB7K,MAAM,SAASlB,GAAG,GAAG,OAAOA,EAAE,OAAOiD,KAAKiM,SAAS,CAACC,gBAAgB,EAAEC,gBAAgB,KAAK,IAAInP,EAAEgD,KAAKwL,MAAMvO,EAAED,EAAEoO,cAAclO,EAAEF,EAAEkP,gBAAgB/O,EAAEH,EAAEsO,gBAAgB5N,EAAEsC,KAAK2L,MAAMvO,EAAEM,EAAEgR,QAAQzP,EAAEvB,EAAE2P,OAAO,GAAG,KAAKtQ,EAAE,OAAOiD,KAAKiM,SAAS,CAACC,gBAAgBhP,EAAEiP,gBAAgB,KAAK,IAAI3O,EAAEiB,EAAEpB,EAAEN,EAAE8C,QAAQ,MAAM,IAAI,GAAG3C,GAAG+D,IAAIlE,EAAEkC,EAAE/B,EAAEwM,UAAUjL,EAAEuB,KAAKqM,aAAahP,EAAEH,GAAG8C,KAAKiM,SAAS,CAACE,gBAAgB1N,QAAQ,CAAC,IAAIc,GAAG/B,EAAEwC,KAAK2L,MAAMiD,oBAAoB1R,EAAE8C,KAAK0L,qBAAqBrO,EAAEwR,UAAU,EAAE,GAAGzR,EAAEH,EAAEE,IAAID,IAAI+D,IAAI5D,EAAE4B,EAAEzB,EAAEkM,UAAUlM,EAAEkM,SAAS,GAAGjL,EAAEuB,KAAKqM,cAAcrM,KAAK2L,MAAMS,mBAAmB,GAAG7M,GAAGlC,EAAEG,QAAG,GAAQwC,KAAKiM,SAAS,CAACC,gBAAgB1O,EAAE2O,gBAAgB1N,OAAO,CAACqK,IAAI,SAAS7K,MAAM,WAAW,IAAIlB,EAAEC,EAAEC,EAAEE,EAAEO,EAAEN,EAAE4C,KAAKf,EAAEe,KAAKwL,MAAMhO,EAAEyB,EAAEmM,cAAc3M,EAAEQ,EAAEiN,gBAAgB7O,EAAE4B,EAAEgP,aAAa1O,EAAEN,EAAEkN,gBAAgB1O,EAAEwB,EAAEqM,gBAAgB9M,EAAEwB,KAAK2L,MAAMnM,EAAEhB,EAAEkT,gBAAgBnU,EAAEiB,EAAEoV,mBAAmBlU,EAAElB,EAAEqV,QAAQrT,EAAEhC,EAAEsV,oBAAoBrT,EAAEjC,EAAEuV,aAAa,GAAG,kBAAkBrU,EAAEvC,EAAEuC,MAAM,CAAC,IAAIkB,EAAElB,EAAEH,EAAEM,QAAQ,MAAM,IAAIpB,EAAEjB,EAAEC,GAAG,kBAAkBmD,GAAE,KAAMzD,EAAEyD,KAAKlD,EAAE8C,IAAIrD,GAAE,EAAGO,EAAEkD,GAAG,IAAIC,EAAEO,KAAKlE,EAAEH,EAAE,GAAGiD,KAAK2L,MAAMqI,gBAAe,GAAI9W,EAAEH,EAAE,mBAAkB,GAAIA,IAAI+D,EAAEM,IAAI,CAAC6S,OAAM,EAAGC,GAAG7W,IAAI0D,EAAEK,KAAKlE,EAAEF,EAAE,GAAGgD,KAAK2L,MAAMwI,YAAW,GAAIjX,EAAEF,EAAE,gBAAe,GAAIE,EAAEF,EAAE,kBAAkBG,GAAGD,EAAEF,EAAE,OAAOK,GAAGL,IAAIiE,EAAEG,IAAI,CAAC,iBAAgB,EAAGgT,KAAK/W,IAAIkD,EAAEa,KAAKlE,EAAED,EAAE,GAAG+C,KAAK2L,MAAM0I,aAAY,GAAInX,EAAED,EAAE,iBAAgB,GAAIC,EAAED,EAAE,kBAAkBE,GAAGD,EAAED,EAAE,OAAOI,GAAGJ,IAAI+D,EAAE,QAAQsI,OAAO7K,GAAGA,EAAE+K,MAAM,OAAO/J,EAAEtC,EAAEiV,cAAc,MAAM,CAACjC,UAAUtP,EAAE6R,MAAM1S,KAAK2L,MAAM+G,OAAO1S,KAAK2L,MAAM2I,eAAetD,UAAUhR,KAAKkQ,eAAezP,GAAGhB,EAAEtC,EAAEiV,cAAc,MAAM,CAACjC,UAAU,iBAAiB1P,GAAG/C,GAAG+B,EAAEtC,EAAEiV,cAAc,MAAM,CAACjC,UAAU,0BAA0BzS,GAAG+B,EAAEtC,EAAEiV,cAAc,QAAQzU,OAAO0U,OAAO,CAAClC,UAAUpP,EAAE2R,MAAM1S,KAAK2L,MAAM4I,WAAWjG,SAAStO,KAAKoO,YAAYY,QAAQhP,KAAK+O,iBAAiByF,cAAcxU,KAAKiP,kBAAkBK,QAAQtP,KAAKmP,iBAAiBK,OAAOxP,KAAKuP,gBAAgBkF,OAAOzU,KAAKyP,gBAAgBxR,MAAMsB,EAAE+S,IAAI,SAASvV,GAAG,OAAOK,EAAEqQ,eAAe1Q,GAAGiU,UAAUhR,KAAK8Q,mBAAmBzB,YAAYrP,KAAK2L,MAAM0D,YAAYnB,SAASlO,KAAK2L,MAAMuC,SAAS2E,KAAK,OAAO7S,KAAK2L,MAAM+I,aAAajV,EAAEtC,EAAEiV,cAAc,MAAM,CAACjC,UAAU5P,EAAEmS,MAAM1S,KAAK2L,MAAMgJ,YAAYrC,IAAI,SAASvV,GAAG,OAAOK,EAAE8T,qBAAqBnU,IAAIQ,EAAEkC,EAAEtC,EAAEiV,cAAc,MAAM,CAACjC,UAAUlP,GAAG1D,GAAGkC,EAAEtC,EAAEiV,cAAc,MAAM,CAACpD,QAAQxP,OAAE,EAAOQ,KAAK+N,wBAAwBoC,UAAUlP,EAAE2T,MAAMnW,EAAE,GAAG6K,OAAO7K,EAAEuI,KAAK,QAAQsC,OAAO7K,EAAEiL,UAAU,GAAG6I,SAAS/S,EAAE,KAAK,IAAIgT,KAAK,SAAS,gBAAgB,UAAU,kBAAkBnV,QAAG,GAAQoC,EAAEtC,EAAEiV,cAAc,MAAM,CAACjC,UAAUnP,IAAIxB,GAAGC,EAAEtC,EAAEiV,cAAc,MAAM,CAACjC,UAAUrP,MAAMzD,GAAG2C,KAAKyR,gCAAgChT,EAAExB,EAAEqB,UAAUjB,GAAaL,EAAvve,CAA0veyC,EAAEtC,EAAE0X,WAAWvR,EAAEwR,aAAa,CAACpG,QAAQ,GAAGzQ,MAAM,GAAGmN,cAAc,GAAGC,mBAAmB,GAAGF,iBAAiB,GAAGkE,YAAY,mBAAmB0C,kBAAkB,SAASJ,eAAe,qBAAqBoD,eAAe,cAAc7G,UAAS,EAAGoG,eAAe,GAAGC,WAAW,GAAGI,YAAY,GAAGhC,cAAc,GAAGb,YAAY,GAAGkC,eAAe,GAAGG,WAAW,GAAGE,YAAY,GAAG5B,cAAc,GAAGZ,YAAY,GAAG3E,YAAW,EAAGtB,iBAAgB,EAAGoH,mBAAkB,EAAG5G,oBAAmB,EAAGsF,iBAAgB,EAAGzE,mBAAkB,EAAGuB,qBAAoB,EAAG1B,cAAa,EAAG8E,mBAAkB,EAAG2B,4BAA2B,EAAG3E,qBAAoB,EAAGrF,QAAQ,GAAGmL,WAAW,GAAGtB,aAAa,GAAGF,MAAM,KAAKtJ,SAAS,KAAKuJ,UAAU,KAAKF,cAAc,GAAGI,YAAY,qBAAqBC,mBAAkB,EAAGjG,OAAO,IAAIqC,iBAAgB,EAAGkE,mBAAmB,GAAG5B,oBAAmB,EAAG5C,iBAAgB,EAAGpC,uBAAsB,EAAGyG,oBAAmB,EAAGxF,cAAa,EAAG4F,SAAQ,EAAGC,oBAAoB,GAAGC,aAAa,QAAQhD,gBAAgB,KAAK5Q,KAAK,CAACqQ,GAAG,GAAGC,KAAK,GAAGuE,MAAM,GAAGC,KAAK,GAAG5E,MAAM,GAAGC,IAAI,GAAG4E,KAAK,GAAG/R,EAAE,GAAGqB,EAAE,GAAGmM,MAAM,GAAGD,IAAI,IAAI1T,EAAEqB,QAAQiF,M,2CCLr3pD,OAOC,WACA,aAEA,IAAI6R,EAAS,GAAG5W,eAEhB,SAAS6W,IAGR,IAFA,IAAIC,EAAU,GAELjY,EAAI,EAAGA,EAAIuB,UAAUC,OAAQxB,IAAK,CAC1C,IAAIkY,EAAM3W,UAAUvB,GACpB,GAAKkY,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3BF,EAAQxW,KAAKyW,QACP,GAAIxW,MAAMC,QAAQuW,IACxB,GAAIA,EAAI1W,OAAQ,CACf,IAAI4W,EAAQJ,EAAWpW,MAAM,KAAMsW,GAC/BE,GACHH,EAAQxW,KAAK2W,SAGT,GAAgB,WAAZD,EACV,GAAID,EAAIhW,WAAa3B,OAAOW,UAAUgB,SACrC,IAAK,IAAIwJ,KAAOwM,EACXH,EAAO7X,KAAKgY,EAAKxM,IAAQwM,EAAIxM,IAChCuM,EAAQxW,KAAKiK,QAIfuM,EAAQxW,KAAKyW,EAAIhW,aAKpB,OAAO+V,EAAQnW,KAAK,KAGgBrC,EAAOC,SAC3CsY,EAAW/W,QAAU+W,EACrBvY,EAAOC,QAAUsY,QAGX,kBACL,OAAOA,GADF,QAAe,OAAf,aA5CP,I,qICWD,SAASK,EAAalN,EAAUmN,GAC9B,IAAMC,EAAgBC,WAAeC,QAAQtN,GAAUuB,OAAOgM,SAC9D,OAAOH,EAAc7J,QAAO,SAACiK,EAAQC,EAAOC,GAS1C,OARAF,EAAOlX,KAAKmX,GAERC,EAAQN,EAAc/W,OAAS,GACjCmX,EAAOlX,KAAmB+W,eAAmBF,EAAW,CACtD5M,IAAK,aAAF,OAAemN,MAIfF,IACN,IAGL,SAASG,EAAT,GAGG,IAOGC,EATJ9L,EAEC,EAFDA,OACA+L,EACC,EADDA,KAEMjW,EAAOxC,OAAOwC,KAAKiW,GAEzB,OAAoB,IAAhBjW,EAAKvB,OACAyL,EAIFlK,EAAK2L,QAAO,SAACuK,EAAKC,GAQvB,OANED,EAAIC,GADgB,kBAAXjM,EAC+B,MAAtBA,EAAOiM,GAAsBjM,EAAOiM,GAAcjM,EAAO8L,GAEzD9L,EAGpB8L,EAAWG,EACJD,IACN,IAGL,IAuDME,EAAYC,YAAmB,MAAO,GAAI,CAC9CxP,KAAM,SADUwP,EA9CG,SAAC,GAGhB,IAFJC,EAEI,EAFJA,WACAC,EACI,EADJA,MAEIC,EAASC,YAAS,CACpBC,QAAS,QACRC,YAAkB,CACnBJ,SACCD,EAAWM,WAAW,SAAAC,GAAS,MAAK,CACrCC,cAAeD,OAGjB,GAAIP,EAAWS,QAAS,CACtB,IAAMC,EAAcC,YAAmBV,GACjCN,EAAOzY,OAAOwC,KAAKuW,EAAMW,YAAYhN,QAAQyB,QAAO,SAACuK,EAAKC,GAK9D,OAJsC,MAAlCG,EAAWS,QAAQZ,IAA2D,MAApCG,EAAWM,UAAUT,KACjED,EAAIC,IAAc,GAGbD,IACN,IACGiB,EAAkBpB,EAAwB,CAC9C7L,OAAQoM,EAAWM,UACnBX,SAEImB,EAAgBrB,EAAwB,CAC5C7L,OAAQoM,EAAWS,QACnBd,SAYFO,EAASa,YAAUb,EAAQG,YAAkB,CAC3CJ,SACCa,GAXwB,SAACP,EAAWV,GACrC,MAAO,CACL,6CACEmB,OAAQ,GADV,iBAzCqBV,EA2CYT,EAAagB,EAAgBhB,GAAcG,EAAWM,UA1CtF,CACLW,IAAK,OACL,cAAe,QACfC,OAAQ,MACR,iBAAkB,UAClBZ,KAqC0Ga,YAAST,EAAaH,KA3CvG,IAAAD,MAqD3B,OAAOJ,KAKHkB,EAAqBjC,cAAiB,SAAekC,EAASxF,GAClE,IAAMyF,EAAaC,YAAc,CAC/BrM,MAAOmM,EACP9Q,KAAM,aAEF2E,EAAQsM,YAAaF,GAE3B,EAMIpM,EALFuM,iBADF,MACc,MADd,IAMIvM,EAJFoL,iBAFF,MAEc,SAFd,IAMIpL,EAHFuL,eAHF,MAGY,EAHZ,EAIEiB,EAEExM,EAFFwM,QACA5P,EACEoD,EADFpD,SAEI6P,EAAQC,YAA8B1M,EAAO,CAAC,YAAa,YAAa,UAAW,UAAW,aAE9F8K,EAAa,CACjBM,YACAG,WAEF,OAAoBoB,cAAK/B,EAAWK,YAAS,CAC3C2B,GAAIL,EACJzB,WAAYA,EACZnE,IAAKA,GACJ8F,EAAO,CACR7P,SAAU4P,EAAU1C,EAAalN,EAAU4P,GAAW5P,QA6C3CsP,O,iICxKf,cAWE,WAAY,G,IACVW,EAAO,UACPC,EAAO,UACPC,EAAM,SACNC,EAAS,YAJX,EAWE,YAAMH,EAASC,IAAQ,K,OAyBjB,EAAAG,YAAc,SACpBC,QAAA,IAAAA,MAKI,IAEJ,EAAKC,kBACL,IAAMC,EAAa,EAAKC,wBAExB,OAAO,EAAKC,OAAOJ,GAChBK,MAAK,SAACC,GAEL,OADA,EAAKC,oBAAoBD,EAAUJ,GAC5BI,KAERE,OAAM,SAACC,GACE,IAAAC,EAAY,EAAKC,aAAV,QAEf,GADA,EAAKC,gBAAgBH,EAAOP,GACxBQ,EAEF,OADAA,EAAQD,GACD,CACLI,UAAMC,EACNC,OAAQN,GAGV,MAAMA,MAlDZ,EAAKO,mBAAmBrB,EAAQsB,SAAU,IAAaC,UACvD,EAAKrB,OAASA,EACd,EAAKC,UAAYA,EACjB,EAAKqB,qBAAuB,E,EAiIhC,OAtJU,iBAwBD,YAAAC,QAAP,SAAevB,GAGb,OAFA1Y,KAAKka,WAAY,EACjBla,KAAK6Z,mBAAmB7Z,KAAKwZ,aAAaM,SAAU,IAAaC,UAC1D,CACL/Z,KAAK4Y,Y,2BACAF,GAAM,CAAEyB,OAAQna,KAAKoa,gBAAgBD,WAIvC,YAAAE,aAAP,WAEE,OADAra,KAAKka,WAAY,EACVla,KAAKsa,QAAQlc,KAAK4B,OAGpB,YAAAua,QAAP,aAmCQ,YAAAtB,OAAR,SACET,GAEA,OAAOxY,KAAKoa,gBAAgBD,OAAOlB,OACjC,YACEjZ,KAAKwZ,aACLhB,KAKE,YAAAM,gBAAR,WACO9Y,KAAK0Y,OAAO8B,SAAYxa,KAAKwZ,aAAaiB,eAC7Cza,KAAK0a,aAAa,CAChBF,SAAS,EACTlB,WAAOK,EACPD,UAAMC,EACNgB,QAAQ,KAKN,YAAAvB,oBAAR,SACED,EACAJ,GAEM,MAAiC/Y,KAAKwZ,aAApCoB,EAAW,cAAEH,EAAa,gBAE1Bf,EAAiBP,EAAb,KAAES,EAAWT,EAAL,OACdG,EACJM,GAAUA,EAAOhb,OAAS,EACtB,IAAI,IAAY,CAAEic,cAAejB,SACjCD,EAKF3Z,KAAK8a,qBAAqB/B,KAAgB0B,GAC5Cza,KAAK0a,aAAa,CAChBC,QAAQ,EACRH,SAAS,EACTd,KAAI,EACJJ,MAAK,IAPPsB,GAAcA,EAAYlB,IAatB,YAAAD,gBAAR,SAAwBH,EAAoBP,GACtC/Y,KAAK8a,qBAAqB/B,IAC5B/Y,KAAK0a,aAAa,CAChBF,SAAS,EACTlB,MAAK,EACLI,UAAMC,EACNgB,QAAQ,KAKN,YAAA3B,sBAAR,WACE,QAAShZ,KAAKga,sBAGR,YAAAc,qBAAR,SAA6B/B,GAC3B,OAAO/Y,KAAKga,uBAAyBjB,GAG/B,YAAA2B,aAAR,SAAqBhC,GACnB,GACE1Y,KAAKka,aACHla,KAAK+a,iBAAmB,YAAM/a,KAAK+a,eAAgBrC,IAIrD,OAFA1Y,KAAK2Y,UAAUD,GACf1Y,KAAK+a,eAAiBrC,EACfA,GAGb,EA3JA,CAKUsC,EAAA,G,SCZJ,SAAUC,EAMdnB,EACAtB,GAEA,IAAMC,EAAU,qBAAW,eACrB,EAAsB,mBAAS,CAAEkC,QAAQ,EAAOH,SAAS,IAAxD9B,EAAM,KAAEC,EAAS,KAClBuC,EAAiB1C,EAAS,2BAAMA,GAAO,CAAEsB,SAAQ,IAAK,CAAEA,SAAQ,GAEhEqB,EAAkB,mBAaxB,IAAMC,GAXCD,EAAgBE,UACnBF,EAAgBE,QAAU,IAAI,EAA0C,CACtE7C,QAAS0C,EACTzC,QAAO,EACPC,OAAM,EACNC,UAAS,KAGNwC,EAAgBE,SASzB,OALAD,EAAaE,WAAWJ,GACxBE,EAAa3C,QAAUA,EAEvB,qBAAU,WAAM,OAAA2C,EAAA,kBAETA,EAAanB,QAAQvB,K,w3zFC7BjB6C,EAAN,6CAeMC,EAAoB,GAAH,OAZ9B,oCAY8B,OAX9B,WAW8B,OAV9B,WAU8B,OATvB,+BASuB,OAR9B,oCAQ8B,OAN9B,uB,ICpBqBC,EACnB,e,4FAAkB,SAChBzb,KAAA,KAAYA,KAAKkH,YAAjB,KACAlH,KAAA,UACAA,KAAA,MAAc,IAAI0b,MAAL,GAAb,QAIJD,YAAuB9d,cAAc+d,MAArCD,YACAA,cCFe,oBACXte,EAAIA,QAAJA,KACAuC,EAAIA,QAAJA,KAGA,IAFA,IAAIic,EAAKxe,WAAT,KACIye,EAAKlc,WAAT,KACStC,EAAT,EAAgBA,EAAhB,EAAuBA,IAAK,CACxB,IAAIye,EAAKC,OAAOH,EAAhB,IACII,EAAKD,OAAOF,EAAhB,IACA,GAAIC,EAAJ,EAAa,OAAO,EACpB,GAAIE,EAAJ,EAAa,SACb,IAAKC,MAAD,IAAcA,MAAlB,GAA6B,OAAO,EACpC,GAAIA,WAAcA,MAAlB,GAA6B,SAEjC,OAAI7e,MAAQuC,EAAZ,GACWvC,KAAOuC,EAAPvC,KAAmBA,KAAOuC,EAAPvC,MAA1B,GAEIA,EAAD,IAASuC,EAAT,KAAqBvC,OAASuC,EAATvC,MAA5B,G,qiBCpBJ,IAQM8e,EAAN,SAEMC,EAAN,QAKqBC,E,WACpB,cAAsB,UAyahB,SAA0BC,GAChC,MACC,MAAM,IAAIV,MAAV,6EAKD,IAAKW,EAAD,KAAyBA,EAAUD,EAAvC,WACC,MAAM,IAAIV,MAAM,sJAAV,OAAoKW,KAAsB,yBAA2B1e,oBAA3B,MAAtB0e,KAA2F,KAAOC,EAAP,QAA/P,EAAN,MAhbAC,IACAvc,KAAA,WACAwc,e,iDAIA,OAAO7e,OAAA,KAAYqC,KAAKoc,SAAjB,mBAA4C,SAAAvb,GAAC,cAAIA,O,yCAGtC4I,GAClB,OAAOzJ,KAAKoc,SAASK,UAArB,K,sCAIA,KAAIzc,KAAK0c,IAAM1c,KAAX,IAAsBA,KAA1B,IAGA,OAAOA,KAAKoc,SAASO,eAAiB3c,KAAKoc,SAA3C,kB,iCAGU1N,GACV,gBAAO1O,KAAK4c,mBAAmBlO,K,qCAGjBmO,GACd,GAAI7c,KAAK8c,8BAAT,GACC,SAED,GAAI9c,KAAJ,iBACC,GAAIA,KAAK2c,gBAAT,GACC,aAEK,CAEN,IAAMI,EAAe/c,KAAKgd,sBAA1B,GACA,GAAID,OAAgBA,UAApB,QAAiDA,KAChD,Y,iDAKwBF,GAC1B,OAAI7c,KAAJ,kBACQA,KAAK2c,gBAAgBE,IAErB7c,KAAK8c,8BAA8BD,K,8BAKpCpT,GACP,OAAOzJ,KAAKid,oBAAZ,K,0CAGmBxT,EAAaoT,GAMhC,GAJIpT,GAAeyS,OAAnB,KACCW,IACApT,QAEGA,GAAJ,QAAmBA,EAAuB,CACzC,IAAKzJ,KAAKkd,WAAV,GACC,MAAM,IAAIxB,MAAM,oBAAV,OAAN,IAED1b,KAAA,cAAqB,IAAImd,EAAcnd,KAAK4c,mBAAvB,GAArB5c,WACM,GAAI6c,EAAa,CACvB,IAAK7c,KAAKod,eAAV,GACC,MAAM,IAAI1B,MAAM,yBAAV,OAAN,IAED1b,KAAA,cAAqB,IAAImd,EAAcnd,KAAKqd,yBAAvB,GAArBrd,WAEAA,KAAA,qBAED,c,oDAG6B6c,GAC7B,IAAME,EAAe/c,KAAKgd,sBAA1B,GACA,KAAkB,CAUjB,GAAID,cAAJ,IAAiCA,YAChC,OAED,Y,mDAI2BF,GAC5B,IAAME,EAAe/c,KAAK8c,8BAA1B,GACA,KACC,OAAOC,EAAP,K,+CAIuBF,GACxB,IAAMpT,EAAczJ,KAAKsd,6BAAzB,GACA,KACC,OAAOtd,KAAK4c,mBAAZ,GAED,GAAI5c,KAAJ,gBAA0B,CACzB,IAAMoc,EAAWpc,KAAK2c,gBAAtB,GACA,KACC,aAEK,CAEN,IAAMI,EAAe/c,KAAKgd,sBAA1B,GACA,GAAID,OAAgBA,UAApB,QAAiDA,KAChD,OAAO/c,KAAKoc,SAASK,UAArB,U,2CAOF,OAAOzc,KAAKud,cAAZ,gB,kCAKA,OAAOvd,KAAKud,cAAZ,c,yCAKA,OAAOvd,KAAKud,cAAZ,qB,8CAKA,OAAOvd,KAAKud,cAAZ,0B,wCAKA,OAAOvd,KAAKud,cAAZ,oB,gCAKA,OAAOvd,KAAKud,cAAZ,Y,iDAKA,OAAOvd,KAAKud,cAAZ,6B,oDAKA,OAAOvd,KAAKud,cAAZ,gC,sCAKA,OAAOvd,KAAKud,cAAZ,kB,iCAKA,OAAOvd,KAAKud,cAAZ,a,2BAII1K,GACJ,OAAO7S,KAAKud,cAAc1K,KAA1B,K,4BAKA,OAAO7S,KAAKud,cAAZ,Q,4CAIA,OAAIvd,KAAJ,GAAoBA,KAAKoc,SAAZ,gCACNpc,KAAKoc,SAAZ,wB,wDAIiCS,GACjC,OAAO7c,KAAKid,oBAAZ,K,iDAIA,gBAAOjd,KAAKud,kB,KAIRJ,E,WACL,gBAA4C,UAC3Cnd,KAAA,uBACAA,KAAA,WACAwc,YAAsBgB,EAAtBhB,U,gDAIA,OAAOxc,KAAKoc,SAAZ,K,2DAUA,OAAOpc,KAAKwd,qBAAqBH,yBAAyBrd,KAA1D,iB,kCAIA,IAAIA,KAAK0c,KAAM1c,KAAf,GACA,OAAOA,KAAKoc,SAAZ,K,yCAIA,IAAIpc,KAAK0c,KAAM1c,KAAf,GACA,OAAOA,KAAKoc,SAAZ,M,8CAIA,OAAIpc,KAAK0c,IAAM1c,KAAf,GAA+BA,KAAKoc,SAAZ,GACjBpc,KAAKoc,SAAZ,K,wCAIA,IAAIpc,KAAJ,GACA,OAAOA,KAAKoc,SAASpc,KAAKyd,GAAK,EAA/B,K,kCAGWrB,GACX,OAAOA,EAASpc,KAAK0c,GAAK,EAAI1c,KAAKyd,GAAK,EAAxC,K,gCAMS,WACHC,EAAU1d,KAAK2d,YAAY3d,KAAjB,WAAmCA,KAAK2d,YAAY3d,KAApD,uCAAhB,GACA,OAAO0d,EAAA,KAAY,SAAA7c,GAAC,OAAI,IAAI+c,EAAO/c,EAAf,Q,uCAIpB,OAAOb,KAAKoc,SAASpc,KAAK0c,GAAK,EAAI1c,KAAKyd,GAAK,EAA7C,K,uDAGgCrB,GAChC,OAAOA,EAASpc,KAAK0c,GAAK,EAAI1c,KAAKyd,GAAK,EAAxC,K,qDAOA,OAAOzd,KAAK6d,iCAAiC7d,KAAtC,WAAwDA,KAAK6d,iCAAiC7d,KAArG,wC,kDAIA,OAAOA,KAAKoc,SAASpc,KAAK0c,GAAK,EAAI1c,KAAKyd,GAAK,EAA7C,K,iDAMA,OAAOzd,KAAK8d,6BAA+B9d,KAA3C,mB,oDAIA,OAAOA,KAAKoc,SAASpc,KAAK0c,GAAK,EAAI1c,KAAKyd,GAAK,EAA7C,K,mEAIA,QAASzd,KAAKoc,SAASpc,KAAK0c,GAAK,EAAI1c,KAAKyd,GAAK,EAA/C,K,+EAQA,OAAOzd,KAAK+d,2CAA2C/d,KAAhD,WACNA,KAAK+d,2CAA2C/d,KADjD,wC,sCAKA,OAAOA,KAAKoc,SAASpc,KAAK0c,GAAK,EAAI1c,KAAKyd,GAAK,EAA7C,M,8BAIA,OAAOzd,KAAKoc,SAASpc,KAAK0c,GAAK,EAAI1c,KAAKyd,GAAK,GAA7C,M,iCAMA,QAAIzd,KAAKge,SAAT,IAAoBhe,KAAKge,QAAQpf,WAKxBoB,KAAT,U,2BAGI6S,GACJ,GAAI7S,KAAKie,YAAcC,EAAQle,KAAD,QAA9B,GACC,OAAO,IAAIme,EAAKD,EAAQle,KAAD,QAAhB,GAAP,Q,4BAKD,OAAIA,KAAK0c,IAAM1c,KAAf,GAA+Bic,EACxBjc,KAAKoc,SAAS,KAArB,M,KAIIwB,E,WACL,gBAA8B,UAC7B5d,KAAA,UACAA,KAAA,W,4CAIA,OAAOA,KAAKoe,QAAZ,K,+BAIA,OAAOpe,KAAKoe,QAAZ,K,8CAIA,OAAOpe,KAAKoe,QAAQ,IAApB,K,qDAIA,OAAOpe,KAAKoe,QAAQ,IAAMpe,KAAKoc,SAA/B,iC,+EAIA,QAASpc,KAAKoe,QAAP,IAAqBpe,KAAKoc,SAAjC,2D,gFASA,OAAOpc,KAAKqe,uBAAyBre,KAArC,2D,2CAKA,SAAOA,KAAKse,gCAEVC,OAAqCve,KAFhC,mC,4CAYP,OAAOA,KAAKoe,QAAQ,IAAMpe,KAA1B,a,KASIue,EAAN,cAEMJ,E,WACL,gBAA4B,UAC3Bne,KAAA,OACAA,KAAA,W,4CAIA,OAAIA,KAAKoc,SAAT,GAA6Bpc,KAAP,KACfA,KAAK6S,KAAZ,K,wCAIA,IAAI7S,KAAKoc,SAAT,GACA,OAAOpc,KAAK6S,KAAK,IAAM7S,KAAKoc,SAA5B,sB,KAIF,SAAS,EAAT,KACC,UACC,iBACC,OAAO4B,EAAP,GACD,aACC,OAAOA,EAAP,GACD,gBACC,OAAOA,EAAP,GACD,mBACC,OAAOA,EAAP,GACD,sBACC,OAAOA,EAAP,GACD,gBACC,OAAOA,EAAP,GACD,UACC,OAAOA,EAAP,GACD,YACC,OAAOA,EAAP,GACD,WACC,OAAOA,EAAP,GACD,kBACC,OAAOA,EAAP,IAmBH,IAAM3B,EAAY,SAAAxb,GAAC,iBAAI,MAKjByb,EAAU,SAAAzb,GAAC,aA6BV,SAAS2d,EAAsB9P,EAAS0N,GAE9C,IADAA,EAAW,IAAID,EAAfC,IACIA,WAAJ,GACC,OAAOA,aAAP,qBAED,MAAM,IAAIV,MAAM,oBAAV,OAAN,IAGM,SAAS+C,EAAmB/P,EAAS0N,GAG3C,gBAAOA,eAGR,SAASI,EAAWJ,GAAU,IACrBsC,EAAYtC,EADS,QAE7B,kBAAWsC,GACV1e,KAAA,OAAU0e,EACV1e,KAAA,OAAU0e,EACV1e,KAAA,OAAU0e,EACV1e,KAAA,OAAU0e,GAEV,GAEO,IAAIC,EAAQD,EA/frB,SAggBG1e,KAAA,OACM,IAAI2e,EAAQD,EA9frB,UA+fG1e,KAAA,MAEAA,KAAA,MANAA,KAAA,MClgBH,IAOM4e,EAA4B,SAACC,GAAD,4CASnB,SAASC,EAAuBC,GAO9C,IAcIC,EArBmD,KAsFvD,MAtGD,QAgEQJ,EAzCP,MA+EOK,KApCYC,iIAEZN,EA7CP,MA2CA,GAoCOK,KA/BaC,2FAElBN,EA9CF,KA4CA,GA+BOK,KAtFgD,QA6DrDL,EAhDF,KA+CA,KA0BOK,KAtBgBE,kDAEhBP,EAzDP,MAuDA,GAsBOK,KAjBcE,8CAEfP,EA5DN,KAXuD,GCcxD,IAKaQ,EACZ,kIAmBKC,EAAmC,IAAIhf,OAC5C,mFADD,KAUaif,EACZF,EAAA,MAEQN,IAHF,KAODS,EAA6B,IAAIlf,OAEtC,wDAFkC,IAAnC,KAmBe,SAASmf,EAAoBC,GAC3C,OAAOA,UL9FD,GK+FLF,OADD,GC3FD,IAAMG,EAAe,IAAIrf,OAAO,MAAQye,IAAnB,KAArB,KCEO,IAAMa,EAAS,CACrB,EADqB,IAErB,EAFqB,IAGrB,EAHqB,IAIrB,EAJqB,IAKrB,EALqB,IAMrB,EANqB,IAOrB,EAPqB,IAQrB,EARqB,IASrB,EATqB,IAUrB,EAVqB,IAWrB,SAXqB,IAYrB,SAZqB,IAarB,SAbqB,IAcrB,SAdqB,IAerB,SAfqB,IAgBrB,SAhBqB,IAiBrB,SAjBqB,IAkBrB,SAlBqB,IAmBrB,SAnBqB,IAoBrB,SApBqB,IAqBrB,SArBqB,IAsBrB,SAtBqB,IAuBrB,SAvBqB,IAwBrB,SAxBqB,IAyBrB,SAzBqB,IA0BrB,SA1BqB,IA2BrB,SA3BqB,IA4BrB,SA5BqB,IA6BrB,SA7BqB,IA8BrB,SA9BqB,IA+BrB,SA/BqB,IAgCrB,SAhCqB,IAiCrB,SAjCqB,IAkCrB,SAlCqB,IAmCrB,SAnCqB,IAoCrB,SApCqB,IAqCrB,SArCqB,IAsCrB,SAtCqB,IAuCrB,SAvCqB,IAwCrB,SAxCqB,KA2Cf,SAASC,EAAWC,GAC1B,OAAOF,EAAP,GAgBc,SAASG,EAAYle,GACnC,IAAI8W,EADuC,GAQ3C,EAAwB9W,QAAxB,4DAA0C,yFACnCme,EAAQH,EAD2B,GAEzC,IACClH,MAGF,SC/Dc,SAASsH,EAA2Bpe,GAClD,IAAI8W,EADsD,GAQ1D,EAAwB9W,QAAxB,4DAA0C,qFACzC8W,GAAUuH,EAD+B,EAC/BA,IAAVvH,GAED,SAcM,SAASuH,EAA0BJ,EAAWK,GAEpD,SAAIL,EAAmB,CAGtB,KACC,OAED,UAGD,OAAOD,EAAP,GCnDc,SAASO,EAAkBC,EAAgBhE,GACzD,OAAOiE,EAAyBD,OAAgBzG,EAAhD,GAKM,SAAS0G,EAAyBD,EAAgBvN,EAAMuJ,GAC9D,IAAMkE,EAAYlE,OADsD,GAUpEmE,EAAmBD,GAAaA,EAAbA,mBAA4ClE,EAVK,kBAcxE,MACC,oBAGD,4BAAIvJ,EAAiC,CAGpC,IAAKuJ,OAAL,cAGC,OAAOiE,EAAyBD,EAAgB,SAAhD,GAGD,IAAMI,EAAcpE,OAApB,UACA,IAMCmE,ECpCY,SAAqBpjB,EAAGuC,GACtC,IAAM+gB,EAAStjB,EAAf,QAEA,4DAAyB,yFAAdujB,EAAc,EACpBvjB,aAAJ,GACCsjB,UAIF,OAAOA,EAAA,MAAY,qBAAUtjB,EAAV,KD2BEwjB,CAAYJ,EAAkBC,EANjC,yBAmBb,GAAI3N,IAAJ,EACJ,uBAGD,IAAM+N,EAAgBR,EAnDkD,OA6DlES,EAAiBN,EAAvB,GAEA,OAAIM,IAAJ,EACC,cAGGA,EAAJ,EACC,YAGGN,EAAiBA,SAAjBA,GAAJ,EACC,WAIMA,gCAAP,iBEhCM,SAASO,EAAiBV,EAAgBhE,GAChD,OAAQ+D,EAAkBC,EAA1B,IACC,kBACC,SAKD,QACC,U,kZCxDY,SAASW,EAAgBC,EAAMC,GAI7C,OADAD,EAAOA,GAAPA,GACO,IAAI3gB,OAAO,OAAS4gB,EAApB,WAAP,GCND,IAAMC,EAA6B,CAAC,SAAD,gFAAnC,aAae,SAASC,EAAcC,EAAO5I,EAAS4D,GAQrD,GAJA5D,EAAUA,GAHX,GAOM4I,EAAL,UAIAhF,EAAW,IAAID,EAAfC,IAEAA,oBAA6BgF,EAA7BhF,QAA4CgF,EAA5ChF,oBAEA,IAAMgE,EAAiB5H,KAAa4I,EAAb5I,eAAoC4I,EAf5D,MAqBC,GAAKL,EAAgBX,EAAgBhE,EAArC,0BAKA,GAAIiF,EAAoBjB,EAAgB,aAAxC,GAKC,OAAIhE,kBAAJ,KAA+BA,2BAC9B,uBAMIA,OAAL,UAOIiF,EAAoBjB,EAAgB,SAAxC,GACC,uBAGD,aAVC,uBAaF,+BAA+C,CAA1C,IAAMvN,EAAI,EAAV,GACJ,GAAIwO,EAAoBjB,EAAgBvN,EAAxC,GACC,YAKI,SAASwO,EAAoBjB,EAAgBvN,EAAMuJ,GAEzD,UADAvJ,EAAOuJ,OAAPvJ,MACcA,EAAd,eASIA,qBACHA,4BAA+BuN,EAA/BvN,QADD,IAIOkO,EAAgBX,EAAgBvN,EAAvC,YC3Dc,SAASyO,EAAiCnV,GACxD,OAAOA,UAAwB,IAAI9L,OAAO,IAAX,eAAxB8L,UAAP,OC3BM,IAAMoV,EAAN,SAEQ,SAASC,EAAgC,EAAzC,KASb,IALAC,EAKA,EALAA,uBACAC,EAIA,EAJAA,mBAKKvV,GADL,EAHAwV,YAGA,EAFAvF,SAGuBqD,UACvB,IAAIpf,OAAOsJ,EADY8V,WAEvBgC,EACG9X,EADmB,sBAgBpB+X,GAAsB/X,EAAtB+X,+BACG/X,qBAA6CA,EADhD+X,gCAEG/X,EApBN,WAuBA,SACQ2X,EAAP,GAED,ECjCD,IAAMM,EAAN,yC,wHCAA,IAAMC,EAAkB,CACvBC,gBAAiB,0CAA+D1F,EAA/D,mBAgBH,SAAS/P,EAAa+U,EAAOzX,EAAQ6O,EAAS4D,GAU5D,GAPC5D,EADD,E,uUACW,CAAH,KAAPA,GAEAA,EAGD4D,EAAW,IAAID,EAAfC,GAEIgF,WAAJ,QAAqBA,UAAyB,CAE7C,IAAKhF,aAAoBgF,EAAzB,SACC,MAAM,IAAI1F,MAAM,oBAAV,OAA8B0F,EAApC,UAEDhF,UAAiBgF,EAAjBhF,aAEI,KAAIgF,EAAJ,mBAGA,OAAOA,SAAP,GAFJhF,sBAA6BgF,EAA7BhF,oBAID,IAMA,EANM2F,EAAqB3F,EAA3B,qBAEMgE,EAAiB5H,KAAa4I,EAAb5I,eAAoC4I,EAxBW,MA8BtE,UACC,eAGC,SAIOY,GADPvC,EAASwC,EAAqB7B,EAAgBgB,EAAjB,yBAA7B3B,GAC4B2B,EAAT,MAA8B5I,EAAjD,iBAHC,GAKF,oBAGC,UAGAiH,EAASwC,EAAqB7B,EAAgB,KAAM,gBAAiBhE,EAArEqD,GAEOuC,GADPvC,EAAS,IAAH,qBAANA,GAC4B2B,EAAT,MAA8B5I,EAAjD,kBAJC,cAMF,YAEC,8BAED,cACC,OCjCI,SAAuB,GAAiB,IAAfiH,EAAe,EAAfA,OAAQyC,EAAO,EAAPA,IACvC,MACC,SAED,SAAIzC,KACH,MAAM,IAAI/D,MAAV,6DAED,8BAAuBwG,EAAM,QAAH,EAA1B,ID0BSC,CAAc,CACpB1C,OAAQ,IAAF,iBADc,GAEpByC,IAAKd,EAAMc,MAOb,UACC,IAAK1J,EAAL,YAA0B,OAW1B,OAAOwJ,GA8CV,SAAmB,EAAnB,SASC,GAF+BxD,EAAsB4D,EAAahG,EADjE,YAGD,EAAmD,CAClD,IAAMjQ,EAAkB8V,EAAqB7B,EAAgBuB,EAAa,WADxB,GAIlD,YAAII,EACIA,MAAP,EAWD,EAED,IAAMM,EDlKQ,SAAsB3T,EAASmO,EAAaT,GAC1D,IAAMkG,EAAkB,IAAInG,EAA5B,GAEA,OADAmG,2BACIA,EAAJ,mBACQA,EAAP,mBAEGV,OAA+BU,EAAnC,aACQA,EAAP,iBADD,EC4JkBC,CAAaH,OAAazI,EAAWyC,EAAvD,UACA,KACC,4CAA6C6F,EAAqB7B,EAAgB,KAAM,gBAAxF,IAlFyBoC,CAAU,EAEjCpB,EAFgC,cAIhC5I,EAJgC,YAAjC,GAOqC4I,EAAlB,MAAuC5I,EAA1D,iBAED,QACC,MAAM,IAAIkD,MAAM,0DAAV,SAAN,OAIH,SAASuG,EAAqBxC,EAAQkC,EAAac,EAAUrG,EAAU5D,GACtE,IAAM7O,EAgBP,SAA+B+Y,EAAkBC,GAChD,gEAAuC,yFAA5BhZ,EAA4B,EAEtC,GAAIA,iCAAJ,EAA+C,CAE9C,IAAMiZ,EAA2BjZ,0BAA+BA,iCAFlB,GAI9C,OAAIgZ,YACH,SAIF,GAAI5B,EAAgB4B,EAAiBhZ,EAArC,WACC,UA7BakZ,CAAsBzG,EAAD,UAApC,GACA,SAGOoF,EAAgC,EAAD,EAGrC,CACCC,uBADD,kBACyBgB,EACxBf,oBAAoB/X,6DAAoE6O,IAApE7O,IAA+E6O,iBACnGmJ,YAHD,EAICvF,aATD,EAgCF,SAAS4F,GAAa7V,EAAiB+V,EAAK9F,EAAU0F,GACrD,OAAOI,EAAMJ,EAAgB3V,EAAiB+V,EAApC,GAAV,E,gSE5ID,IAEqBY,G,WACpB,kBACC,G,4FADyD,UACzD,EACC,MAAM,IAAIzhB,UAAV,gDAED,MACC,MAAM,IAAIA,UAAV,+BAED,MACC,MAAM,IAAIA,UAAV,yBAED,IAAM0hB,EAAY,IAAI5G,EAVmC,GAarD6G,GAAJ,KACChjB,KAAA,UACA+iB,aACAhB,EAAqBgB,EAArBhB,sBASD/hB,KAAA,qBACAA,KAAA,iBACAA,KAAA,OAAc,IAAMA,KAAN,mBAAgCA,KAA9C,eACAA,KAAA,W,4DAIA,ORvCa,SAA+BohB,EAAO5I,EAAS4D,GAQ7D,QANA,IAAI5D,IACHA,MAGD4D,EAAW,IAAID,EAAfC,GAEI5D,EAAJ,GAAgB,CACf,IAAK4I,EAAL,mBACC,MAAM,IAAI1F,MAAV,sCAEDU,sBAA6BgF,EAA7BhF,wBACM,CACN,IAAKgF,EAAL,MACC,SAED,GAAIA,EAAJ,QAAmB,CAClB,IAAKhF,aAAoBgF,EAAzB,SACC,MAAM,IAAI1F,MAAM,oBAAV,OAA8B0F,EAApC,UAEDhF,UAAiBgF,EAAjBhF,aACM,CACN,IAAKgF,EAAL,mBACC,MAAM,IAAI1F,MAAV,sCAEDU,sBAA6BgF,EAA7BhF,qBAIF,GAAIA,EAAJ,kBACC,OAAO0E,EAAiBM,SAAeA,EAAhB,eAAvB,GAQA,GAAIA,sBAA4BhF,6BAAoCgF,EAApE,oBAGC,SAEA,MAAM,IAAI1F,MAAV,kGQLMoF,CAAiB9gB,KAAM,CAAEyd,IAAI,GAAQzd,KAA5C,Y,gCAIA,OCboCohB,EDafphB,KCbsBwY,EDahB,CAAEiF,IAAI,GCbmBrB,EDaXpc,KAAzC,SCTDwY,EAAUA,GAAVA,GAEA4D,EAAW,IAAID,EALhB,KASMiF,EAAL,UAKAhF,sBAA6BgF,EAA7BhF,QAA4CgF,EAd7C,oBAkBKhF,EAAJ,gBAEC,IAAO+E,EAAcC,EAAO5I,EAAS4D,EAA9B+E,UAMDJ,EADiBvI,KAAa4I,EAAb5I,eAAoC4I,EAA5D,MACwChF,EAAxC,0BA3Bc,IAAuBgF,EAAO5I,EAAS4D,I,wCDkBpD,OADiB,IAAID,EAASnc,KAA9B,UACOoc,2BAAoCpc,KAA3C,sB,8BAGOijB,GACP,OAAOjjB,KAAKyf,SAAWwD,EAAhB,QAAsCjjB,KAAKkiB,MAAQe,EAA1D,M,gCAUA,OAAO9B,EAAcnhB,KAAM,CAAEyd,IAAI,GAAQzd,KAAzC,Y,6BAGM2J,EAAQ6O,GACd,OAAOnM,EAAa,KAAD,EAGlBmM,E,wUAAU,CAAH,MAAiBiF,IAAI,IAAS,CAAEA,IAAI,GAC3Czd,KAJD,Y,qCAQcwY,GACd,OAAOxY,KAAK2J,OAAO,WAAnB,K,0CAGmB6O,GACnB,OAAOxY,KAAK2J,OAAO,gBAAnB,K,6BAGM6O,GACN,OAAOxY,KAAK2J,OAAO,UAAnB,Q,kCAIIqZ,GAAgB,SAAC/kB,GAAD,MAAW,aAAa6B,KAAxB,IEvFhBojB,GAA0B,IAAI7iB,OAAO,kDAE5B,SAAS8iB,GAAe1D,EAAQ/Q,EAASmO,EAAaT,GACpE,MAIA,IAAMkG,EAAkB,IAAInG,EAA5B,GACAmG,2BACA,IAAMc,EAAmB,IAAI/iB,OAAOiiB,EAApC,aACA,OAAI7C,YAAJ,CASA,IAAM4D,GALN5D,EAASA,QAAaA,cAZwD,SAiBxDA,MAAtB,IACA,KAAI4D,SAAiBA,MAA4BA,YAAjD,GACC,MAAIA,MAIL,WCfc,SAASC,GAAkD7D,EAAQrD,GACjF,GAAIqD,GAAUrD,gBAAd,2BAAiE,CAIhE,IAAMmH,EAAgB,IAAIljB,OAAO,OAAS+b,gBAAT,2BAAjC,KACMoH,EAAcD,OAApB,GACA,KAAiB,CAChB,MADgB,EAyDhB,EAtCME,EAAsBD,SAA5B,EACME,EAAoBD,KAA2BD,EAArD,GACA,GAAIpH,iCAAJ,EACCgE,EAAiBX,YAEhBrD,EAH+D,+BAO5DqH,EAAJ,IACC9B,EAAc6B,EAAd7B,QASG,CAMJ,IAAMgC,EAA6BH,EAAnC,GACApD,EAAiBX,QAAakE,EAP1B,QAUJ,IACChC,EAAc6B,EAAd7B,IASF,KAAuB,CACtB,IAAMiC,EAA0CnE,UAAe+D,EAA/D,IAC+B/D,UAFT,KASSrD,gBAA/B,mBACCyH,EAAiBzH,gBAAjByH,uBAGDA,EAAiBL,EAAjBK,GAED,MAAO,CACNzD,eADM,EAENyD,eAFM,EAGNlC,gBAID,MAAO,CACNvB,eAAgBX,GCxFL,SAASqE,GAAsBrE,EAAQrD,GAAU,MAa3DkH,GAAkD,EAbS,GAW9DlD,EAX8D,iBAY9DuB,EAZ8D,cAiB/D,IAgDD,SAAqClC,EAAQsE,EAA2B3H,GAGvE,GAAI2E,EAAgBtB,EAAQrD,EAAxB2E,2BACFA,EAAgBgD,EAA2B3H,EAD7C,yBAEC,SAOD,SA5DK4H,CAA4BvE,EAAQW,EAAzC,GAEC,MAAO,CAAEA,eAAgBX,GAW1B,GAAIA,WAAkBW,UAAyBuB,EAAcA,EAAH,OAA1D,IAGKvF,EAAJ,kBAMC,OAAQ+D,EAAkBC,EAA1B,IACC,gBACA,qBAGC,MAAO,CAAEA,eAAgBX,GAI7B,MAAO,CAAEW,eAAF,EAAkBuB,eC9CX,SAASsC,GAAgE,EAAzE,OAMd,IAAMlC,EAAqBrT,EAAU8P,EAAsB9P,EAAzB,GAAlC,EACA,OAAI+Q,aAA0C,EAC7CrD,EAAW,IAAID,EAAfC,IACAA,yBACA,IAAM8H,EAAwBzE,QAAasC,EAA3C,QAEiBoC,EACbL,GAAsB,EANmB,kBAW5C1D,EACG0D,GAAsB,EAZmB,kBAwB7C,IAEG/C,EAAgBX,EAAgBhE,EAAjC,0BAEA2E,EAAgBoD,EAA+B/H,EAHhD,0BADD,aAOC+D,EAAkBC,EAAlBD,GAEA,MAAO,CACN4B,mBADM,EAENtC,OAAQyE,GAIX,MAAO,CAAEzE,UCtCK,SAAS,GAAT,SAMd,MACC,SAUD,SAAIA,KAAmB,CAGtB,IAAM2E,EAAmBjB,GAAe1D,EAAQ/Q,EAASmO,EAHnC,GAOtB,IAAIuH,GAAoBA,IAAxB,EAEO,CAKN,GAAI1V,GAAJ,EAA4B,OAIvBuV,GAAgE,EAAD,IAJxC,GAE1BlC,EAF0B,qBAGlBsC,EAHkB,SAU3B,KACC,MAAO,CACNtC,mBADM,EAENtC,OAAQ4E,GAIX,MAAO,CAAE5E,UAvBTA,EAAS,IAATA,EA4BF,SAAIA,KACH,SAGDrD,EAAW,IAAID,EApDd,GAgED,IADA,IAAI/e,EAAJ,EACOA,KzBpFD,GyBoFqCA,GAAKqiB,EAAhD,QAA+D,CAC9D,IAAMsC,EAAqBtC,UAA3B,GACA,GAAIrD,iBAAJ,GAEC,OADAA,yBACO,CACN2F,mBADM,EAENtC,OAAQA,YAGVriB,IAGD,SCnGc,SAASknB,GAAwBzH,EAAa0H,EAAqBnI,GAQjF,IAAMoI,EAAoBpI,gCAA1B,GACA,KAKA,WAAIoI,SACIA,EAAP,GAKF,SAA+BA,EAAmBD,EAAqBnI,GAEtEA,EAAW,IAAID,EAAfC,GACA,gEAAyC,yFAA9B1N,EAA8B,EAGxC,GAFA0N,UADwC,GAGpCA,EAAJ,iBACC,GAAImI,GAAJ,IACCA,SAA2BnI,EAA3BmI,iBACA,cAKG,GAAIpD,EAAc,CAAEsD,MAAF,EAA8B/V,gBAA/B,EAAqD0N,EAAtE,UACJ,UAlBKsI,CAAsBF,EAAmBD,EAAqBnI,EAArE,UCQD,IAGMuI,GAA6B,IAAItkB,OAAO,uDAKxCukB,GAAiC,IAAIvkB,OAAO,oDAenC,SAAS,GAAT,OAQd,GALAmY,EAAUA,GAAVA,GAEA4D,EAAW,IAAID,EALuC,GAQlD3D,mBAA2B4D,aAAoB5D,EAAnD,gBAA4E,CAC3E,GAAIA,EAAJ,GACC,MAAM,IAAIiD,EAAV,mBAED,MAAM,IAAIC,MAAM,oBAAV,OAA8BlD,EAApC,iBAZqD,MAqKvD,SAAoBwI,EAAMvD,EAAIoH,GAE7B,GAAI7D,GAAJ,IAAYA,kBACX,OTrNK,SAAsBA,GAC5B,MADkC,EAOlC,GAFAA,EAAOA,kBAAPA,SAEmBA,MAAnB,6DAAoC,+FACb8D,MADa,QAC5B9d,EAD4B,KACtB/I,EADsB,KAEnC,UACC,UACCwhB,IACA,MACD,UACCyC,IACA,MACD,oBAGC,MAAIjkB,OACHwhB,EAASxhB,EAATwhB,IAOJ,IAAKD,EAAL,GACC,SAGD,IAAM9G,EAAS,CAAE+G,UAIjB,OAHA,IACC/G,SAED,ESkLQqM,CAAP,GAED,IAAItF,EApCL,SAAqCuB,EAAM6D,EAASG,GACnD,MACC,OAED,GAAIhE,SAjKL,IAiK4C,CAC1C,KACC,MAAM,IAAIvF,EAAV,YAED,OAED,QAAIoJ,EACH,SAGD,IAAMI,EAAWjE,SAAjB,IACA,GAAIiE,EAAJ,EACC,OAED,OAAOjE,EAAA,oBAAP,IAkBakE,CAA4BlE,EAAM6D,EALT,GAOtC,MACC,SAED,IAAKrF,EAAL,GACC,OtB5HK,SAAkCC,GACxC,OAAOJ,OAAP,GsB2HK8F,CAAJ,GACQ,CAAE7L,MAAO,aAEjB,GAID,IAAM8L,ErBnOQ,SAA0B3F,GACxC,IAAM4F,EAAQ5F,SAAd,GACA,GAAI4F,EAAJ,EACC,SAOD,IAHA,IAAMC,EAAyB7F,UAA/B,GACM8F,EAAU9F,QAAhB,GACIriB,EAAJ,EACOA,EAAImoB,EAAX,QAA2B,CAC1B,GAAIA,EAAJnoB,GACC,MAAO,CACNqiB,OADM,EAENyC,IAAKqD,EAAQnoB,IAGfA,KqBkN6BooB,CAA9B,GACA,GAAIJ,EAAJ,IACC,SAED,MAAO,CAAE3F,UA3K4CgG,CAAWzE,EAAMxI,EAAP,GAAmBA,EAhB5B,SAgBtCkN,EAhBsC,SAgBhBxD,EAhBgB,MAgBX5I,EAhBW,QAmBtD,MAA2B,CAC1B,GAAId,EAAJ,GAAgB,CACf,iBAAIc,EACH,MAAM,IAAImC,EAAV,aAED,MAAM,IAAIA,EAAV,gBAED,SA1BqD,MAoNvD,SAA0B,EAA1B,OAKE,IAUD,EAVC,EAEoCkK,GACpC3F,EAD6D,OAI7D5D,EANA,UAEK2F,EAFL,qBAEyBtC,EAFzB,SAWD,KACCrD,6BAII,KAAIqD,IAAWmG,IAAf,EAcA,MAAO,GAbXxJ,2BACA,IACC1N,KASDqT,EAAqB8D,GAAsBrH,EAAsBoH,EAAgBxJ,EAAjF2F,UAID,MACC,MAAO,CAAEA,sBAjCT,MAuCG+B,GACH9D,EADwB,GAvCxB,GAqCAI,EArCA,iBAsCAuB,EAtCA,cAsDKmE,EAAexB,GAAwBvC,EAAoB3B,EAAjE,GACA,IACC1R,IAEA,QAAIoX,GAKH1J,cAIF,MAAO,CACN1N,QADM,EAENqT,mBAFM,EAGN3B,eAHM,EAINuB,eA9PGoE,CAAiB,EAEpBvN,EAFmB,eAGnBA,EAHmB,mBAlCkC,GA8BrD9J,EA9BqD,UA+BrD0R,EA/BqD,iBAgCrD2B,EAhCqD,qBAiCrDJ,EAjCqD,cAyCtD,IAAKvF,EAAL,2BAA0C,CACzC,GAAI5D,EAAJ,GACC,MAAM,IAAIiD,EAAV,mBAED,SAID,IAAK2E,GAAkBA,S3BrGjB,E2BqG6D,CAGlE,GAAI5H,EAAJ,GACC,MAAM,IAAIiD,EAAV,aAGD,SAYD,GAAI2E,S3BpHE,G2BoH0C,CAC/C,GAAI5H,EAAJ,GACC,MAAM,IAAIiD,EAAV,YAGD,SAGD,GAAIjD,EAAJ,GAAgB,CACf,IAAMyK,EAAc,IAAI,GAAJ,IAGnB7G,EAHD,UAcA,OATA,IACC6G,aAED,IACCA,iBAED,IACCA,SAED,EAMD,IAAM+C,KAASxN,WAAmB4D,EAAnB5D,2BAAD,IACbuI,EAAgBX,EAAgBhE,EADnB,yBAId,OAAK5D,EAAL,SAMO,CACN9J,QADM,EAENqT,mBAFM,EAGNJ,YAHM,EAINqE,MAJM,EAKNC,WAAUD,MACTxN,iBACA4D,EADA5D,oBAEAsI,EAAiBV,EAFjB5H,IAIDiM,MAVM,EAWNvC,OAhBO8D,EA2FT,gBACC,IAAMtN,EAAS,CACdhK,QADc,EAEd+V,MAAOrE,GAER,IACC1H,SAED,SAnGgBA,CAAOhK,EAAS0R,EAAnB,GAAZ,G,yHCzJa,SAAS,GAAT,OACd,OAAO8F,GAAYlF,E,wUAAM,CAAP,MAAqBvD,IAAI,IAA3C,G,svBCIM,SAAS0I,GAAmBC,GACnC,IAGC,EACA,EAJD,OACsCtnB,2BADtC,MACQunB,EADR,KACeC,EADf,KACsBC,EADtB,KAC6BC,EAD7B,KASC,qBAAWH,EAGN,MAAM,IAAIhlB,UAZhB,wCAgBC,GANC2f,IAMIsF,GAAL,kBAAqBA,EAgBhB,KAAIG,GAAJ,GASA,MAAM,IAAI/K,MAAM,4BAAV,OAAN,IAPJ,GACClD,IACA4D,KAEAA,SApBD,GACC5D,IACA4D,MAEA5D,SACA4D,KAGD,IACC5D,E,wUAAU,CAAH,CAAKoN,eAAgBU,GAA5B9N,IAgBF,MAAO,CACNwI,KADM,EAENxI,QAFM,EAGN4D,YAMF,IAAMqK,GAAW,SAAA5lB,GAAC,iBAAI,O,yHCxDP,SAAS6lB,GAA2B1F,EAAMxI,EAAS4D,GAE7D5D,GAAWA,EAAXA,iBAAsCiG,EAAmBjG,EAAD,eAA5D,KACCA,E,wUAAU,CAAH,MAENoN,oBAAgBjM,KAIlB,IACC,OAAOoM,GAAiB/E,EAAMxI,EAA9B,GACC,MAAOc,GAER,KAAIA,aAAJ,GAGC,SCjBY,SAAS,KAA6B,MAChB6M,GADgB,WAC5CnF,EAD4C,OACtCxI,EADsC,UAC7B4D,EAD6B,WAEpD,OAAOuK,GAA4B3F,EAAMxI,EAAzC,G,ocCFc,SAAS,KAAwB,MACb2N,GADa,WACzCnF,EADyC,OACnCxI,EADmC,UAC1B4D,EAD0B,WAMzC6G,EAAcyD,GAA2B1F,EAJ/CxI,EAAU,GAAH,MAENqM,SAAS,IAEV,GACA,OAAO5B,GAAeA,EAAfA,eAAP,ECRc,SAAS2D,GAAaxK,GACpC,OAAO,IAAID,EAASC,GAApB,e,qDCDYA,GAAW,WAAgB,CACvCyK,sBAAwBC,YADe,WAEvCrK,UAAYqK,YAAiBC,aAGjBC,GAASF,cAAmBA,KAAlC,Q,qBCNA,SAASG,GAAiBC,EAAQtlB,GACxC,IAAIulB,EAD4C,EAShD,EAAwBvlB,QAAxB,4DAA0C,yFACzC,GACCulB,IAGF,SCbc,SAASC,GAAYC,EAAmBC,GAStD,IARD,IADiEjY,EACjE,uDAD+E,IAAKkY,EACpF,uDADwG,IAEnGC,EAAaH,EAAjB,OAEMI,EAAiBR,GAAiB,IAAxC,GACMS,EAAiBT,GAAiB,IAAxC,GAEIU,EAAkBF,EAAtB,EAEOE,KAAuBH,EAAaF,EAA3C,QAECD,GAAqBC,eAArBD,GAEA,MAAIC,MAEHK,IAGDH,IAGD,SCWc,SAAS,GAAT,OAEd,kBAAWI,IAEVA,ECvBa,YACf,IADkCvY,EAClC,uDADgD,IAAKwY,EACrD,uCACC,MAEC,OAAO,SAAA5pB,GAAK,MAAK,CAAE+iB,KAAM/iB,IAG1B,IAAM6pB,EAAyBb,GAAiB5X,EAAhD,GAEA,OAAO,YAEN,MAEC,MAAO,CAAE2R,KAAF,GAAYsG,YAGpB,IAAIS,EAAJ,EACIC,EAPL,GAeC,EAAwBV,QAAxB,4DACA,yFADWzH,EACX,EACC,GAAIA,IAAJ,GAaA,GAPAmI,GAAsB/pB,EAAtB+pB,KACAD,IAM8B9pB,EAA9B,QAKKA,SAAJ,EAEC,WAlBD+pB,KA4BF,OALA,IAECA,EAAqBC,GAAaD,EAAlCA,IAGM,CAAEhH,KAAF,EAA4BsG,aDlCvBY,CAAZN,IAHF,MAM0BA,MAN1B,GAMO5G,EANP,OAMasG,EANb,WAaC,QALA,IAAItG,IAEFA,KAGF,EAEC,YAAImH,EAEHA,EAAQnH,EAARmH,WAGD,CAMC,IALA,IAAIlS,EAAJ,EACImS,GAAJ,EAEIC,GAAJ,EAEOpS,EAAQ+K,EAAR/K,QAAuBA,EAAQqR,EAAtC,QACA,CAEC,GAAItG,OAAgBsG,EAApB,GACA,CACC,OAAIa,EACJ,CACCC,KACAD,IACA,MAGDE,IAEAF,IAGDlS,IAKD,IAECkS,EAAQE,EAARF,GAKH,MAAO,CAAEnH,KAAF,EAAQmH,SEzFT,SAASxY,GAAa+Q,GAG5B,GAAIA,mBAA2BA,EAA/B,aAKA,MAAO,CAAE2E,MAAO3E,EAAT,eAAiC4H,IAAK5H,EAAQ6H,cAI/C,IAAMC,GACb,EADaA,GAGA,GAwBN,SAASC,GAAiB/H,EAASgI,QAGzC,IAAIA,KAuBL,WAEC,wBAAWC,UACV,OAAOC,QAAgCD,UAAvC,WAVGE,GAGHnI,yBAFIxe,YAAW,kBAAMwe,sBAAN,KAAXxe,IAaN,IAAM0mB,GAAN,WCbO,SAAS,GAAT,WAEN,IAAME,EDzCA,SAAsBC,GAE5B,OAAQA,EAAR,SAEC,KAAKP,GACJ,kBAED,KAAKA,GACJ,gBCiCgBQ,CAAlB,GACA,UAEC,aACA,gBAECD,mBAEA,IAAME,EAAYtZ,GAJnB,GAOC,UAECuZ,GAAe9H,EAAf8H,GACOC,GAAgB/H,EAAOgI,EAAQhL,OAASzE,EAA/C,IAIMwP,GAAgB/H,EAAOgI,EAAQhL,EAAS0K,EAA/C,IAYH,SAASI,GAAe9H,EAAO6H,GAE9B,IAAIjI,EAAOI,EAAX,MACAJ,EAAOA,UAAciI,EAAdjI,OAAiCA,QAAWiI,EAAnDjI,KAEAI,UACAqH,GAAiBrH,EAAO6H,EAAxBR,OAeD,SAASU,GAAgB/H,EAAOgI,EAAQhL,EAAS0K,EAAWO,GAC5D,MC/Fe,gBAOd,IALA,IAAIprB,EAAJ,GAEIqrB,EAAJ,EAEIrT,EAAJ,EACOA,EAAQ+K,EAAf,QACA,CACC,IAAMnB,EAAY0J,EAAgBvI,EAAD,GAAjC,QAEA,IAAInB,IAEH5hB,UAEA,IAAIyqB,IAECA,IAAJ,EAECY,EAAgCrrB,SAAhCqrB,EAEQZ,EAAJ,IAEJY,EAAgCrrB,EAAhCqrB,UAKHrT,IAgBD,YAZA,IAAIyS,IAGHY,EAAgCrrB,EAAhCqrB,QAID,CACCrrB,MADD,EAECkqB,MAAQmB,GDyDcre,CAAMmW,EAAD,QDjF5B,eC8ED,GAGOnjB,EAHP,QAGckqB,EAHd,QAOC,KACA,CACC,IAAMqB,EE3GO,SAAcvrB,EAAOkqB,EAAOW,GAE1C,UAEC,gBAGKX,EAAJ,IAGClqB,EAAQA,UAAekqB,EAAflqB,GAA4BA,QAFrC,GAICkqB,KAED,MAED,aAEClqB,EAAQA,aAAwBA,QAAYkqB,EAA5ClqB,GAIF,MAAO,CAAEA,MAAF,EAASkqB,SFqFUsB,CAAKxrB,EAAOkqB,EAArC,GAEAlqB,EAAQurB,EAARvrB,MACAkqB,EAAQqB,EAARrB,MAKD,IAAMuB,EAAY/f,GAAO1L,EAAOkqB,EAAhC,GAEMnH,EAAO0I,EAAb,KACAvB,EAAauB,EApBd,MA0BCtI,QA1BD,EA4BCqH,GAAiBrH,EA5BlB,GAgCCiI,K,skBGhID,SAAS,GAAT,KAQQ,IAPPprB,EAOO,EAPPA,MACAgN,EAMO,EANPA,MACAtB,EAKO,EALPA,OACgBggB,EAIT,EAJPC,eACAtb,EAGO,EAHPA,SACA0C,EAEO,EAFPA,UACG6Y,EACI,yEACDC,EAAcC,oBACdC,EAASC,wBAAY,YAC1BH,YACA,IACC,oBAAWxX,EACVA,KAEAA,eAGA,CATH,IAUM4X,EAAYD,wBAAY,YHE9Bd,GGCEW,EAFmB,iBHCmBnQ,EGDvC,KAOE,CAACmQ,EAAa7e,EAAOtB,EARxB,IAUMwgB,EAAaF,wBAAY,YAI9B,OAHA,GACCjZ,KAEMoZ,GAAe,EAErBN,EAFoB,YAArB,KAOE,CAACA,EAAa7e,EAAOtB,EAAQ2E,EAXhC,IAaA,OACC,8BAECgE,IAFD,EAGCrU,MAAO0L,EAAO0gB,SAAP1gB,GAHR,KAICqH,UAJD,EAKC1C,SAAU4b,MAIbI,GAAQ1U,gBAAR0U,KAEAA,UAAkB,CAEjBrf,MAAO6b,UAFU,WAKjBnd,OAAQmd,UALS,WAQjB8C,eAAgB9C,iBARC,WAWjBjU,KAAMiU,YAXW,WAcjB7oB,MAAO6oB,KAdU,OAiBjBxY,SAAUwY,UAjBO,WAoBjB9V,UAAW8V,KApBM,KAqBjByD,MAAOzD,KArBU,KAsBjB0D,QAAS1D,KAAU2D,MAGpBH,gBAAqB,CAEpBV,eAFoB,QAKpB/W,KAAM,QAGP,UAEA,SAASwX,GAAapsB,GACrB,YAAOA,OAAP,OAA8BA,E,2KC7GVysB,G,WACpB,cAAsD,I,MAAA,OAAxCC,EAAwC,EAAxCA,gBAAiBC,EAAuB,EAAvBA,qB,4FAAuB,S,EAuB7C,YACR,cAAkBjtB,YAAlB,kBAA2C,CAAtC,IAAMmL,EAAG,EAAT,GACJ,KAAY+hB,EAAZ,M,EAzBoD,Y,EAAA,M,sFACrD7qB,KAAA,kBACAA,KAAA,sB,qDAGK4lB,EAAgBC,GACrB7lB,KAAA,iBACAA,KAAA,iBACAA,KAAA,mBACAA,KAAA,mBACAA,KAAA,UACAA,KAAA,iCACAA,KAAA,iC,uDAIAA,KAAA,0BAAiCA,KAAjC,oBACAA,KAAA,yCACAA,KAAA,sBACAA,KAAA,mBACAA,KAAA,sD,gDASyB0O,EAASmO,GAClC7c,KAAA,cACAA,KAAA,oB,iCAGU0O,GACV1O,KAAA,UACAA,KAAA,qB,qCAGc6c,GAEd,OADA7c,KAAA,cACOA,KAAK4qB,oBAAoB5qB,KAAzB,QAAP,K,iDAKAA,KAAA,eAF0B,EAM1BA,KAAA,8B,mCAGY8qB,GACZ9qB,KAAA,Y,4DAGqC8qB,GACrC9qB,KAAA,+B,0CAWA,OAAIA,KAAJ,cACQA,KAAK+qB,OAAOhrB,OACjBC,KAAKgrB,UAAYhrB,KAAKgrB,UAAtB,OAAD,IACChrB,KAAK6c,YAAc7c,KAAK6c,YAAxB,OAFF,IAKM7c,KAAP,S,4DAIA,OAAIA,KAAJ,eACKA,KAAJ,UACQA,KAAK+qB,OAAOhrB,MAAMC,KAAKgrB,UAA9B,QAGKhrB,KAAP,Y,kCCpFWirB,GAAN,IACDC,GAA4B,IAAI7qB,OAAtC,IAqBO,SAASoI,GAAO7G,EAAQupB,GAC9B,GAAIA,EAAJ,EACC,SAGD,IADA,IAAIzS,EAAJ,GACOyS,EAAP,GACC,EAAIA,IACHzS,MAEDyS,MACAvpB,KAED,OAAO8W,EAAP,EAGM,SAAS0S,GAA2BxpB,EAAQypB,GAIlD,MAHA,MAAIzpB,MACHypB,IAmBK,SAA8BzpB,GACpC,IAAM+lB,EAAN,GACIvqB,EAAJ,EACA,KAAOA,EAAIwE,EAAX,QACC,MAAIA,KACH+lB,UAEI,MAAI/lB,MACR+lB,QAEDvqB,IAED,IAAIioB,EAAJ,EACIiG,EAAJ,GACA3D,OAAqB/lB,EAArB+lB,QACA,+BAAqC,CAAhC,IAAM1R,EAAK,EAAX,GACJqV,GAAkB1pB,UAAlB0pB,GACAjG,EAAQpP,EAARoP,EAED,SApCOkG,CAAqB3pB,UAA5B,ICtCc,SAAS4pB,GAAqBhgB,EAAO7B,EAAQ,GAIzD,IAHFyS,EAGE,EAHFA,SACAqP,EAEE,EAFFA,sCACAC,EACE,EADFA,gCAGA,GADgB,IAAIrrB,OAAO,OAAX,OAAkBsJ,EAAlB,UAAhB,OACIgiB,KAAangB,EAAjB,2BACC,OAgBF,SAAwEA,EAAO7B,EAAQ,GAIpF,IAHFyS,EAGE,EAHFA,SACAqP,EAEE,EAFFA,sCACAC,EACE,EADFA,gCASIlgB,EARF,0BAQEA,EARF,cAQEA,EARF,eAQEA,EARF,YAoBF,GAAIigB,EAAJ,GAAmD,CAClD,IAAMtf,EAAkB8V,GAAqBzW,EAAO7B,EAAQ,CAC3DiiB,iCAD2D,EAE3DF,gCAF2D,EAG3DtP,aAED,KACC,SAKF,OAAO6F,GAAqBzW,EAAO7B,EAAQ,CAC1CiiB,iCAD0C,EAE1CF,gCAF0C,EAG1CtP,aAvDOyP,CAA+D,EAAD,EAGpE,CACCzP,SADD,EAECqP,sCAFD,EAGCC,oCAqDJ,SAAS,GAAT,OAIG,IAHFtP,EAGE,EAHFA,SACAwP,EAEE,EAFFA,gCACAF,EACE,EADFA,gCAEII,EAA0BtK,EAC7BhW,EAD4D,4BAG5D,CACCmW,YAAanW,EADd,YAECiW,uBAAwBjW,EAFzB,cAGCkW,mBAHD,EAICtF,aAgBF,GAbA,IACK5Q,EAAJ,eAGCsgB,EAA0BtgB,iBACzBkgB,EADyBlgB,GAA1BsgB,EAGUtgB,EAAJ,+CACNsgB,EAA0BtgB,mDAA1BsgB,IAuCH,SAAwCA,EAAyBtgB,GAChE,OAAOsU,OAAyCtU,EAAhD,oBAnCIugB,CAA+BD,EAAnC,GACC,S,gSC7EF,IAKME,GAA6BvjB,GALnC,IAEA,IAOMwjB,GAAN,OAYMC,GAAwE,oCAOxEC,GAAyE,sCAoCzEC,GAA8B,IAAI/rB,OACvC,+BAWoBgsB,G,WACpB,cAGG,WADFjQ,GACE,EAFF5Q,MAEE,EADF4Q,W,4FACE,oDAyR+B,YAMjC,OAAI,EAAJ,QAOIzS,GACHA,EADGA,gCAEHsiB,QAAwCtiB,EAFzC,gCANC,IAcD,MA9SE,iDAkhBqC,cAA+C,IAApC2iB,EAAoC,EAApCA,cAAezI,EAAqB,EAArBA,eACjE,GAAIla,EAAJ,+BAA2C,CAI1C,IAAM0U,EAAqB1U,EAA3B,qBACA,GAAK0U,GAAD,IACDA,IADH,EAEC,aAzhBFre,KAAA,WACAA,KAAA,c,6DAIAA,KAAA,oBACAA,KAAA,gBACAA,KAAA,8BACAA,KAAA,uCACAA,KAAA,6C,4BAGKud,EAAe/R,GACpBxL,KAAA,cACA,GACCA,KAAA,aAAcud,gBACdvd,KAAA,gBAAuBud,EAAvB,UACI/R,EAAJ,2BACCxL,KAAA,+BAGDA,KAAA,cACAA,KAAA,sB,6BAIK8qB,EAAYtf,GAAO,ID1GauY,EAA2B3H,EC0GxC,OAezB,GDzHsC2H,ECyHVvY,EAAD,0BDzHsC4Q,ECyHJpc,KAA7D,SDxHD,gBAAOmgB,EAAkB4D,EAAlB5D,GCyHL,OAAqBngB,KAArB,wEAA2C,yFAAhC2J,EAAgC,EACpC4iB,EAA0Bf,GAAqB,EAAD,EAGnD,CACCpP,SAAUpc,KADX,SAECyrB,sCAAuC,SAAA9hB,GAAM,OAAI,0CAAmD,CACnG2iB,cAAe9gB,EADoF,cAEnGqY,eAAgBrY,EAAMqY,kBAEvB6H,gCAAiC1rB,KAAK0rB,kCAGxC,KAQC,OAPA1rB,KAAA,cACAA,KAAA,eACAA,KAAA,0BAA+BusB,gBAA/B,OACAvsB,KAAA,gCAJ4B,EAO5BA,KAAA,wCAA+CA,KAAKsnB,SAASkF,YAA7D,IACA,GAOH,OAAOxsB,KAAKysB,mCAAmC3B,EAA/C,K,yDAIkCA,EAAYtf,GAC9C,IAAMkhB,EAAyB1sB,KADsB,aAG/C2sB,EAAoB3sB,KAAK4sB,aAA/B,GACA,KACC,OAAID,IAAJ,EAIQ3sB,KAAK6sB,+BAAZ,GAMO7sB,KAAK6sB,+BAA+BrhB,EAA3C,uB,mDASA,WAHFuY,EAGE,EAHFA,0BACAF,EAEE,EAFFA,eACAyI,EACE,EADFA,cAEMQ,EADJ,EAeEC,EAA4BD,SAxHlC,EAyHMC,EAAJ,IACCA,KAGD/sB,KAAA,gBAAuBA,KAAKgtB,gBAAgBljB,QAC3C,SAAAH,GAAM,OAAI,sBACN,oBADE,MAWH3J,KAAKitB,eAAT,IAAyBjtB,KAAKgtB,gBAAgBhhB,QAAQhM,KAA7B,eACxBA,KAAA,gB,kCAIU2J,EAAQ2iB,EAAezI,GAWlC,QAAIA,IACFla,EADEka,uBAGFla,EAHF,8DAWK2iB,IAAD,GAEH3iB,EAFD,6D,oCAQaA,EAAQmjB,EAAeC,GACpC,IAAMG,EAA6BvjB,0BAD4B,OAI/D,OAAIujB,EACH,SASD,GAAIJ,SA1LN,EA2LG,SAKDC,EAA4BlrB,WAAoCqrB,EAAhEH,GACA,IAAMI,EAAuBxjB,0BArBkC,GAwB/D,OAAO,IAAItJ,OAAO,KAAX,oBAAP,K,sCAGesJ,EAAQ2iB,GACvB,OAAOA,EAAgB3iB,EAAH,sBAAkCA,EAAtD,W,mCAGY6B,GAAO,0HAGR7B,EAHQ,EAMlB,OAAI,iBAAJ,EACC,QAyCIyiB,QAAiC,oBAA6B5gB,EAAnE,gBAGK,4BAAL,IAKA,iBACA,UAJC,kBAAuB,0BAA4B,SAAA3K,GAAC,OAAIA,IAAJ,KACpD,YALA,YA9CF,EAAqBb,KAAKgtB,gBAA1B,+BAHmB,EAGnB,iCAAmD,+BAsDlD,QAtDkD,eAmDjD,UASF,OAJKhtB,KAAL,cAECA,KAAA,cAEMA,KAAP,e,8CAGuB2J,EAAQ6B,GAK/B,KAA0C7B,0BAA1C,IAIA,IAAM2d,EAAWtnB,KAAKotB,qBAAqBzjB,EATL,GAYtC,UACC3J,KAAA,gCACA,QAFD,K,uEA8B0EwY,GAAS,IAAnCwS,EAAmC,EAAnCA,UAAWqC,EAAwB,EAAxBA,YAC3D,SACQ7U,QAAWA,UAAXA,EAAmDwS,EAA1D,IAED,EACC,GAED,M,kCAGWxf,GACX,GAAKxL,KAAL,UASA,IAHA,IAAIiW,GAAJ,EACI7Y,EAAJ,EACMkwB,EAAsB9hB,EAAA,cAAsBxL,KAAKutB,+CAA+C/hB,EAAO,CAAE0L,SAAS,IAAxH,GACO9Z,EAAIkwB,SAA6B9hB,wCAAxC,QACCyK,EAAQjW,KAAKsnB,SAAStb,QAAQif,GAAmBhV,EAAjDA,GACA7Y,IAED,OAAOguB,GAA2BprB,KAAD,SAAgBiW,EAAjD,M,gDAGyBqR,EAAU9b,GACnCxL,KAAA,yBACAA,KAAA,gCAF0C,EAK1CA,KAAA,yCAL0C,EAWtCwL,EAAJ,cACCxL,KAAA,SACCA,KAAKutB,+CAA+C/hB,GAAO3L,QAAQ,UAAWorB,IAC9ExiB,GAAOwiB,GAAmBzf,cAD1B,YADD,EAMAxL,KAAA,a,2CAWmB2J,E,GAKlB,IAJFoa,EAIE,EAJFA,0BACAuI,EAGE,EAHFA,cACAzI,EAEE,EAFFA,eACA2J,EACE,EADFA,6CAEIC,EAAU9jB,EAAd,UAIC8jB,EAAUA,EAAA,QAEAvB,KAFA,eAIAC,KAJVsB,OAeD,IAAI1C,EAASiB,YApBX,GAwBF,KAAIjI,SAAmCgH,EAAvC,SAmCA,IAAM2C,EAAgB,IAAIrtB,OAAO,IAAMotB,EAAvC,KACME,EAA4B5J,gBA1fpC,KA+fM2J,OAAJ,KACC3C,KAGD,IArEE,EAqEE6C,EAAe5tB,KAAK6tB,gBAAgBlkB,EAAxC,GAUA,GAAI3J,KAAKyrB,sCAAsC9hB,EAAQ,CAAE2iB,cAAF,EAAiBzI,mBAAmB,CAC1F,IAAMiK,EAAiCF,YAEtCjkB,EAHyF,gCAa1F,GAAImW,EAAYnW,EAAZmW,mCAAwD+D,GAAD,IAAyB/D,EAApF,QACC8N,IACAG,GAFsG,EAKtG,GAEC,IADA,IAAI3wB,EAAIymB,EAAR,OACOzmB,EAAP,GACCwwB,EAAeA,eAAfA,IACAxwB,IAOJ,IAAIkqB,EAAWyD,EAAA,QAEL,IAAI1qB,OAFC,cAIL,IAAIA,OA9iBhB,IA0iBiB,KA5Gb,IAwIF,OAlBA,IACC,EAECinB,EAAW7e,GAAOwiB,GAAmBuC,EAA1B/kB,YAAX6e,EAGUzD,IAEVyD,EAAW7e,GAAOwiB,GAAmBpH,EAA1Bpb,QACVzI,KAAK0rB,gCADKjjB,GAAX6e,IAMF,IACCA,EAAWhG,EAAXgG,IAGD,K,qDAG8ByD,GAC9B,IAAMrS,EF/gBD,SAAoC4O,EAAU0G,EAAUjD,GAM9D,MAAoBA,QAApB,4DAAsC,yFAA3BhL,EAA2B,EAKrC,GAAIuH,QAAe0G,EAAf1G,cAAJ,EACC,OAED0G,EAAW1G,SAAX0G,IACA1G,EAAWA,aAAXA,GAED,MAAO,CAACA,EAAR,GE8fgB2G,CACdjuB,KADwC,gCAExCA,KAFwC,wCAAzC,GAMA,KAUA,OAJAA,KAAA,gCAAuC0Y,EAAvC,GACA1Y,KAAA,wCAA+C0Y,EAdT,GAiB/B0S,GAA2BprB,KAAD,gCAAuCA,KAAKkuB,wCAjBvC,GASrCluB,KAAA,mB,4lBC5lBH,IAMMmuB,GAAmD,IAAI9tB,OAAO,KALnE,sDAKwD,IAAzD,KAEM+tB,GACL,qHAaKC,GAAwC,IAAIhuB,OACjD,0DAWKiuB,GAAN,YAEqBC,G,WACpB,cAKG,IAJF3I,EAIE,EAJFA,eACAC,EAGE,EAHFA,mBACAzJ,EAEE,EAFFA,SACAoS,EACE,EADFA,mC,4FACE,SACFxuB,KAAA,iBACAA,KAAA,qBACAA,KAAA,WACAA,KAAA,oC,qDAGKghB,EAAMxV,GAAO,IAIlB,EAJkB,EAoab,SAAuCwV,GAAM,SAfpD,SAAwCA,GAEvC,IAAMyN,EA9BP,YAEC,IAOA,EAPMxJ,EAAWjE,SAAjB,IACA,KAAIiE,EAAJ,GAiBA,MAVA,OAHAjE,EAAOA,QAPmC,IAUtCA,KACH0N,KACA1N,EAAOA,QAAW,IAAlBA,SAGDA,EAAOA,aAfmC,IAiB1C,IACCA,EAAO,IAAPA,GAED,EAUwBkE,KAFqB,GAI7C,YAAIuJ,KACI,CAACA,QAAsB,IAAvB,SAAP,GAEM,CAAP,GASiCE,CADkB,MAC9CC,EAD8C,KAC7BF,EAD6B,KAQnD,OAHKP,QAAL,KACCS,MAEM,CAACA,EAAR,GA3aoCC,CADjB,aACXD,EADW,KACMF,EADN,KAEZ3D,EAASjL,EAFG,GAgBlB,OAXA,IACMtU,EAAL,SACCA,6BACA,IACCsjB,QAIH,GACC9uB,KAAA,iBAEM,CACN+qB,OADM,EAEN+D,qB,kCASUhE,EAAYtf,GAAO,IACtBuf,EAAWvf,EADW,OAExBujB,EAAgChE,YAAqBA,SAAgBD,EAAhBC,QAF7B,EAyB9B,GApBAvf,eAL8B,GAqB9B,GACCxL,KAAA,oBAGGA,KAAKgvB,+BAAT,IACC,IAAKhvB,KAAK2lB,0BAAV,GACC,YAGDna,2CAQIA,EAAL,eACMxL,KAAL,uCACCA,KAAA,iCAAsCwL,EAAtC,oBAAiEA,EAAjE,U,wDAK4D,IAA9B8gB,EAA8B,EAA9BA,cAAezP,EAAe,EAAfA,YAC/C,OAAOyP,IAAP,I,gDAKyB9gB,GAAO,MACOma,GACtC,IAAMna,EADyD,sCAE/DxL,KAF+D,eAG/DA,KAH+D,mBAI/DA,KAAKoc,SAL0B,UACxB2F,EADwB,qBACJtC,EADI,SAOhC,KAKC,OAJAjU,oBACAA,SAAa,CACZuY,0BAA2BtE,KAE5B,I,4BAIIlC,GACL,KAAmB,CAClBvd,KAAA,4BACA,IAAMivB,EAA2B1R,EAAjC,4BACAvd,KAAA,qDAA4DivB,GAA4BX,QAAxF,QAEAtuB,KAAA,gCACAA,KAAA,8D,uDAW+BkvB,EAAgBjjB,GAChD,GAAKjM,KAAL,0BAD0D,MAQtDsjB,GAAkD,EAErDtjB,KAVyD,UAKzD6jB,EALyD,iBAMzDzD,EANyD,iBAOzDuB,EAPyD,cAY1D,GAAIvB,IAAJ,EAUA,OAPApgB,KAAA,sCAOA,K,8DAQuCkvB,EAAgBC,EAA+BljB,GACtF,IAAKjM,KAAL,sCACC,OAAOA,KAAKovB,iCAAiCF,EAA7C,GAED,GAAKlvB,KAAL,sDAJgG,MAW5FsjB,GAAkD,EAErDtjB,KAb+F,UAQ/F6jB,EAR+F,iBAS/FzD,EAT+F,iBAU/FuB,EAV+F,cAqBhG,GAAIvB,IAAJ,EAUA,OAPApgB,KAAA,sCAOA,K,gDAIA6jB,EACAlC,EACAoC,EACAmL,EACAjjB,GAEA,MADC,EAIKojB,EAAiCH,cAJtC,GAUD,GAAIG,MACHA,IAAmCH,SAAwBnL,EAD5D,OAC8F,CAC7FuL,GAD6F,EAO7F,IAAM3L,EAA6BuL,UAP0D,GAazFvL,IAAJ,IACC6J,KAGFvhB,EAAS,CACR4X,eADQ,EAERlC,YAFQ,EAGRoC,0BAHQ,EAIRuL,sCAJQ,EAKR9B,iDAIDxtB,KAAA,yCACAA,KAAA,sC,yDAGkCwL,GAkClC,QAAIxL,KAAKuvB,wCACR/jB,EADG,oBAEHA,EAFG,0BAGHA,EAHD,UAqBIxL,KAAKwvB,iBAAT,IAWIxvB,KAAKyvB,eAAT,IAVCzvB,KAAA,mDACA,QASD,K,uCAMgBwL,GAAO,IAItB8gB,EAIG9gB,EARmB,cAKtBwf,EAGGxf,EARmB,UAMtBuf,EAEGvf,EARmB,OASvB,GADIA,EARmB,2BASnB8gB,IAAJ,GAOA,IAAMlI,EAAmBjB,GAAe,EAEvCnjB,KAFsC,eAGtCA,KAHsC,mBAItCA,KAAKoc,SAJN,UAMA,YAAIgI,OAAkCA,IAAtC,GAGC5Y,SAAa,CACZwf,UAAWD,UAAgBA,SAAgB3G,EAAhC2G,UAEZ/qB,KAAA,6BACA,QAPD,K,qCAWcwL,GACd,IAAKA,EAAL,cAA0B,OAIrByY,GACHzY,EADkE,OAElExL,KAFkE,eAGlEA,KAHkE,mBAIlEA,KAAKoc,SARmB,UAEJsT,EAFI,qBAUzB,GAVyB,SAUzB,EAKC,OAJAlkB,SAAa,CACZ6hB,aAAa,IAEdrtB,KAAA,6BACA,K,+CAKsBwL,GACxBA,EAD+B,2BAG3BA,EAAJ,4BACCA,mCACAxL,KAAA,oCACAA,KAAA,gD,qEAI6CwL,GAC1CxL,KAAK2lB,0BAAT,IAOC3lB,KAAA,iCAAsCwL,EAAtC,oBAAiEA,EAAjE,a,s0BCraH,IAEqBmkB,G,WAKpB,iB,4FAA+C,SAC9C3vB,KAAA,SAAgB,IAAImc,EAApB,GAD8C,SAEDnc,KAAK4vB,yBAFJ,MAEvChK,EAFuC,KAEvBC,EAFuB,KAG9C7lB,KAAA,iBACAA,KAAA,qBACAA,KAAA,Q,wEAGwB6vB,GAExB,MAFiD,EAwBjD,OAnBA,IACC,WAAI,OACHjK,EAAiBiK,EAAjBjK,eACAC,EAAqBgK,EAArBhK,oBAEAD,KAGEA,IAAmB5lB,KAAKoc,SAASc,WAArC,KACC0I,UAUM,CAACA,EAAR,K,4BAQK5E,GAAM,MAIPhhB,KAAK8vB,OAAO1O,MAAMJ,EAAMhhB,KAJjB,OAEV+qB,EAFU,SAKX,GALW,kBAMV/qB,KAAA,yBACM,GAAI+qB,EAAQ,CAMlB,MAIA,GATA/qB,KADkB,8BAGdA,KAAKwL,MAAT,2BACCxL,KAAA,oCAAyCA,KAAzC,OAGGA,KAAKoc,SAAT,6BACC0P,EAA0B9rB,KAAK4nB,UAAUje,OAAOohB,EAAQ/qB,KAAxD8rB,aAED,IAAIA,GAEC9rB,KAAK8vB,OAAOC,mCAAmC/vB,KAAnD,OAAgE,CAC/DA,KAD+D,8BAG/D,IAAMkvB,EAAiBlvB,KAAKwL,MAA5B,oBACA,IACCsgB,EAA0B9rB,KAAK4nB,UAAUje,OAAOulB,EAAgBlvB,KAAhE8rB,QAIH9rB,KAAA,gBAAuB8rB,EACpB9rB,KAAKgwB,cADsC,GAE3ChwB,KAFH,wBAID,OAAOA,KAAP,kB,8BAGO,WAgCP,OA/BAA,KAAA,MAAa,IAAI0qB,GAAe,CAC/BC,gBAAiB,YAMhB,aAEDC,oBAAqB,cACpB,oCACA,kBAAqB,WAArB,cAAkD,EAAlD,OACA,eAAkB,WAAlB,kBAGF5qB,KAAA,UAAiB,IAAI,GAAmB,CACvCwL,MAAOxL,KADgC,MAEvCoc,SAAUpc,KAAKoc,WAEhBpc,KAAA,OAAc,IAAI,GAAgB,CACjC4lB,eAAgB5lB,KADiB,eAEjC6lB,mBAAoB7lB,KAFa,mBAGjCoc,SAAUpc,KAHuB,SAIjCwL,MAAOxL,KAJ0B,MAKjCwuB,kCAAmC,WAClC,gCACA,kBAAqB,WAArB,cAAkD,EAAlD,UAGFxuB,KAAA,YAAiBA,KAAjB,eAAsCA,KAAtC,oBACAA,KAAA,mBACA,O,wCASA,OAAOA,KAAKwL,MAAZ,gB,uCAUA,OAAOxL,KAAKwL,MAAZ,c,8CAKA,OAAOxL,KAAP,mB,mCASY,MACgBA,KADhB,MACJ+qB,EADI,SACIrc,EADJ,UAKZ,KAYA,OATA,I,oDA6BK1O,KAAKwL,MAAN,UAAuBxL,KAA3B,iCACCA,KAAA,wB,oCAKY8rB,GAAyB,WACtC,GAAI9rB,KAAJ,kBAA4B,CAC3B,IAAMqN,EAAS,SAAC2T,GAAD,OAAU,2DAA8D,EAA9D,MAA0E,CAClG9J,UAAS8J,IADK,GAGPnE,EAAgB7c,KAJG,kBAK3B,OAMOqN,EANP,EAGA,EAGc,GAAD,qBAAb,GAFC,EAHc,GAAD,OAAIrN,KAAKwL,MAAtB,wCAOF,W,gEAGyC,MAKrCxL,KALqC,MAExC+jB,EAFwC,4BAGxCyJ,EAHwC,+CAIxC3J,EAJwC,iBAMrCpE,EAAJ,EACMpS,EAASmgB,GAAf,EAIA,OAHA,IACC/N,EAASpS,EAAToS,GAED,I,8CAGuB,IACf6P,EAA0CtvB,KAD3B,4CAEvB,OAAOA,KAAKgwB,cACXV,EACGtvB,KADkC,0CAElCA,KAAKwL,MAHT,uB,gDAQA,IAAMiU,EAASzf,KAAf,wBACA,KACC,OAAOyf,oBAAP,M,sDAI8B,IACvB5C,EAAgB7c,KADO,kBAEzB+c,EAAe/c,KAAKoc,SAASU,8BAAnC,GACA,OAAOC,GAAgBA,SAAvB,I,4CAOA/c,KAAA,iBAAsBskB,GACrBtkB,KAAKiwB,kBAAoBjwB,KAAKwL,MAA9B,YAAkDxL,KADN,mBAE5CA,KAAKwL,MAFuC,0BAG5CxL,KAHD,a,kCAaW,MAIPA,KAJO,MAEV+jB,EAFU,4BAGVpC,EAHU,cAKX,GAAI3hB,KAAJ,mBACC,IAAKA,KAAKwL,MAAV,YACC,YAGD,IAAKxL,KAAKwL,MAAN,UAAwBxL,KAA5B,mBACC,OAGF,MAGA,IAAMyJ,EAAczJ,KAApB,aACM6c,EAAc7c,KAAKwe,yBAA2Bxe,KAApD,mBACMijB,EAAc,IAAI,GACvBxZ,GADmB,IAGnBzJ,KAAKoc,SAHN,UASA,OAJA,IACC6G,iBAGD,K,mCASA,IAAMA,EAAcjjB,KAApB,YACA,WAGOijB,EAAP,e,gCASA,IAAMA,EAAcjjB,KAApB,YACA,WAGOijB,EAAP,Y,0CASA,OAAOjjB,KAAKwL,MAAZ,4B,iCAQA,OAAQxL,KAAKwL,MAAM8gB,cAAgB,IAA5B,IAAwCtsB,KAAKwL,MAApD,S,oCAQA,OAAOxL,KAAK4nB,UAAUsI,YAAYlwB,KAA3B,QAA0CA,KAA1C,2BAAP,Q,kCCxVK,SAASmwB,GAAoB,GAKjC,IAJFzhB,EAIE,EAJFA,QACA4d,EAGE,EAHFA,cACA8D,EAEE,EAFFA,uBACAhU,EACE,EADFA,SAEA,OAAO1N,oBACF8P,EAAsB9P,EADpBA,IAAP,GAKM,SAAS2hB,GAAuBpyB,EAAOoP,GAO7C,OANA,GAEC,OADApP,EAAQA,QAAYoP,EAApBpP,SACIA,KACHA,EAAQA,QAARA,IAGF,E,skBCiFcqyB,OA1FR,SAAqBC,GAE3B,gBAMQ,IALP7hB,EAKO,EALPA,QACA4d,EAIO,EAJPA,cACA8D,EAGO,EAHPA,uBACAhU,EAEO,EAFPA,SACGyN,EACI,sEACDlgB,EAASsgB,wBAAY,YAE1B,IAAMrC,EAAY,IAAI,GAAJ,EAAlB,GACMva,EAAS8iB,GAAoB,CAClCzhB,QADkC,EAElC4d,cAFkC,EAGlC8D,uBAHkC,EAIlChU,aAGG4E,EAAO4G,QAAgBva,EAA3B,GACIia,EAAWM,EAAf,cAQA,OAPA,IACC5G,EAAOqP,GAAuBrP,EADnB,GAGX,IACCsG,EAAW+I,GAAuB/I,EAAlCA,KAGK,CACNtG,KADM,EAENsG,cAEC,CAAC5Y,EAvBJ,IAwBA,OACC,+BAEC4D,IAFD,EAGCrH,MAHD,EAICtB,OAAQA,KAiDX,OA7CA6mB,EAAa5a,gBAAb4a,IAEAA,UAAuB,CAWtB9hB,QAASoY,KAXa,OAuBtBwF,cAAexF,KAvBO,KA+BtBsJ,uBAAwBtJ,KA/BF,KAoCtB1K,SAAU0K,YAAiBC,YAG5ByJ,eAA0B,CACzBpU,SAAUmU,GAGX,EAGcD,G,skBCyBAA,OAxHR,YAON,gBASQ,IARPryB,EAQO,EARPA,MACAqQ,EAOO,EAPPA,SACAI,EAMO,EANPA,QACA4d,EAKO,EALPA,cACA8D,EAIO,EAJPA,uBACAhU,EAGO,EAHPA,SACgBkO,EAET,EAFPV,eACGC,EACI,0GACDxc,EAAS8iB,GAAoB,CAClCzhB,QADkC,EAElC4d,cAFkC,EAGlC8D,uBAHkC,EAIlChU,aAGK8N,EAAYD,wBAAY,YAC7B,IAAIwG,EAAWzQ,EAA2B+I,SADF,OASpC0H,IAAJ,IAEC,IAD0B9mB,GAAO0D,EAAQojB,EAAU/hB,EAAnD,GACIgiB,QAA0B3H,SAA1B2H,SAEHD,EAAWA,WAAXA,KAGFniB,OACE,CAACjB,EAAQpP,EAAOqQ,EAAUI,EAjB7B,IAmBA,OACC,8BAEC4D,IAFD,EAGCrU,MAAO0L,GAAO0D,EAAQpP,EAAOyQ,EAH9B,GAICJ,SAAU4b,KAqEb,OAjEAyG,EAAa/a,gBAAb+a,IAEAA,UAAuB,CAQtB1yB,MAAO6oB,YARe,WAatBxY,SAAUwY,UAbY,WAyBtBpY,QAAUoY,KAzBY,OAqCtBwF,cAAexF,KArCO,KA6CtBsJ,uBAAwBtJ,KA7CF,KAkDtB1K,SAAU0K,YAlDY,WAuDtB8C,eAAgB9C,iBAAsBC,YAGvC4J,eAA0B,CACzBvU,SADyB,EAEzBwN,eAAgB,SAGjB,EAGc0G,GAEf,SAAS,GAAT,SACC,OAAOD,GCvHO,SAAqCpyB,EAAOyQ,EAAS0N,GAKnE,OAJA,IACCA,IACA1N,UAEM,IAAI,GAAJ,WAAP,GDmHCkiB,CACCvjB,EAD0B,IADC,GAA7B,G,skBE1Hc,SAAS,GAAT,GAMZ,IALFqB,EAKE,EALFA,QACAmiB,EAIE,EAJFA,YACAC,EAGE,EAHFA,MACAC,EAEE,EAFFA,QACGlH,EACD,kDACF,OAAIiH,GAASA,EAAb,GACQA,EAAA,GAAe,CAAElc,MAAOic,IAG/B,kCAECG,IAFD,EAGCxe,KAAMqe,OAAclX,EAHrB,eAICsX,IAAKF,mCAAiDriB,EAAjDqiB,kB,skBCnBO,SAAS,GAAT,GAAqD,IAAxBG,EAAwB,EAAxBA,YAAgBrH,EAAQ,sBACnE,WAAIqH,EACI,sBAAP,GAEO,sBAAP,GAYF,SAASC,GAAqB,GAAoB,IAAlBvc,EAAkB,EAAlBA,MAAUiV,EAAQ,gBACjD,OACC,kCAECuH,MAFD,6BAGCC,QAAQ,cACR,gCAJD,GAKC,wBACClhB,UADD,mCAECmhB,OAFD,eAGCC,KAHD,OAICC,YAJD,IAKCC,iBAAiB,MACjB,2BAAMC,cAAN,QAA4Bj0B,EAAE,yDAC9B,2BAAMA,EAAE,6DACR,2BAAMk0B,GAAN,KAAcC,GAAd,KAAsBC,GAAtB,KAA8BC,GAAG,OACjC,2BAAMH,GAAN,KAAcC,GAAd,IAAqBC,GAArB,KAA6BC,GAAG,OAChC,2BAAMJ,cAAN,QAA4Bj0B,EAAE,0GAC9B,2BAAMi0B,cAAN,QAA4Bj0B,EAAE,0HAE/B,2BACC0S,UADD,mCAECmhB,OAFD,OAGCC,KAHD,eAIC9zB,EAAE,8LAYN,SAASs0B,GAAqB,GAAoB,IAAlBnd,EAAkB,EAAlBA,MAAUiV,EAAQ,gBACjD,OACC,kCAECuH,MAFD,6BAGCC,QAAQ,cACR,gCAJD,GAKC,wBACClhB,UADD,mCAECmhB,OAFD,eAGCC,KAHD,OAICC,YAJD,IAKCE,cAAc,SACd,2BAAMj0B,EAAE,2CACR,2BAAMA,EAAE,6HACR,2BAAMA,EAAE,mEACR,2BAAMA,EAAE,sEACR,2BAAMk0B,GAAN,OAAgBC,GAAhB,OAA0BC,GAA1B,OAAoCC,GAAG,UACvC,2BAAMH,GAAN,OAAgBC,GAAhB,QAA2BC,GAA3B,QAAsCC,GAAG,WAE1C,2BACC3hB,UADD,mCAECmhB,OAFD,cAGCC,KAHD,eAIC9zB,EAAE,gNCjBC,SAASu0B,GAA4BtjB,EAAS0N,GACpD,QAAIqC,EAAmB/P,EAAvB,KAGCujB,gDACA,GAIK,SAASC,GAAsBzV,EAAWL,GAOhD,OANA,GAEC,KADAK,EAAYA,EAAA,QAAiB,SAAA/N,GAAO,OAAIsjB,GAA4BtjB,EAAhC,OAChC+N,SACHA,UAGF,ECvEM,SAAS0V,GAA2B,GAKxC,IAJFrB,EAIE,EAJFA,MACAC,EAGE,EAHFA,QACeqB,EAEb,EAFFC,cACmBC,EACjB,EADFC,kBAEA,cAIG,IAHF7jB,EAGE,EAHFA,QACA8jB,EAEE,EAFFA,MACAtB,EACE,EADFA,YAKMuB,EAAeH,cAArB,EACA,OACC,0BACCniB,UAAWiF,KAAW,wBAAyB,CAC9C,gCAD8C,IACbqd,EACjC,gCAAiC/jB,KAGjCA,EAEA,sBACCA,QADD,EAECmiB,YAFD,EAGCC,MAHD,EAICC,QAJD,EAKC5gB,UAAU,6BAEX,sBACCyE,MADD,EAECsc,YAFD,EAGC/gB,UAAU,8BAYf,OANAuiB,YAAwB,CACvBhkB,QAASoY,KADc,OAEvB0L,MAAO1L,YAFgB,WAGvBoK,YAAapK,KAAUrH,QAGxB,EH3BD2S,aAA0B,CAGzB1jB,QAASoY,YAHgB,WAMzB+J,YAAa/J,YANY,WAezBgK,MAAOhK,cAAmBA,KAfD,aAmBzBiK,QAASjK,YAAiBC,YClC3BuL,aAA8B,CAC7B1d,MAAOkS,YADsB,WAE7BoK,YAAapK,KAAUrH,QAmCxB0R,aAAiC,CAChCvc,MAAOkS,YAAiBC,YAmCzBgL,aAAiC,CAChCnd,MAAOkS,YAAiBC,YE7BVoL,GAA2B,CAEzCpB,QAFyC,uEAGzCsB,cAHyC,GAIzCE,kBAAmBI,KAJLR,ICnDTS,GAAN,QACe,SAASC,GAAkCnkB,EAAS0N,GAElE,IAAI/O,EAAS,IAAMmR,EAAsB9P,EAFmC,GAU5E,OALA0N,EAAW,IAAID,EAAfC,IACAA,WACIA,iCAA0CwW,QAAwBxW,gBAAtE,mBACC/O,GAAU+O,gBAAV/O,iBAED,EC+FM,SAAS,GAAT,KACN,OAAOqZ,GAA2BzoB,GAAD,GAAjC,GA2BM,SAAS60B,GAA4BC,EAAa,GAKtD,IAJFC,EAIE,EAJFA,YACAC,EAGE,EAHFA,WACA7W,EAEE,EAFFA,SACA8W,EACE,EADFA,kBAIA,MACC,SACC,GAIOL,GAAkCI,EAAzC,GAQF,MAMC,SAAIF,KAAwB,CAG3B,KAeC,WAAIA,UAAoB,IAAMvU,EAAsByU,EAAhDF,IA0YD,SAAiCtT,EAAQ/Q,EAAS0N,GAGxD,KAAa,CACZ,IAAM+W,EAA2B,IAAM3U,EAAsB9P,EADjD,GAIZ,GAAI+Q,SAAgB0T,EAApB,QACC,OAAIA,aACH,cAGD,OAAI1T,aACH,OAAOA,QAAa0T,EAApB,QAOH,cAAmCx1B,YAAYye,EAA/C,sCAAgF,CAA3E,IAAMgX,EAAoB,EAA1B,GACJ,GAAI3T,eAAyC,IAA7C,OACC,OAAOA,QAAa,IAAI7gB,OAASw0B,EAAjC,QAIF,SAnaWC,CAAwBN,EAAaE,EAA5C,GAhBqB,GAgCvB,KAAiB,CAChB,IAAMK,EAAmBT,GAAkCI,EAA3D,GACA,WAAIF,aACH,EAEA,EAGD,IAAMQ,EAAeV,GAAkCI,EADjD,GAIN,WAAIF,aACH,EAKD,QAmBF,SAAIA,KAMH,OAAOS,GAAKT,EAAaC,EAAlBQ,IAAP,GAIF,SAUM,SAASA,GAAK/T,EAAQ/Q,EAAS0N,GACrC,MAIA,SAAIqD,KAAmB,CAEtB,SAAIA,EACH,OAGD,SAID,MAGA,IAAMgU,EAAsCC,GAAmCjU,EAAQ/Q,EAAvF,GACA,SACC,WAAW8P,EAAsB9P,EAAjC,mBADD,IAaM,SAASilB,GAAWlU,EAAQ/Q,EAAS0N,GAC3C,IAAMwX,EAAgCF,GAAmCjU,EAAQ/Q,EAAjF,GACA,KAAmC,CAClC,IAAMmlB,EAAsBD,SAQ9B,SAA4BllB,EAAS0N,GAKpC,OAHAA,EAAW,IAAID,EAAfC,IACAA,QAH8C,GAKvCA,kCAAyCA,yCAAhD,GAboE0X,CAAmBplB,EAAtF,GACA,GAAImlB,EAAJ,EACC,OAAOpU,UAAgBA,SAAvB,GAGF,SAqBM,SAASsU,GAA+BC,EAAmB,GAK/D,IAJFtlB,EAIE,EAJFA,QACA+N,EAGE,EAHFA,UACAwX,EAEE,EAFFA,SACA7X,EACE,EADFA,SAEA,SAAI4X,EAEH,SAGD,IAAME,EAmNA,SAAkEzU,EAAQrD,GAChF,IAAMwL,EAAY,IAAI,GAAJ,KAAlB,GAOA,OANAA,QAF0F,GAQnFA,EAAP,aA3NwBuM,CAAyDH,EAN/E,GAWF,OAAIE,KAAqBzX,GAAcA,cAAvC,GACC,GAKQ/N,MAEP0lB,GAA2BJ,EAAmBtlB,EAF3C,GAOL,OAPK,EA2KN,SAAS2lB,GAA0CjT,EAAO1S,EAAS0N,GAGlE,OAAIgF,UAAcyR,GAAkCnkB,EAAhD0S,IAA2E,CAE9E,IAAMwG,EAAY,IAAI,GAAJ,EAF4D,GAI9EA,QAJ8E,GAM9E,IAAM3E,EAAc2E,EAApB,YACA,SAGQ3E,iCAAP,IAEA,GAID,OAAO7B,gBAAP,IA4BK,SAASkT,GAAen3B,EAAGuC,EAAG60B,GAMnC,OAAItsB,iBAAJ,cACS9K,kBAAP,GAGKA,OAAcA,MAArB,EAiDK,SAASu2B,GAAmCjU,EAAQ/Q,EAAS0N,GAEnE,IAAMwL,EAAY,IAAI,GAAJ,EAF2D,GAI7EA,QAJ6E,GAM7E,IAAM3E,EAAc2E,EAApB,YACA,OAAO3E,GAAeA,EAAtB,eASM,SAASmR,GAA2B3U,EAAQ/Q,EAAS0N,GAG3D,IAFA,IAAMoY,EAAwB3B,GAAkCnkB,EAAhE,GACItR,EAAJ,EACOA,EAAIqiB,EAAJriB,QAAqBA,EAAIo3B,EAAhC,QAA8D,CAC7D,GAAI/U,OAAc+U,EAAlBp3B,GACC,SAEDA,IAED,SAOM,SAASq3B,GAAsB,GAOnC,IANFx2B,EAME,EANFA,MACAglB,EAKE,EALFA,YACA2C,EAIE,EAJFA,eACA0G,EAGE,EAHFA,cACA4G,EAEE,EAFFA,kBACA9W,EACE,EADFA,SAQA,QAAKkQ,OAAD,OAAiErJ,EAArE,QA1hBM,SAAsCA,GAC5C,OAAOA,iCAAP,IA0hBQyR,CAAP,IAKIz2B,GAASquB,GAAd,EACQuG,GAAkCjN,EAAzC,GAED,E,60EC3nBK+O,G,YAGL,cAAmB,O,4FAAA,SAClB,E,wEAAA,0BADkB,oBAFR/e,kBAEQ,wBAkHL,YACb,qBAD2B,IAETtD,EAAQ,EAFC,eAG3B,IACC,oBAAWA,EACVA,KAEAA,gBAzHgB,wCAkKW,YAE7B,OAAO0f,GAA4BtjB,EADd,EADqB,mBAlKxB,4BAwKD,YAAgB,MAM7B,EAN6B,MAEhC4d,EAFgC,gBAGhClQ,EAHgC,WAIhC9N,EAJgC,WAKhCsmB,EALgC,iCAW7B,EAX6B,MAgB3BC,EAAiB/B,GAhBU,cAgBmC,CACnEE,YAjBgC,UAkBhCC,WAFmE,EAGnE7W,SAHmE,EAMnE8W,mBAAoB5G,IAGfmE,EAAW+C,GAAKqB,EAAgB5B,EAzBL,GA4BjC,GACC,2BAQD,WAAc,CACbvkB,QADa,EAEbomB,yBAFa,EAGb/B,YAHa,EAIb90B,MAAOwyB,IAER,WAKCniB,WAxNiB,qBAiOR,YAAkB,MASxB,EATwB,MAE3BsX,EAF2B,iBAG3BtX,EAH2B,WAI3BymB,EAJ2B,yBAK3BzI,EAL2B,gBAM3B0I,EAN2B,iBAO3BC,EAP2B,6BAQ3B7Y,EAR2B,aAexB,EAfwB,MAY3BK,EAZ2B,cDkGvB,SAA6BsW,EAAa,GAW9C,IA0FF,EApGAmC,EAUE,EAVFA,gBACAxmB,EASE,EATFA,QACAkX,EAQE,EARFA,eACAuP,EAOE,EAPFA,gBACAC,EAME,EANFA,cACA3Y,EAKE,EALFA,UACA6P,EAIE,EAJFA,cACA0I,EAGE,EAHFA,eACAC,EAEE,EAFFA,2BACA7Y,EACE,EADFA,SAEA,GAAIkQ,IAAJ,IAAqB2I,EAAsC,CAC1D,IAEuC,EAFjC5nB,EAASwlB,GAAkCnkB,EADS,GAG1D,OAAIqkB,aAqBH,OANIA,GAAJ,MAAmBA,KAElB90B,EADA80B,EAAc1lB,EAAd0lB,EAGAA,IAEM,CACNA,YADM,EAEN90B,MAFM,EAGNyQ,WAsGH,OA5FI4d,aAAJ,MAAyDyG,OACxDA,EAAcsB,GAA0CtB,EAAarkB,EAArEqkB,IAIGA,MAAJ,IACCA,EAAcY,GAAWZ,EAAarkB,EAAtCqkB,KASGA,SAAeA,MAA4BrkB,IAA/C,IACCqkB,EAAc,IAAdA,IAqBIA,GAAemC,GAApB,MAAuCA,OAErCxmB,EADD,OACCA,EAEAA,GAMEqkB,kBAA0CmC,MAA8BA,SAAyB,IAArG,SACCxmB,UAKD,IAGGzQ,EAFF,MAAI80B,KACH,MAAIA,GAEOrkB,GAAJ,IAAemkB,GAAkCnkB,EAAlCmkB,mBADrB50B,EAIAA,EAGOu1B,GAAKT,EAAarkB,EAA1BzQ,IAOF,IACCyQ,EAAUqlB,GAA+B91B,EAAO,CAC/CyQ,QAD+C,EAE/C+N,UAF+C,EAG/CL,cAOGkQ,aAAJ,MAAyDyG,OAGxD90B,EAAQu1B,GAFRT,EAAcsB,GAA0CtB,EAAarkB,EADW,GAGtDA,EAA1BzQ,MAIGyQ,GAAL,IACCA,EAAUkX,GAAkBwP,KAGtB,CACNrC,YADM,EAENrkB,QAFM,EAGNzQ,SC7NIo3B,CAAoBC,EAAc,CACrCJ,gBAtB2B,cAuB3BxmB,QAvB2B,UAwB3BymB,iBAHqC,EAIrCvP,eAJqC,EAKrCwP,cAAe,kBAAM,2BAA8B,CAAE3Y,eACrDA,UANqC,EAOrC6P,cAPqC,EAQrC0I,eARqC,EASrCC,2BATqC,EAUrC7Y,aAbA2W,EAlB2B,cAmB3BrkB,EAnB2B,UAoB3BzQ,EApB2B,QAkCtBs3B,EAAc,CACnBxC,YADmB,EAEnB90B,MAFmB,EAGnByQ,YAGD,IAAIumB,IAUEh3B,GAAS80B,IAAgB,QAA9B,cAECwC,qBAIF,cAMC,kBAAMjnB,EAAN,SA/RiB,qBAoSR,kBAAM,WAAc,CAAEknB,WAAW,OApSzB,oBAuST,kBAAM,WAAc,CAAEA,WAAW,OAvSxB,oBAyST,YACT,aADoB,IAEZlmB,EAAY,EAFA,cAGpB,GACCA,QA7SiB,mBAiTV,YAAW,IACXE,EAAW,EADA,aAEnB,YACA,GACCA,QArTiB,2BAyTF,YAChB,EAD2B,eAGnBimB,EAAuB,EAHJ,yBAI3B,KAAwB,KACfnmB,EAAYmmB,EADG,QAEvB,GACCnmB,SAhUgB,0BAqUH,YACf,EAD0B,cAGlBmmB,EAAuB,EAHL,yBAI1B,KAAwB,KACfjmB,EAAWimB,EADI,OAEvB,GACCjmB,SA5UgB,MAad,EAbc,MAIjBvR,EAJiB,QAMjBquB,GANiB,0BAOjByI,EAPiB,yBAUjBW,EAViB,mCAWjBC,EAXiB,qBAYjBvZ,EAZiB,aAkBd,EAlBc,MAgBjBwJ,EAhBiB,iBAiBjBnJ,EAjBiB,YAqBlB,IACM,8BAAL,KACCmJ,WAKFnJ,EAAYyV,GAAsB,EAAlCzV,GAEA,IAAMwG,EAAc8C,GAAiB,EAArC,GAEA,cAAmBoM,GAA2B,EAA9C,OAEA,IAAMyD,EDzDD,SAA+B,GAQnC,MAPF33B,EAOE,EAPFA,MACAglB,EAME,EANFA,YACA2C,EAKE,EALFA,eACAwP,EAIE,EAJFA,cACA3Y,EAGE,EAHFA,UACAwX,EAEE,EAFFA,SACA7X,EACE,EADFA,SA6BA,OAvBI6G,GAAeA,EAAnB,QAECvU,EAAUuU,EAAVvU,QACUkX,IACL3nB,IAASm2B,GAA2Bn2B,EAAO2nB,EAAhD,KACClX,MAKE+N,GAAaA,aAAjB,IACC/N,WAOIA,GAAWulB,GAAYxX,GAAaA,SAAzC,IACC/N,EAAU0mB,KAIX,ECqB4BS,CAAsB,CAChD53B,MADgD,EAEhDglB,YAFgD,EAGhD2C,eAHgD,EAIhDqO,UAJgD,EAKhDxX,UAAWA,GAAamK,GALwB,GAMhDwO,cAAe,kBAAM,2BAA8B,CAAE3Y,eACrDL,aAzCiB,OA4ClB,QAAa,CAEZzQ,MAAO,EAFK,MAKZ+C,QALY,EAaZ+N,UAbY,EAyBZsW,YAAa0B,GAAsB,CAClCx2B,MADkC,EAElCglB,YAFkC,EAGlC2C,eAHkC,EAIlC0G,cAJkC,EAKlC4G,kBAAmBwC,GALe,aAKqBC,EACvDvZ,aAUDne,SArFiB,E,iTAsVa0N,EAAOH,GACtC,O,kWAAA,EAECG,SCvXY,SAAyDA,EAAOmqB,EAAWtqB,GAAO,IAE/F4Q,EAUGzQ,EAZ4F,SAG/F8Q,EASG9Q,EAZ4F,UAI/EoqB,EAQbpqB,EAZ4F,eAKxF8kB,EAOJ9kB,EAZ4F,MAMxFqqB,EAMJrqB,EAZ4F,MAO/F2gB,EAKG3gB,EAZ4F,cAU/F+pB,EAEG/pB,EAZ4F,iCAW/FgqB,EACGhqB,EAZ4F,mBAe/EsqB,EAGbH,EAlB4F,eAgBxFI,EAEJJ,EAlB4F,MAiBxFK,EACJL,EAlB4F,MAsB/F73B,GAMGuN,EA5B4F,QA4B5FA,EA5B4F,OA2B/FspB,EACGtpB,EA5B4F,wBA8B1F4qB,EAAyB,SAACC,GAAD,OAAgB5B,GAAsB,GAAD,MAEnEnI,cAFmE,EAGnE4G,kBAAmBwC,GAHgD,aAGZC,EACvDvZ,eAcD,GAAI4Z,IAAJ,EACC,MAAO,CACNjD,YAAaqD,EAAuB,CACnCn4B,WADmC,EAEnC2nB,eAAgBmQ,IAEjB93B,WALM,EAMNyQ,QANM,EAONomB,6BAAyBnb,GAgB3B,GAAIoc,IAAJ,EAA8C,CAC7C,IAAMO,GAAgCP,GAAqB/D,GAA4B+D,EAAvF,GACMQ,GAEL,GAKCjK,GAAiBruB,IAAUm4B,EAAuB,CAClDn4B,WADkD,EAElD2nB,eAAgBqQ,IAMlB,IAAKnB,GAA2BwB,IADD7F,GAA/B,EAEC,MAAO,CACN/hB,QADM,EAONqkB,YAAaqD,EAAuB,CACnCn4B,WADmC,EAEnC2nB,eAAgBmQ,IAGjB93B,WAAO0b,GAgBV,GAAI8W,OAA0BA,IAA9B,EAAkD,CACjD,MACA,EAkBA,EAjBA,KAAc,CACbxN,EAAc8C,GAAiB0K,EAA/BxN,GACA,IAAMuT,EAAqBtE,GAAsBzV,EAAjD,GACIwG,GAAeA,EAAnB,UAGMuT,GAAsBA,UAA2BvT,EAA3BuT,UAA3B,KACCC,EAAgBxT,EAAhBwT,SAGDA,EAAgB1C,GAA+BtD,EAAU,CACxD/hB,aADwD,EAExD+N,UAFwD,EAGxDL,aAWH,OANA,IAECsa,EAAgC,CAC/B5B,6BAAyBnb,IAG3B,SAECoZ,YAAaqD,EAAuB,CACnCnT,YADmC,EAEnChlB,MAFmC,EAGnC2nB,eAAgBmQ,IAEjB93B,MAPD,EAQCyQ,QAAS+hB,EAAWgG,EAAgBV,KD+NjCY,CAAgDhrB,EAAOH,EAAR,MAHnD,Q,6CA9PmB,IACXmf,EAAoB3qB,KADT,sBAEb4lB,EAAmB5lB,KAFN,qBAGFkM,EAAoBlM,KAHlB,cAInB,IACC,IACMA,KAAKgyB,4BAAV,KACCpM,WAGE1Z,IAAJ,GACCye,Q,yCAKgBmL,EAAWc,GAAW,IAChCjM,EAAoB3qB,KADY,sBAEhC0O,EAAY1O,KAFoB,cAIpC2qB,GAAmBjc,IAAYkoB,EAAnC,SACCjM,O,iDAgBqC,IA4wBHkM,EAAWC,EA5wBrBra,EAAa,EAAbA,UAAa,EASlCzc,KATkC,MAErCssB,EAFqC,gBAGrC2I,EAHqC,6BAIrC8B,EAJqC,sBAKrChC,EALqC,yBAMrC/N,EANqC,SAOrCuN,EAPqC,UAQrCnY,EARqC,WAUtC,OAkwBmCya,EAlwBA,WAClC,OJvKI,SAA4Bre,EAASwe,GAC3C,MACC,SAED,IAAMC,EAAN,GACMC,EAAN,GACIC,EAAJ,EACA,4DAA6B,yFAAlBzW,EAAkB,EAC5B,MAAIA,EACHyW,OAAc,CAAEhf,SAAS,IACfuI,WAAJ,WAAyBA,EAC/ByW,IACM,WACN,IAAI1tB,OAAW,EAEdA,EADD,iBAAIiX,OACHjX,EAEAA,EAGD,IAAMwM,EAAQuC,EAAA,QAAgBA,EAAA,QAAe,SAAA4e,GAAM,OAAIA,UAAJ,KAR7C,IAUAA,EAAS5e,EAVT,GAYNA,WAZM,GAcN2e,UAdM,GAiBR,OAAOF,mBAAP,GI0ISI,CDlHH,YAQJ,IAPF5a,EAOE,EAPFA,UACA6a,EAME,EANFA,aACAvC,EAKE,EALFA,uBAGAwC,EAEE,EAFFA,sBACgBC,EACd,EADFlD,eAGA,IACCkD,MAID,IAAMC,EAAuBhb,EAAA,KAAc,kBAAc,CACxDxe,MADwD,EAQxDu0B,MAAO8E,MAAyB5oB,MAajC,OATA+oB,QAA0B,qBAAUD,EAAgBr6B,EAAD,MAAUuC,EAAV,MAAzB,MAG1B,GACC+3B,UAA6B,CAC5BjF,MAAO8E,EAAaI,KAItB,EC+EGC,CAAwB,CACvBlb,UAAWA,GAAamK,GADD,GAEvB0Q,aAFuB,EAGvBvC,yBAAyBzI,IAAD,IAAkB2I,IAHnB,EAIvBsC,sBAJuB,IJxIrB,SAAoCK,EAAgBxb,GAC1D,OACCwb,EAAiBA,EAAA,QAAsB,YACtC,UACC,mBACA,QACA,UACA,aACC,SACD,QACC,OAAO5F,GAA4BoF,EAAnC,QAGCQ,OAAJ,EACC,SIiICC,CAA2Bd,EAR5B,KAiwB6CD,EAvvB3C,CAAC,EAAD,MAXH,GAmwBIgB,IAQN,SAAwB36B,EAAGuC,GAC1B,GAAIvC,WAAauC,EAAjB,OACC,SAGD,IADA,IAAItC,EAAJ,EACOA,EAAID,EAAX,QAAqB,CACpB,GAAIA,OAASuC,EAAbtC,GACC,SAEDA,IAED,SAlBE26B,CAAejB,EADjB,MAECkB,GAA2BnB,IAC3BiB,MAED,K,kDApvBwC,IAAbrb,EAAa,EAAbA,UAE1B,OADuBzc,KAAK23B,wBAAwB,CAAElb,cAC/Cmb,GAAP,Q,+BAgMQ,MA8CJ53B,KA9CI,MAGPgH,EAHO,OAIPkH,EAJO,WAKP6E,EALO,eAMPL,EANO,QAOPvC,EAPO,YAWPyZ,GAXO,6BAYPqO,EAZO,mBAaPC,EAbO,aAgBiBC,EAhBjB,yBAiBP1C,EAjBO,qBAoBa2C,EApBb,qBA0BPpR,GA1BO,6DAyCP5K,GAzCO,0PA6CJyN,GA7CI,wiBAqDJ7pB,KArDI,MAiDP0O,EAjDO,UAkDP+N,EAlDO,YAmDPsW,EAnDO,cAoDPyC,EApDO,YAuDF7L,EAAiBuO,EAAa,GAApC,GAEMT,EAAuBz3B,KAAK23B,wBAAwB,CAAElb,cAE5D,OACC,sBACC/J,MADD,EAECvC,UAAWiF,KAAWjF,EAAW,aAAc,CAC9C,oBAAqBqlB,KAItB,yBACCxuB,KAAMA,EAAO,GAAH,yBADX,EAEC,aAAYggB,EAAOtY,SAFpB,GAICzQ,MAJD,EAKCua,QALD,EAMClK,SAAUtO,KANX,gBAOCsP,QAAStP,KAPV,eAQCwP,OAAQxP,KART,cASCkO,SAAUA,GAAaunB,GAAsBA,EAT9C,SAUC4C,cAAer4B,KAAK0yB,eAGrB,yBACCpgB,IAAKtS,KADN,YAEC6S,KAFD,MAGCE,aAAcA,GAHf,KAMC/L,KAND,EAOCoV,SAPD,EAQC1N,QARD,EASCzQ,MAAO80B,GATR,GAUCzkB,SAAUtO,KAVX,SAWCsP,QAAStP,KAXV,QAYCwP,OAAQxP,KAZT,OAaCkO,SAbD,EAcC0b,eAdD,EAeCzZ,UAAWiF,KAAW,kBAErB6iB,GAAoBA,EAFA,UAGpBpO,EAHoB,oB,gCAhcMjU,KAAM0iB,eA2chCC,GAAmB,iBAAiB,qBACzC,+BAA8BC,SAAUlmB,QAGzCimB,aAA6B,CAQ5Bt6B,MAAO6oB,KARqB,OAa5BxY,SAAUwY,UAbkB,WAmB5BxX,QAASwX,KAnBmB,KAyB5BtX,OAAQsX,KAzBoB,KA+B5B9V,UAAW8V,KA/BiB,KAqC5B5Y,SAAU4Y,KArCkB,KA4D5B/T,aAAc+T,YA5Dc,WAkF5B6O,mBAAoB7O,WAAgB,CAlFR,aAsF5B4O,iCAAkC5O,KAtFN,KA+F5BlB,eAAgBkB,KA/FY,OAwG5BrK,UAAWqK,aAAkBA,KAxGD,QAoH5BE,OAAQyR,GApHoB,WAmI5BlE,QAASzN,eAAoB,CAC5BA,KAD4B,OAE5BA,aAAkBA,KArIS,UA+J5BiK,QAASjK,YA/JmB,WAuL5BgK,MAAOhK,cAAmBA,KAvLE,aAmM5BuL,cAAevL,iBAnMa,WAwM5BiO,uBAAwBjO,UAxMI,WAkN5ByL,kBAAmBzL,iBAlNS,WAgO5BiQ,oBAAqBjQ,aAAkBA,KAhOX,QAqO5BpU,MAAOoU,KArOqB,OA0O5B3W,UAAW2W,KA1OiB,OA4P5B4R,uBAAwB5R,iBA5PI,WAmQ5B2O,mBAAoB3O,KAnQQ,OAkR5B8C,eAAgB9C,iBAlRY,WA4R5B6R,mBAAoB7R,iBA5RQ,WAiS5BmR,iBAAkBnR,KAjSU,OA2S5BoR,WAAYpR,UA3SgB,WAkT5BwF,cAAexF,KAlTa,KAwT5BkO,eAAgBlO,UAxTY,WA+T5BmO,2BAA4BnO,UA/TA,WAuU5B1K,SAAUwc,GAvUkB,WAqV5BjO,gBAAiB7D,KArVW,KAgW5B8N,6BAA8B9N,UAAeC,YAG9CwR,gBAAgC,CAI/BxlB,aAJ+B,MAS/Bsf,cAT+B,GAe/BtB,QAf+B,uEAoB/BwB,kBApB+B,GAyB/B3I,eAzB+B,QA8B/B+O,mBA9B+B,MA6C/BE,MAAO/R,KA7CwB,IAsD/BoR,YAtD+B,EA4D/BnD,wBA5D+B,EAkE/BC,gBAlE+B,EAyE/BC,4BAzE+B,EAoF/BL,8BAA8B,GAG/B,IAEA,GACA,GAHA,MEh6BA,SAASkE,GAA2BC,GACnC,OAAO9wB,qBAAqB,OAAe8wB,2BAA3C,I,skBCXc,SAASC,GAAc,GAKnC,IAJF/6B,EAIE,EAJFA,MACAqQ,EAGE,EAHFA,SACAkK,EAEE,EAFFA,QACGqR,EACD,qCACIoP,EAAYhP,wBAAY,YAC7B,IAAMhsB,EAAQ8qB,SAAd,MACAza,EAASrQ,gBAATqQ,KACE,CAHH,IAKuB4qB,oBAAQ,WAC9B,OAAOC,GAAkB3gB,EAAzB,KACE,CAACA,EARF,IAYF,OACC,qCAECva,MAAOA,GAFR,KAGCqQ,SAAU2qB,IACTzgB,EAAA,KAAY,gBAAGva,EAAH,QAAUu0B,EAAV,QAAiBra,EAAjB,iBACZ,6BACCrP,IAAKqP,EAAU,IAAMla,GADtB,KAECA,MAAOka,EAAU,IAAMla,GAFxB,KAGCiQ,WAAUiK,EACVzF,MAAOyF,EAAUihB,QAAgBzf,GALtB,OAahBqf,aAA0B,CAKzB/6B,MAAO6oB,KALkB,OAUzBxY,SAAUwY,UAVe,WAazBtO,QAAS,aAAkB,WAAgB,CAC1Cva,MAAO6oB,KADmC,OAE1C0L,MAAO1L,KAFmC,OAG1C3O,QAAS2O,KAAUuS,QAChBtS,YAGL,IAAMqS,GAAgB,CACrBE,SADqB,MAErBC,gBAFqB,eAGrBC,MAAO,WAGD,SAASC,GAAsB,GASnC,IDrEoC/qB,EC6DtCzQ,EAQE,EARFA,MACAua,EAOE,EAPFA,QACArI,EAME,EANFA,UACeupB,EAKb,EALFrB,cAEgBsB,GAGd,EAJFC,mBAIE,EAHFC,gBACAC,EAEE,EAFFA,aACGjQ,EACD,2GACIkQ,EAAiBb,oBAAQ,WAC9B,OAAOC,GAAkB3gB,EAAzB,KACE,CAACA,EAFJ,IAIA,OACC,0BAAKrI,UAAU,qBACd,+BAEClS,MAFD,EAGCua,QAHD,EAICrI,UAAWiF,KAAW,0BAA2BjF,MAGhD2pB,GAAD,GACA,0BAAK3pB,UAAU,gCDnFX2oB,IAD+BpqB,EC2ErC,GD1EMoqB,IAAyCA,GAA2BpqB,EAA3E,OCyFKorB,GAAF,IACA,sBACCprB,QADD,EAEC8jB,MAAOuH,GAAkBA,EAF1B,MAGC7I,YAAa4I,EAAe,OAAIngB,IAGlC,qBAvBF,OA4CD,SAASwf,GAAkB3gB,EAASva,GACnC,gEAA8B,yFAAnBm5B,EAAmB,EAC7B,IAAKA,EAAD,SAAmBA,UAAvB,EACC,U,iNClHI,SAAS4C,GAAiBzJ,GAChC,IAAM0J,EAAoB,iBAAiB,qBAC1C,0BAAY3nB,IAAKA,GADyB,OAgB3C,OAZA2nB,YAA8B,CAC7B7d,SAAUwc,GADmB,WAE7B5R,OAAQyR,GAFqB,WAG7BC,uBAAwB5R,iBAAsBC,YAG/CkT,eAAiC,CAChC7d,SADgC,EAEhC4K,OAFgC,GAGhC0R,uBAAwBM,IAGzB,ED8EDS,aAAkC,CAEjCpB,cAAevR,KAFkB,YAKjC+S,eAAgB/S,iBALiB,WAQjCgT,aAAchT,KAAUuS,MAGzBI,gBAAqC,CAEpCI,eAAgB,kBAAM,0BAAK1pB,UAAU,mCCxFvB6pB,KClBf,SAAS18B,GAAKmtB,EAAMyP,GACnB,IAAI9T,EAAOtnB,MAAMR,UAAUyB,MAAMzC,KAAK48B,GAEtC,OADA9T,EAAKvnB,KAAKud,GACHqO,EAAKzrB,MAAMgB,KAAMomB,GAGV4T,GAAiB5d,GAkBzB,SAAS+d,KACf,OAAO78B,GAAK88B,GAAwBz7B,a,sHCvC9B,SAAS07B,EAA2BC,GACzC,OAAOC,YAAqB,iBAAkBD,GAErBE,YAAuB,iBAAkB,CAAC,OAAQ,YAA7E,I,OCkBMC,EAAkBjkB,YAAmB,MAAO,GAAI,CACpDxP,KAAM,iBACNszB,KAAM,OACNI,kBAAmB,SAAC/uB,EAAOgL,GACzB,IACEF,EACE9K,EADF8K,WAEF,OAAOG,YAAS,GAAID,EAAOgkB,MAAOlkB,EAAWmkB,gBAAkBjkB,EAAOO,WAPlDV,EASrB,gBACDC,EADC,EACDA,WADC,OAEGG,YAAS,CAEbC,QAAS,OACTgkB,WAAY,SACZC,QAAS,IACPrkB,EAAWmkB,gBAAkB,CAC/B,2BAA4B,CAC1BG,WAAY,QAGVC,EAA2BplB,cAAiB,SAAqBkC,EAASxF,GAC9E,IAAM3G,EAAQqM,YAAc,CAC1BrM,MAAOmM,EACP9Q,KAAM,mBAGR,EAGI2E,EAFFivB,sBADF,SAEEzqB,EACExE,EADFwE,UAEIiI,EAAQC,YAA8B1M,EAAO,CAAC,iBAAkB,cAEhE8K,EAAaG,YAAS,GAAIjL,EAAO,CACrCivB,mBAGIvlB,EAhDkB,SAAAoB,GACxB,IACEpB,EAEEoB,EAFFpB,QAGI4lB,EAAQ,CACZN,KAAM,CAAC,QAFLlkB,EADFmkB,gBAGkC,YAEpC,OAAOM,YAAeD,EAAOZ,EAA4BhlB,GAwCzC8lB,CAAkB1kB,GAClC,OAAoB6B,cAAKmiB,EAAiB7jB,YAAS,CACjDzG,UAAWirB,YAAK/lB,EAAQslB,KAAMxqB,GAC9BsG,WAAYA,EACZnE,IAAKA,GACJ8F,OAoCU4iB","file":"static/js/13.3f0f07c8.chunk.js","sourcesContent":["module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=9)}([function(e,t){e.exports=require(\"react\")},function(e,t,r){var n;\n/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/!function(){\"use strict\";var r={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o=typeof n;if(\"string\"===o||\"number\"===o)e.push(n);else if(Array.isArray(n)&&n.length){var i=a.apply(null,n);i&&e.push(i)}else if(\"object\"===o)for(var u in n)r.call(n,u)&&n[u]&&e.push(u)}}return e.join(\" \")}e.exports?(a.default=a,e.exports=a):void 0===(n=function(){return a}.apply(t,[]))||(e.exports=n)}()},function(e,t,r){(function(t){var r=/^\\s+|\\s+$/g,n=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,o=/^0o[0-7]+$/i,i=parseInt,u=\"object\"==typeof t&&t&&t.Object===Object&&t,c=\"object\"==typeof self&&self&&self.Object===Object&&self,s=u||c||Function(\"return this\")(),l=Object.prototype.toString,f=s.Symbol,d=f?f.prototype:void 0,p=d?d.toString:void 0;function h(e){if(\"string\"==typeof e)return e;if(y(e))return p?p.call(e):\"\";var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}function m(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function y(e){return\"symbol\"==typeof e||function(e){return!!e&&\"object\"==typeof e}(e)&&\"[object Symbol]\"==l.call(e)}function b(e){return e?(e=function(e){if(\"number\"==typeof e)return e;if(y(e))return NaN;if(m(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(r,\"\");var u=a.test(e);return u||o.test(e)?i(e.slice(2),u?2:8):n.test(e)?NaN:+e}(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}e.exports=function(e,t,r){var n,a,o,i;return e=null==(n=e)?\"\":h(n),a=function(e){var t=b(e),r=t%1;return t==t?r?t-r:t:0}(r),o=0,i=e.length,a==a&&(void 0!==i&&(a=a<=i?a:i),void 0!==o&&(a=a>=o?a:o)),r=a,t=h(t),e.slice(r,r+t.length)==t}}).call(this,r(3))},function(e,t){var r;r=function(){return this}();try{r=r||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(r=window)}e.exports=r},function(e,t,r){(function(t){var r=/^\\[object .+?Constructor\\]$/,n=\"object\"==typeof t&&t&&t.Object===Object&&t,a=\"object\"==typeof self&&self&&self.Object===Object&&self,o=n||a||Function(\"return this\")();var i,u=Array.prototype,c=Function.prototype,s=Object.prototype,l=o[\"__core-js_shared__\"],f=(i=/[^.]+$/.exec(l&&l.keys&&l.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+i:\"\",d=c.toString,p=s.hasOwnProperty,h=s.toString,m=RegExp(\"^\"+d.call(p).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),y=u.splice,b=x(o,\"Map\"),g=x(Object,\"create\");function v(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function C(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function _(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function w(e,t){for(var r,n,a=e.length;a--;)if((r=e[a][0])===(n=t)||r!=r&&n!=n)return a;return-1}function S(e){return!(!O(e)||(t=e,f&&f in t))&&(function(e){var t=O(e)?h.call(e):\"\";return\"[object Function]\"==t||\"[object GeneratorFunction]\"==t}(e)||function(e){var t=!1;if(null!=e&&\"function\"!=typeof e.toString)try{t=!!(e+\"\")}catch(e){}return t}(e)?m:r).test(function(e){if(null!=e){try{return d.call(e)}catch(e){}try{return e+\"\"}catch(e){}}return\"\"}(e));var t}function j(e,t){var r,n,a=e.__data__;return(\"string\"==(n=typeof(r=t))||\"number\"==n||\"symbol\"==n||\"boolean\"==n?\"__proto__\"!==r:null===r)?a[\"string\"==typeof t?\"string\":\"hash\"]:a.map}function x(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return S(r)?r:void 0}function N(e,t){if(\"function\"!=typeof e||t&&\"function\"!=typeof t)throw new TypeError(\"Expected a function\");var r=function(){var n=arguments,a=t?t.apply(this,n):n[0],o=r.cache;if(o.has(a))return o.get(a);var i=e.apply(this,n);return r.cache=o.set(a,i),i};return r.cache=new(N.Cache||_),r}function O(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}v.prototype.clear=function(){this.__data__=g?g(null):{}},v.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},v.prototype.get=function(e){var t=this.__data__;if(g){var r=t[e];return\"__lodash_hash_undefined__\"===r?void 0:r}return p.call(t,e)?t[e]:void 0},v.prototype.has=function(e){var t=this.__data__;return g?void 0!==t[e]:p.call(t,e)},v.prototype.set=function(e,t){return this.__data__[e]=g&&void 0===t?\"__lodash_hash_undefined__\":t,this},C.prototype.clear=function(){this.__data__=[]},C.prototype.delete=function(e){var t=this.__data__,r=w(t,e);return!(r<0)&&(r==t.length-1?t.pop():y.call(t,r,1),!0)},C.prototype.get=function(e){var t=this.__data__,r=w(t,e);return r<0?void 0:t[r][1]},C.prototype.has=function(e){return w(this.__data__,e)>-1},C.prototype.set=function(e,t){var r=this.__data__,n=w(r,e);return n<0?r.push([e,t]):r[n][1]=t,this},_.prototype.clear=function(){this.__data__={hash:new v,map:new(b||C),string:new v}},_.prototype.delete=function(e){return j(this,e).delete(e)},_.prototype.get=function(e){return j(this,e).get(e)},_.prototype.has=function(e){return j(this,e).has(e)},_.prototype.set=function(e,t){return j(this,e).set(e,t),this},N.Cache=_,e.exports=N}).call(this,r(3))},function(e,t,r){(function(t){var r=/^\\s+|\\s+$/g,n=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,o=/^0o[0-7]+$/i,i=parseInt,u=\"object\"==typeof t&&t&&t.Object===Object&&t,c=\"object\"==typeof self&&self&&self.Object===Object&&self,s=u||c||Function(\"return this\")(),l=Object.prototype.toString,f=Math.max,d=Math.min,p=function(){return s.Date.now()};function h(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function m(e){if(\"number\"==typeof e)return e;if(function(e){return\"symbol\"==typeof e||function(e){return!!e&&\"object\"==typeof e}(e)&&\"[object Symbol]\"==l.call(e)}(e))return NaN;if(h(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=h(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(r,\"\");var u=a.test(e);return u||o.test(e)?i(e.slice(2),u?2:8):n.test(e)?NaN:+e}e.exports=function(e,t,r){var n,a,o,i,u,c,s=0,l=!1,y=!1,b=!0;if(\"function\"!=typeof e)throw new TypeError(\"Expected a function\");function g(t){var r=n,o=a;return n=a=void 0,s=t,i=e.apply(o,r)}function v(e){return s=e,u=setTimeout(_,t),l?g(e):i}function C(e){var r=e-c;return void 0===c||r>=t||r<0||y&&e-s>=o}function _(){var e=p();if(C(e))return w(e);u=setTimeout(_,function(e){var r=t-(e-c);return y?d(r,o-(e-s)):r}(e))}function w(e){return u=void 0,b&&n?g(e):(n=a=void 0,i)}function S(){var e=p(),r=C(e);if(n=arguments,a=this,c=e,r){if(void 0===u)return v(c);if(y)return u=setTimeout(_,t),g(c)}return void 0===u&&(u=setTimeout(_,t)),i}return t=m(t)||0,h(r)&&(l=!!r.leading,o=(y=\"maxWait\"in r)?f(m(r.maxWait)||0,t):o,b=\"trailing\"in r?!!r.trailing:b),S.cancel=function(){void 0!==u&&clearTimeout(u),s=0,n=c=a=u=void 0},S.flush=function(){return void 0===u?i:w(p())},S}}).call(this,r(3))},function(e,t,r){(function(e,r){var n=\"[object Arguments]\",a=\"[object Map]\",o=\"[object Object]\",i=\"[object Set]\",u=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,c=/^\\w*$/,s=/^\\./,l=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,f=/\\\\(\\\\)?/g,d=/^\\[object .+?Constructor\\]$/,p=/^(?:0|[1-9]\\d*)$/,h={};h[\"[object Float32Array]\"]=h[\"[object Float64Array]\"]=h[\"[object Int8Array]\"]=h[\"[object Int16Array]\"]=h[\"[object Int32Array]\"]=h[\"[object Uint8Array]\"]=h[\"[object Uint8ClampedArray]\"]=h[\"[object Uint16Array]\"]=h[\"[object Uint32Array]\"]=!0,h[n]=h[\"[object Array]\"]=h[\"[object ArrayBuffer]\"]=h[\"[object Boolean]\"]=h[\"[object DataView]\"]=h[\"[object Date]\"]=h[\"[object Error]\"]=h[\"[object Function]\"]=h[a]=h[\"[object Number]\"]=h[o]=h[\"[object RegExp]\"]=h[i]=h[\"[object String]\"]=h[\"[object WeakMap]\"]=!1;var m=\"object\"==typeof e&&e&&e.Object===Object&&e,y=\"object\"==typeof self&&self&&self.Object===Object&&self,b=m||y||Function(\"return this\")(),g=t&&!t.nodeType&&t,v=g&&\"object\"==typeof r&&r&&!r.nodeType&&r,C=v&&v.exports===g&&m.process,_=function(){try{return C&&C.binding(\"util\")}catch(e){}}(),w=_&&_.isTypedArray;function S(e,t,r,n){var a=-1,o=e?e.length:0;for(n&&o&&(r=e[++a]);++a<o;)r=t(r,e[a],a,e);return r}function j(e,t){for(var r=-1,n=e?e.length:0;++r<n;)if(t(e[r],r,e))return!0;return!1}function x(e,t,r,n,a){return a(e,(function(e,a,o){r=n?(n=!1,e):t(r,e,a,o)})),r}function N(e){var t=!1;if(null!=e&&\"function\"!=typeof e.toString)try{t=!!(e+\"\")}catch(e){}return t}function O(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}function k(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}var E,T,I,A=Array.prototype,D=Function.prototype,P=Object.prototype,F=b[\"__core-js_shared__\"],M=(E=/[^.]+$/.exec(F&&F.keys&&F.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+E:\"\",L=D.toString,R=P.hasOwnProperty,z=P.toString,B=RegExp(\"^\"+L.call(R).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),G=b.Symbol,$=b.Uint8Array,V=P.propertyIsEnumerable,K=A.splice,U=(T=Object.keys,I=Object,function(e){return T(I(e))}),q=Ne(b,\"DataView\"),H=Ne(b,\"Map\"),W=Ne(b,\"Promise\"),J=Ne(b,\"Set\"),Z=Ne(b,\"WeakMap\"),Q=Ne(Object,\"create\"),Y=Pe(q),X=Pe(H),ee=Pe(W),te=Pe(J),re=Pe(Z),ne=G?G.prototype:void 0,ae=ne?ne.valueOf:void 0,oe=ne?ne.toString:void 0;function ie(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function ue(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function ce(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function se(e){var t=-1,r=e?e.length:0;for(this.__data__=new ce;++t<r;)this.add(e[t])}function le(e){this.__data__=new ue(e)}function fe(e,t){var r=Re(e)||Le(e)?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],n=r.length,a=!!n;for(var o in e)!t&&!R.call(e,o)||a&&(\"length\"==o||ke(o,n))||r.push(o);return r}function de(e,t){for(var r=e.length;r--;)if(Me(e[r][0],t))return r;return-1}ie.prototype.clear=function(){this.__data__=Q?Q(null):{}},ie.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},ie.prototype.get=function(e){var t=this.__data__;if(Q){var r=t[e];return\"__lodash_hash_undefined__\"===r?void 0:r}return R.call(t,e)?t[e]:void 0},ie.prototype.has=function(e){var t=this.__data__;return Q?void 0!==t[e]:R.call(t,e)},ie.prototype.set=function(e,t){return this.__data__[e]=Q&&void 0===t?\"__lodash_hash_undefined__\":t,this},ue.prototype.clear=function(){this.__data__=[]},ue.prototype.delete=function(e){var t=this.__data__,r=de(t,e);return!(r<0)&&(r==t.length-1?t.pop():K.call(t,r,1),!0)},ue.prototype.get=function(e){var t=this.__data__,r=de(t,e);return r<0?void 0:t[r][1]},ue.prototype.has=function(e){return de(this.__data__,e)>-1},ue.prototype.set=function(e,t){var r=this.__data__,n=de(r,e);return n<0?r.push([e,t]):r[n][1]=t,this},ce.prototype.clear=function(){this.__data__={hash:new ie,map:new(H||ue),string:new ie}},ce.prototype.delete=function(e){return xe(this,e).delete(e)},ce.prototype.get=function(e){return xe(this,e).get(e)},ce.prototype.has=function(e){return xe(this,e).has(e)},ce.prototype.set=function(e,t){return xe(this,e).set(e,t),this},se.prototype.add=se.prototype.push=function(e){return this.__data__.set(e,\"__lodash_hash_undefined__\"),this},se.prototype.has=function(e){return this.__data__.has(e)},le.prototype.clear=function(){this.__data__=new ue},le.prototype.delete=function(e){return this.__data__.delete(e)},le.prototype.get=function(e){return this.__data__.get(e)},le.prototype.has=function(e){return this.__data__.has(e)},le.prototype.set=function(e,t){var r=this.__data__;if(r instanceof ue){var n=r.__data__;if(!H||n.length<199)return n.push([e,t]),this;r=this.__data__=new ce(n)}return r.set(e,t),this};var pe,he,me=(pe=function(e,t){return e&&ye(e,t,qe)},function(e,t){if(null==e)return e;if(!ze(e))return pe(e,t);for(var r=e.length,n=he?r:-1,a=Object(e);(he?n--:++n<r)&&!1!==t(a[n],n,a););return e}),ye=function(e){return function(t,r,n){for(var a=-1,o=Object(t),i=n(t),u=i.length;u--;){var c=i[e?u:++a];if(!1===r(o[c],c,o))break}return t}}();function be(e,t){for(var r=0,n=(t=Ee(t,e)?[t]:Se(t)).length;null!=e&&r<n;)e=e[De(t[r++])];return r&&r==n?e:void 0}function ge(e,t){return null!=e&&t in Object(e)}function ve(e,t,r,u,c){return e===t||(null==e||null==t||!$e(e)&&!Ve(t)?e!=e&&t!=t:function(e,t,r,u,c,s){var l=Re(e),f=Re(t),d=\"[object Array]\",p=\"[object Array]\";l||(d=(d=Oe(e))==n?o:d);f||(p=(p=Oe(t))==n?o:p);var h=d==o&&!N(e),m=p==o&&!N(t),y=d==p;if(y&&!h)return s||(s=new le),l||Ue(e)?je(e,t,r,u,c,s):function(e,t,r,n,o,u,c){switch(r){case\"[object DataView]\":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case\"[object ArrayBuffer]\":return!(e.byteLength!=t.byteLength||!n(new $(e),new $(t)));case\"[object Boolean]\":case\"[object Date]\":case\"[object Number]\":return Me(+e,+t);case\"[object Error]\":return e.name==t.name&&e.message==t.message;case\"[object RegExp]\":case\"[object String]\":return e==t+\"\";case a:var s=O;case i:var l=2&u;if(s||(s=k),e.size!=t.size&&!l)return!1;var f=c.get(e);if(f)return f==t;u|=1,c.set(e,t);var d=je(s(e),s(t),n,o,u,c);return c.delete(e),d;case\"[object Symbol]\":if(ae)return ae.call(e)==ae.call(t)}return!1}(e,t,d,r,u,c,s);if(!(2&c)){var b=h&&R.call(e,\"__wrapped__\"),g=m&&R.call(t,\"__wrapped__\");if(b||g){var v=b?e.value():e,C=g?t.value():t;return s||(s=new le),r(v,C,u,c,s)}}if(!y)return!1;return s||(s=new le),function(e,t,r,n,a,o){var i=2&a,u=qe(e),c=u.length,s=qe(t).length;if(c!=s&&!i)return!1;var l=c;for(;l--;){var f=u[l];if(!(i?f in t:R.call(t,f)))return!1}var d=o.get(e);if(d&&o.get(t))return d==t;var p=!0;o.set(e,t),o.set(t,e);var h=i;for(;++l<c;){f=u[l];var m=e[f],y=t[f];if(n)var b=i?n(y,m,f,t,e,o):n(m,y,f,e,t,o);if(!(void 0===b?m===y||r(m,y,n,a,o):b)){p=!1;break}h||(h=\"constructor\"==f)}if(p&&!h){var g=e.constructor,v=t.constructor;g==v||!(\"constructor\"in e)||!(\"constructor\"in t)||\"function\"==typeof g&&g instanceof g&&\"function\"==typeof v&&v instanceof v||(p=!1)}return o.delete(e),o.delete(t),p}(e,t,r,u,c,s)}(e,t,ve,r,u,c))}function Ce(e){return!(!$e(e)||function(e){return!!M&&M in e}(e))&&(Be(e)||N(e)?B:d).test(Pe(e))}function _e(e){return\"function\"==typeof e?e:null==e?He:\"object\"==typeof e?Re(e)?function(e,t){if(Ee(e)&&Te(t))return Ie(De(e),t);return function(r){var n=function(e,t,r){var n=null==e?void 0:be(e,t);return void 0===n?r:n}(r,e);return void 0===n&&n===t?function(e,t){return null!=e&&function(e,t,r){t=Ee(t,e)?[t]:Se(t);var n,a=-1,o=t.length;for(;++a<o;){var i=De(t[a]);if(!(n=null!=e&&r(e,i)))break;e=e[i]}if(n)return n;return!!(o=e?e.length:0)&&Ge(o)&&ke(i,o)&&(Re(e)||Le(e))}(e,t,ge)}(r,e):ve(t,n,void 0,3)}}(e[0],e[1]):function(e){var t=function(e){var t=qe(e),r=t.length;for(;r--;){var n=t[r],a=e[n];t[r]=[n,a,Te(a)]}return t}(e);if(1==t.length&&t[0][2])return Ie(t[0][0],t[0][1]);return function(r){return r===e||function(e,t,r,n){var a=r.length,o=a,i=!n;if(null==e)return!o;for(e=Object(e);a--;){var u=r[a];if(i&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++a<o;){var c=(u=r[a])[0],s=e[c],l=u[1];if(i&&u[2]){if(void 0===s&&!(c in e))return!1}else{var f=new le;if(n)var d=n(s,l,c,e,t,f);if(!(void 0===d?ve(l,s,n,3,f):d))return!1}}return!0}(r,e,t)}}(e):Ee(t=e)?(r=De(t),function(e){return null==e?void 0:e[r]}):function(e){return function(t){return be(t,e)}}(t);var t,r}function we(e){if(r=(t=e)&&t.constructor,n=\"function\"==typeof r&&r.prototype||P,t!==n)return U(e);var t,r,n,a=[];for(var o in Object(e))R.call(e,o)&&\"constructor\"!=o&&a.push(o);return a}function Se(e){return Re(e)?e:Ae(e)}function je(e,t,r,n,a,o){var i=2&a,u=e.length,c=t.length;if(u!=c&&!(i&&c>u))return!1;var s=o.get(e);if(s&&o.get(t))return s==t;var l=-1,f=!0,d=1&a?new se:void 0;for(o.set(e,t),o.set(t,e);++l<u;){var p=e[l],h=t[l];if(n)var m=i?n(h,p,l,t,e,o):n(p,h,l,e,t,o);if(void 0!==m){if(m)continue;f=!1;break}if(d){if(!j(t,(function(e,t){if(!d.has(t)&&(p===e||r(p,e,n,a,o)))return d.add(t)}))){f=!1;break}}else if(p!==h&&!r(p,h,n,a,o)){f=!1;break}}return o.delete(e),o.delete(t),f}function xe(e,t){var r,n,a=e.__data__;return(\"string\"==(n=typeof(r=t))||\"number\"==n||\"symbol\"==n||\"boolean\"==n?\"__proto__\"!==r:null===r)?a[\"string\"==typeof t?\"string\":\"hash\"]:a.map}function Ne(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return Ce(r)?r:void 0}var Oe=function(e){return z.call(e)};function ke(e,t){return!!(t=null==t?9007199254740991:t)&&(\"number\"==typeof e||p.test(e))&&e>-1&&e%1==0&&e<t}function Ee(e,t){if(Re(e))return!1;var r=typeof e;return!(\"number\"!=r&&\"symbol\"!=r&&\"boolean\"!=r&&null!=e&&!Ke(e))||(c.test(e)||!u.test(e)||null!=t&&e in Object(t))}function Te(e){return e==e&&!$e(e)}function Ie(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}(q&&\"[object DataView]\"!=Oe(new q(new ArrayBuffer(1)))||H&&Oe(new H)!=a||W&&\"[object Promise]\"!=Oe(W.resolve())||J&&Oe(new J)!=i||Z&&\"[object WeakMap]\"!=Oe(new Z))&&(Oe=function(e){var t=z.call(e),r=t==o?e.constructor:void 0,n=r?Pe(r):void 0;if(n)switch(n){case Y:return\"[object DataView]\";case X:return a;case ee:return\"[object Promise]\";case te:return i;case re:return\"[object WeakMap]\"}return t});var Ae=Fe((function(e){var t;e=null==(t=e)?\"\":function(e){if(\"string\"==typeof e)return e;if(Ke(e))return oe?oe.call(e):\"\";var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}(t);var r=[];return s.test(e)&&r.push(\"\"),e.replace(l,(function(e,t,n,a){r.push(n?a.replace(f,\"$1\"):t||e)})),r}));function De(e){if(\"string\"==typeof e||Ke(e))return e;var t=e+\"\";return\"0\"==t&&1/e==-1/0?\"-0\":t}function Pe(e){if(null!=e){try{return L.call(e)}catch(e){}try{return e+\"\"}catch(e){}}return\"\"}function Fe(e,t){if(\"function\"!=typeof e||t&&\"function\"!=typeof t)throw new TypeError(\"Expected a function\");var r=function(){var n=arguments,a=t?t.apply(this,n):n[0],o=r.cache;if(o.has(a))return o.get(a);var i=e.apply(this,n);return r.cache=o.set(a,i),i};return r.cache=new(Fe.Cache||ce),r}function Me(e,t){return e===t||e!=e&&t!=t}function Le(e){return function(e){return Ve(e)&&ze(e)}(e)&&R.call(e,\"callee\")&&(!V.call(e,\"callee\")||z.call(e)==n)}Fe.Cache=ce;var Re=Array.isArray;function ze(e){return null!=e&&Ge(e.length)&&!Be(e)}function Be(e){var t=$e(e)?z.call(e):\"\";return\"[object Function]\"==t||\"[object GeneratorFunction]\"==t}function Ge(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function $e(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function Ve(e){return!!e&&\"object\"==typeof e}function Ke(e){return\"symbol\"==typeof e||Ve(e)&&\"[object Symbol]\"==z.call(e)}var Ue=w?function(e){return function(t){return e(t)}}(w):function(e){return Ve(e)&&Ge(e.length)&&!!h[z.call(e)]};function qe(e){return ze(e)?fe(e):we(e)}function He(e){return e}r.exports=function(e,t,r){var n=Re(e)?S:x,a=arguments.length<3;return n(e,_e(t),r,a,me)}}).call(this,r(3),r(7)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,\"loaded\",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,\"id\",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){String.prototype.padEnd||(String.prototype.padEnd=function(e,t){return e>>=0,t=String(void 0!==t?t:\" \"),this.length>e?String(this):((e-=this.length)>t.length&&(t+=t.repeat(e/t.length)),String(this)+t.slice(0,e))})},function(e,t,r){\"use strict\";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e){if(Symbol.iterator in Object(e)||\"[object Arguments]\"===Object.prototype.toString.call(e))return Array.from(e)}function o(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||a(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")}()}function i(e){if(Array.isArray(e))return e}function u(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}function c(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e){return(l=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}function f(e){return(f=\"function\"==typeof Symbol&&\"symbol\"===l(Symbol.iterator)?function(e){return l(e)}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":l(e)})(e)}function d(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}r.r(t);var m=r(0),y=r.n(m),b=r(5),g=r.n(b),v=r(4),C=r.n(v),_=r(6),w=r.n(_),S=r(2),j=r.n(S),x=r(1),N=r.n(x);r(8);function O(e,t){return i(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(n=(i=u.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==u.return||u.return()}finally{if(a)throw o}}return r}(e,t)||u()}var k=[[\"Afghanistan\",[\"asia\"],\"af\",\"93\"],[\"Albania\",[\"europe\"],\"al\",\"355\"],[\"Algeria\",[\"africa\",\"north-africa\"],\"dz\",\"213\"],[\"Andorra\",[\"europe\"],\"ad\",\"376\"],[\"Angola\",[\"africa\"],\"ao\",\"244\"],[\"Antigua and Barbuda\",[\"america\",\"carribean\"],\"ag\",\"1268\"],[\"Argentina\",[\"america\",\"south-america\"],\"ar\",\"54\",\"(..) ........\",0,[\"11\",\"221\",\"223\",\"261\",\"264\",\"2652\",\"280\",\"2905\",\"291\",\"2920\",\"2966\",\"299\",\"341\",\"342\",\"343\",\"351\",\"376\",\"379\",\"381\",\"3833\",\"385\",\"387\",\"388\"]],[\"Armenia\",[\"asia\",\"ex-ussr\"],\"am\",\"374\"],[\"Aruba\",[\"america\",\"carribean\"],\"aw\",\"297\"],[\"Australia\",[\"oceania\"],\"au\",\"61\",\"(..) .... ....\",0,[\"2\",\"3\",\"4\",\"7\",\"8\",\"02\",\"03\",\"04\",\"07\",\"08\"]],[\"Austria\",[\"europe\",\"eu-union\"],\"at\",\"43\"],[\"Azerbaijan\",[\"asia\",\"ex-ussr\"],\"az\",\"994\",\"(..) ... .. ..\"],[\"Bahamas\",[\"america\",\"carribean\"],\"bs\",\"1242\"],[\"Bahrain\",[\"middle-east\"],\"bh\",\"973\"],[\"Bangladesh\",[\"asia\"],\"bd\",\"880\"],[\"Barbados\",[\"america\",\"carribean\"],\"bb\",\"1246\"],[\"Belarus\",[\"europe\",\"ex-ussr\"],\"by\",\"375\",\"(..) ... .. ..\"],[\"Belgium\",[\"europe\",\"eu-union\"],\"be\",\"32\",\"... .. .. ..\"],[\"Belize\",[\"america\",\"central-america\"],\"bz\",\"501\"],[\"Benin\",[\"africa\"],\"bj\",\"229\"],[\"Bhutan\",[\"asia\"],\"bt\",\"975\"],[\"Bolivia\",[\"america\",\"south-america\"],\"bo\",\"591\"],[\"Bosnia and Herzegovina\",[\"europe\",\"ex-yugos\"],\"ba\",\"387\"],[\"Botswana\",[\"africa\"],\"bw\",\"267\"],[\"Brazil\",[\"america\",\"south-america\"],\"br\",\"55\",\"(..) .........\"],[\"British Indian Ocean Territory\",[\"asia\"],\"io\",\"246\"],[\"Brunei\",[\"asia\"],\"bn\",\"673\"],[\"Bulgaria\",[\"europe\",\"eu-union\"],\"bg\",\"359\"],[\"Burkina Faso\",[\"africa\"],\"bf\",\"226\"],[\"Burundi\",[\"africa\"],\"bi\",\"257\"],[\"Cambodia\",[\"asia\"],\"kh\",\"855\"],[\"Cameroon\",[\"africa\"],\"cm\",\"237\"],[\"Canada\",[\"america\",\"north-america\"],\"ca\",\"1\",\"(...) ...-....\",1,[\"204\",\"226\",\"236\",\"249\",\"250\",\"289\",\"306\",\"343\",\"365\",\"387\",\"403\",\"416\",\"418\",\"431\",\"437\",\"438\",\"450\",\"506\",\"514\",\"519\",\"548\",\"579\",\"581\",\"587\",\"604\",\"613\",\"639\",\"647\",\"672\",\"705\",\"709\",\"742\",\"778\",\"780\",\"782\",\"807\",\"819\",\"825\",\"867\",\"873\",\"902\",\"905\"]],[\"Cape Verde\",[\"africa\"],\"cv\",\"238\"],[\"Caribbean Netherlands\",[\"america\",\"carribean\"],\"bq\",\"599\",\"\",1],[\"Central African Republic\",[\"africa\"],\"cf\",\"236\"],[\"Chad\",[\"africa\"],\"td\",\"235\"],[\"Chile\",[\"america\",\"south-america\"],\"cl\",\"56\"],[\"China\",[\"asia\"],\"cn\",\"86\",\"..-.........\"],[\"Colombia\",[\"america\",\"south-america\"],\"co\",\"57\",\"... ... ....\"],[\"Comoros\",[\"africa\"],\"km\",\"269\"],[\"Congo\",[\"africa\"],\"cd\",\"243\"],[\"Congo\",[\"africa\"],\"cg\",\"242\"],[\"Costa Rica\",[\"america\",\"central-america\"],\"cr\",\"506\",\"....-....\"],[\"Côte d’Ivoire\",[\"africa\"],\"ci\",\"225\",\".. .. .. ..\"],[\"Croatia\",[\"europe\",\"eu-union\",\"ex-yugos\"],\"hr\",\"385\"],[\"Cuba\",[\"america\",\"carribean\"],\"cu\",\"53\"],[\"Curaçao\",[\"america\",\"carribean\"],\"cw\",\"599\",\"\",0],[\"Cyprus\",[\"europe\",\"eu-union\"],\"cy\",\"357\",\".. ......\"],[\"Czech Republic\",[\"europe\",\"eu-union\"],\"cz\",\"420\"],[\"Denmark\",[\"europe\",\"eu-union\",\"baltic\"],\"dk\",\"45\",\".. .. .. ..\"],[\"Djibouti\",[\"africa\"],\"dj\",\"253\"],[\"Dominica\",[\"america\",\"carribean\"],\"dm\",\"1767\"],[\"Dominican Republic\",[\"america\",\"carribean\"],\"do\",\"1\",\"\",2,[\"809\",\"829\",\"849\"]],[\"Ecuador\",[\"america\",\"south-america\"],\"ec\",\"593\"],[\"Egypt\",[\"africa\",\"north-africa\"],\"eg\",\"20\"],[\"El Salvador\",[\"america\",\"central-america\"],\"sv\",\"503\",\"....-....\"],[\"Equatorial Guinea\",[\"africa\"],\"gq\",\"240\"],[\"Eritrea\",[\"africa\"],\"er\",\"291\"],[\"Estonia\",[\"europe\",\"eu-union\",\"ex-ussr\",\"baltic\"],\"ee\",\"372\",\".... ......\"],[\"Ethiopia\",[\"africa\"],\"et\",\"251\"],[\"Fiji\",[\"oceania\"],\"fj\",\"679\"],[\"Finland\",[\"europe\",\"eu-union\",\"baltic\"],\"fi\",\"358\",\".. ... .. ..\"],[\"France\",[\"europe\",\"eu-union\"],\"fr\",\"33\",\". .. .. .. ..\"],[\"French Guiana\",[\"america\",\"south-america\"],\"gf\",\"594\"],[\"French Polynesia\",[\"oceania\"],\"pf\",\"689\"],[\"Gabon\",[\"africa\"],\"ga\",\"241\"],[\"Gambia\",[\"africa\"],\"gm\",\"220\"],[\"Georgia\",[\"asia\",\"ex-ussr\"],\"ge\",\"995\"],[\"Germany\",[\"europe\",\"eu-union\",\"baltic\"],\"de\",\"49\",\".... ........\"],[\"Ghana\",[\"africa\"],\"gh\",\"233\"],[\"Greece\",[\"europe\",\"eu-union\"],\"gr\",\"30\"],[\"Grenada\",[\"america\",\"carribean\"],\"gd\",\"1473\"],[\"Guadeloupe\",[\"america\",\"carribean\"],\"gp\",\"590\",\"\",0],[\"Guam\",[\"oceania\"],\"gu\",\"1671\"],[\"Guatemala\",[\"america\",\"central-america\"],\"gt\",\"502\",\"....-....\"],[\"Guinea\",[\"africa\"],\"gn\",\"224\"],[\"Guinea-Bissau\",[\"africa\"],\"gw\",\"245\"],[\"Guyana\",[\"america\",\"south-america\"],\"gy\",\"592\"],[\"Haiti\",[\"america\",\"carribean\"],\"ht\",\"509\",\"....-....\"],[\"Honduras\",[\"america\",\"central-america\"],\"hn\",\"504\"],[\"Hong Kong\",[\"asia\"],\"hk\",\"852\",\".... ....\"],[\"Hungary\",[\"europe\",\"eu-union\"],\"hu\",\"36\"],[\"Iceland\",[\"europe\"],\"is\",\"354\",\"... ....\"],[\"India\",[\"asia\"],\"in\",\"91\",\".....-.....\"],[\"Indonesia\",[\"asia\"],\"id\",\"62\"],[\"Iran\",[\"middle-east\"],\"ir\",\"98\",\"... ... ....\"],[\"Iraq\",[\"middle-east\"],\"iq\",\"964\"],[\"Ireland\",[\"europe\",\"eu-union\"],\"ie\",\"353\",\".. .......\"],[\"Israel\",[\"middle-east\"],\"il\",\"972\",\"... ... ....\"],[\"Italy\",[\"europe\",\"eu-union\"],\"it\",\"39\",\"... .......\",0],[\"Jamaica\",[\"america\",\"carribean\"],\"jm\",\"1876\"],[\"Japan\",[\"asia\"],\"jp\",\"81\",\".. .... ....\"],[\"Jordan\",[\"middle-east\"],\"jo\",\"962\"],[\"Kazakhstan\",[\"asia\",\"ex-ussr\"],\"kz\",\"7\",\"... ...-..-..\",1,[\"310\",\"311\",\"312\",\"313\",\"315\",\"318\",\"321\",\"324\",\"325\",\"326\",\"327\",\"336\",\"7172\",\"73622\"]],[\"Kenya\",[\"africa\"],\"ke\",\"254\"],[\"Kiribati\",[\"oceania\"],\"ki\",\"686\"],[\"Kosovo\",[\"europe\",\"ex-yugos\"],\"xk\",\"383\"],[\"Kuwait\",[\"middle-east\"],\"kw\",\"965\"],[\"Kyrgyzstan\",[\"asia\",\"ex-ussr\"],\"kg\",\"996\"],[\"Laos\",[\"asia\"],\"la\",\"856\"],[\"Latvia\",[\"europe\",\"eu-union\",\"ex-ussr\",\"baltic\"],\"lv\",\"371\"],[\"Lebanon\",[\"middle-east\"],\"lb\",\"961\"],[\"Lesotho\",[\"africa\"],\"ls\",\"266\"],[\"Liberia\",[\"africa\"],\"lr\",\"231\"],[\"Libya\",[\"africa\",\"north-africa\"],\"ly\",\"218\"],[\"Liechtenstein\",[\"europe\"],\"li\",\"423\"],[\"Lithuania\",[\"europe\",\"eu-union\",\"ex-ussr\",\"baltic\"],\"lt\",\"370\"],[\"Luxembourg\",[\"europe\",\"eu-union\"],\"lu\",\"352\"],[\"Macau\",[\"asia\"],\"mo\",\"853\"],[\"Macedonia\",[\"europe\",\"ex-yugos\"],\"mk\",\"389\"],[\"Madagascar\",[\"africa\"],\"mg\",\"261\"],[\"Malawi\",[\"africa\"],\"mw\",\"265\"],[\"Malaysia\",[\"asia\"],\"my\",\"60\",\"..-....-....\"],[\"Maldives\",[\"asia\"],\"mv\",\"960\"],[\"Mali\",[\"africa\"],\"ml\",\"223\"],[\"Malta\",[\"europe\",\"eu-union\"],\"mt\",\"356\"],[\"Marshall Islands\",[\"oceania\"],\"mh\",\"692\"],[\"Martinique\",[\"america\",\"carribean\"],\"mq\",\"596\"],[\"Mauritania\",[\"africa\"],\"mr\",\"222\"],[\"Mauritius\",[\"africa\"],\"mu\",\"230\"],[\"Mexico\",[\"america\",\"central-america\"],\"mx\",\"52\",\"... ... ....\",0,[\"55\",\"81\",\"33\",\"656\",\"664\",\"998\",\"774\",\"229\"]],[\"Micronesia\",[\"oceania\"],\"fm\",\"691\"],[\"Moldova\",[\"europe\"],\"md\",\"373\",\"(..) ..-..-..\"],[\"Monaco\",[\"europe\"],\"mc\",\"377\"],[\"Mongolia\",[\"asia\"],\"mn\",\"976\"],[\"Montenegro\",[\"europe\",\"ex-yugos\"],\"me\",\"382\"],[\"Morocco\",[\"africa\",\"north-africa\"],\"ma\",\"212\"],[\"Mozambique\",[\"africa\"],\"mz\",\"258\"],[\"Myanmar\",[\"asia\"],\"mm\",\"95\"],[\"Namibia\",[\"africa\"],\"na\",\"264\"],[\"Nauru\",[\"africa\"],\"nr\",\"674\"],[\"Nepal\",[\"asia\"],\"np\",\"977\"],[\"Netherlands\",[\"europe\",\"eu-union\"],\"nl\",\"31\",\".. ........\"],[\"New Caledonia\",[\"oceania\"],\"nc\",\"687\"],[\"New Zealand\",[\"oceania\"],\"nz\",\"64\",\"...-...-....\"],[\"Nicaragua\",[\"america\",\"central-america\"],\"ni\",\"505\"],[\"Niger\",[\"africa\"],\"ne\",\"227\"],[\"Nigeria\",[\"africa\"],\"ng\",\"234\"],[\"North Korea\",[\"asia\"],\"kp\",\"850\"],[\"Norway\",[\"europe\",\"baltic\"],\"no\",\"47\",\"... .. ...\"],[\"Oman\",[\"middle-east\"],\"om\",\"968\"],[\"Pakistan\",[\"asia\"],\"pk\",\"92\",\"...-.......\"],[\"Palau\",[\"oceania\"],\"pw\",\"680\"],[\"Palestine\",[\"middle-east\"],\"ps\",\"970\"],[\"Panama\",[\"america\",\"central-america\"],\"pa\",\"507\"],[\"Papua New Guinea\",[\"oceania\"],\"pg\",\"675\"],[\"Paraguay\",[\"america\",\"south-america\"],\"py\",\"595\"],[\"Peru\",[\"america\",\"south-america\"],\"pe\",\"51\"],[\"Philippines\",[\"asia\"],\"ph\",\"63\",\".... .......\"],[\"Poland\",[\"europe\",\"eu-union\",\"baltic\"],\"pl\",\"48\",\"...-...-...\"],[\"Portugal\",[\"europe\",\"eu-union\"],\"pt\",\"351\"],[\"Puerto Rico\",[\"america\",\"carribean\"],\"pr\",\"1\",\"\",3,[\"787\",\"939\"]],[\"Qatar\",[\"middle-east\"],\"qa\",\"974\"],[\"Réunion\",[\"africa\"],\"re\",\"262\"],[\"Romania\",[\"europe\",\"eu-union\"],\"ro\",\"40\"],[\"Russia\",[\"europe\",\"asia\",\"ex-ussr\",\"baltic\"],\"ru\",\"7\",\"(...) ...-..-..\",0],[\"Rwanda\",[\"africa\"],\"rw\",\"250\"],[\"Saint Kitts and Nevis\",[\"america\",\"carribean\"],\"kn\",\"1869\"],[\"Saint Lucia\",[\"america\",\"carribean\"],\"lc\",\"1758\"],[\"Saint Vincent and the Grenadines\",[\"america\",\"carribean\"],\"vc\",\"1784\"],[\"Samoa\",[\"oceania\"],\"ws\",\"685\"],[\"San Marino\",[\"europe\"],\"sm\",\"378\"],[\"São Tomé and Príncipe\",[\"africa\"],\"st\",\"239\"],[\"Saudi Arabia\",[\"middle-east\"],\"sa\",\"966\"],[\"Senegal\",[\"africa\"],\"sn\",\"221\"],[\"Serbia\",[\"europe\",\"ex-yugos\"],\"rs\",\"381\"],[\"Seychelles\",[\"africa\"],\"sc\",\"248\"],[\"Sierra Leone\",[\"africa\"],\"sl\",\"232\"],[\"Singapore\",[\"asia\"],\"sg\",\"65\",\"....-....\"],[\"Slovakia\",[\"europe\",\"eu-union\"],\"sk\",\"421\"],[\"Slovenia\",[\"europe\",\"eu-union\",\"ex-yugos\"],\"si\",\"386\"],[\"Solomon Islands\",[\"oceania\"],\"sb\",\"677\"],[\"Somalia\",[\"africa\"],\"so\",\"252\"],[\"South Africa\",[\"africa\"],\"za\",\"27\"],[\"South Korea\",[\"asia\"],\"kr\",\"82\",\"... .... ....\"],[\"South Sudan\",[\"africa\",\"north-africa\"],\"ss\",\"211\"],[\"Spain\",[\"europe\",\"eu-union\"],\"es\",\"34\",\"... ... ...\"],[\"Sri Lanka\",[\"asia\"],\"lk\",\"94\"],[\"Sudan\",[\"africa\"],\"sd\",\"249\"],[\"Suriname\",[\"america\",\"south-america\"],\"sr\",\"597\"],[\"Swaziland\",[\"africa\"],\"sz\",\"268\"],[\"Sweden\",[\"europe\",\"eu-union\",\"baltic\"],\"se\",\"46\",\"(...) ...-...\"],[\"Switzerland\",[\"europe\"],\"ch\",\"41\",\".. ... .. ..\"],[\"Syria\",[\"middle-east\"],\"sy\",\"963\"],[\"Taiwan\",[\"asia\"],\"tw\",\"886\"],[\"Tajikistan\",[\"asia\",\"ex-ussr\"],\"tj\",\"992\"],[\"Tanzania\",[\"africa\"],\"tz\",\"255\"],[\"Thailand\",[\"asia\"],\"th\",\"66\"],[\"Timor-Leste\",[\"asia\"],\"tl\",\"670\"],[\"Togo\",[\"africa\"],\"tg\",\"228\"],[\"Tonga\",[\"oceania\"],\"to\",\"676\"],[\"Trinidad and Tobago\",[\"america\",\"carribean\"],\"tt\",\"1868\"],[\"Tunisia\",[\"africa\",\"north-africa\"],\"tn\",\"216\"],[\"Turkey\",[\"europe\"],\"tr\",\"90\",\"... ... .. ..\"],[\"Turkmenistan\",[\"asia\",\"ex-ussr\"],\"tm\",\"993\"],[\"Tuvalu\",[\"asia\"],\"tv\",\"688\"],[\"Uganda\",[\"africa\"],\"ug\",\"256\"],[\"Ukraine\",[\"europe\",\"ex-ussr\"],\"ua\",\"380\",\"(..) ... .. ..\"],[\"United Arab Emirates\",[\"middle-east\"],\"ae\",\"971\"],[\"United Kingdom\",[\"europe\",\"eu-union\"],\"gb\",\"44\",\".... ......\"],[\"United States\",[\"america\",\"north-america\"],\"us\",\"1\",\"(...) ...-....\",0,[\"907\",\"205\",\"251\",\"256\",\"334\",\"479\",\"501\",\"870\",\"480\",\"520\",\"602\",\"623\",\"928\",\"209\",\"213\",\"310\",\"323\",\"408\",\"415\",\"510\",\"530\",\"559\",\"562\",\"619\",\"626\",\"650\",\"661\",\"707\",\"714\",\"760\",\"805\",\"818\",\"831\",\"858\",\"909\",\"916\",\"925\",\"949\",\"951\",\"303\",\"719\",\"970\",\"203\",\"860\",\"202\",\"302\",\"239\",\"305\",\"321\",\"352\",\"386\",\"407\",\"561\",\"727\",\"772\",\"813\",\"850\",\"863\",\"904\",\"941\",\"954\",\"229\",\"404\",\"478\",\"706\",\"770\",\"912\",\"808\",\"319\",\"515\",\"563\",\"641\",\"712\",\"208\",\"217\",\"309\",\"312\",\"618\",\"630\",\"708\",\"773\",\"815\",\"847\",\"219\",\"260\",\"317\",\"574\",\"765\",\"812\",\"316\",\"620\",\"785\",\"913\",\"270\",\"502\",\"606\",\"859\",\"225\",\"318\",\"337\",\"504\",\"985\",\"413\",\"508\",\"617\",\"781\",\"978\",\"301\",\"410\",\"207\",\"231\",\"248\",\"269\",\"313\",\"517\",\"586\",\"616\",\"734\",\"810\",\"906\",\"989\",\"218\",\"320\",\"507\",\"612\",\"651\",\"763\",\"952\",\"314\",\"417\",\"573\",\"636\",\"660\",\"816\",\"228\",\"601\",\"662\",\"406\",\"252\",\"336\",\"704\",\"828\",\"910\",\"919\",\"701\",\"308\",\"402\",\"603\",\"201\",\"609\",\"732\",\"856\",\"908\",\"973\",\"505\",\"575\",\"702\",\"775\",\"212\",\"315\",\"516\",\"518\",\"585\",\"607\",\"631\",\"716\",\"718\",\"845\",\"914\",\"216\",\"330\",\"419\",\"440\",\"513\",\"614\",\"740\",\"937\",\"405\",\"580\",\"918\",\"503\",\"541\",\"215\",\"412\",\"570\",\"610\",\"717\",\"724\",\"814\",\"401\",\"803\",\"843\",\"864\",\"605\",\"423\",\"615\",\"731\",\"865\",\"901\",\"931\",\"210\",\"214\",\"254\",\"281\",\"325\",\"361\",\"409\",\"432\",\"512\",\"713\",\"806\",\"817\",\"830\",\"903\",\"915\",\"936\",\"940\",\"956\",\"972\",\"979\",\"435\",\"801\",\"276\",\"434\",\"540\",\"703\",\"757\",\"804\",\"802\",\"206\",\"253\",\"360\",\"425\",\"509\",\"262\",\"414\",\"608\",\"715\",\"920\",\"304\",\"307\"]],[\"Uruguay\",[\"america\",\"south-america\"],\"uy\",\"598\"],[\"Uzbekistan\",[\"asia\",\"ex-ussr\"],\"uz\",\"998\"],[\"Vanuatu\",[\"oceania\"],\"vu\",\"678\"],[\"Vatican City\",[\"europe\"],\"va\",\"39\",\".. .... ....\",1],[\"Venezuela\",[\"america\",\"south-america\"],\"ve\",\"58\"],[\"Vietnam\",[\"asia\"],\"vn\",\"84\"],[\"Yemen\",[\"middle-east\"],\"ye\",\"967\"],[\"Zambia\",[\"africa\"],\"zm\",\"260\"],[\"Zimbabwe\",[\"africa\"],\"zw\",\"263\"]],E=[[\"American Samoa\",[\"oceania\"],\"as\",\"1684\"],[\"Anguilla\",[\"america\",\"carribean\"],\"ai\",\"1264\"],[\"Bermuda\",[\"america\",\"north-america\"],\"bm\",\"1441\"],[\"British Virgin Islands\",[\"america\",\"carribean\"],\"vg\",\"1284\"],[\"Cayman Islands\",[\"america\",\"carribean\"],\"ky\",\"1345\"],[\"Cook Islands\",[\"oceania\"],\"ck\",\"682\"],[\"Falkland Islands\",[\"america\",\"south-america\"],\"fk\",\"500\"],[\"Faroe Islands\",[\"europe\"],\"fo\",\"298\"],[\"Gibraltar\",[\"europe\"],\"gi\",\"350\"],[\"Greenland\",[\"america\"],\"gl\",\"299\"],[\"Jersey\",[\"europe\",\"eu-union\"],\"je\",\"44\",\".... ......\"],[\"Montserrat\",[\"america\",\"carribean\"],\"ms\",\"1664\"],[\"Niue\",[\"asia\"],\"nu\",\"683\"],[\"Norfolk Island\",[\"oceania\"],\"nf\",\"672\"],[\"Northern Mariana Islands\",[\"oceania\"],\"mp\",\"1670\"],[\"Saint Barthélemy\",[\"america\",\"carribean\"],\"bl\",\"590\",\"\",1],[\"Saint Helena\",[\"africa\"],\"sh\",\"290\"],[\"Saint Martin\",[\"america\",\"carribean\"],\"mf\",\"590\",\"\",2],[\"Saint Pierre and Miquelon\",[\"america\",\"north-america\"],\"pm\",\"508\"],[\"Sint Maarten\",[\"america\",\"carribean\"],\"sx\",\"1721\"],[\"Tokelau\",[\"oceania\"],\"tk\",\"690\"],[\"Turks and Caicos Islands\",[\"america\",\"carribean\"],\"tc\",\"1649\"],[\"U.S. Virgin Islands\",[\"america\",\"carribean\"],\"vi\",\"1340\"],[\"Wallis and Futuna\",[\"oceania\"],\"wf\",\"681\"]];function T(e,t,r,n,a){return!r||a?e+\"\".padEnd(t.length,\".\")+\" \"+n:e+\"\".padEnd(t.length,\".\")+\" \"+r}function I(e,t,r,a,i){var u,c,s=[];return c=!0===t,[(u=[]).concat.apply(u,o(e.map((function(e){var o={name:e[0],regions:e[1],iso2:e[2],countryCode:e[3],dialCode:e[3],format:T(r,e[3],e[4],a,i),priority:e[5]||0},u=[];return e[6]&&e[6].map((function(t){var r=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},a=Object.keys(r);\"function\"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),a.forEach((function(t){n(e,t,r[t])}))}return e}({},o);r.dialCode=e[3]+t,r.isAreaCode=!0,r.areaCodeLength=t.length,u.push(r)})),u.length>0?(o.mainCode=!0,c||\"Array\"===t.constructor.name&&t.includes(e[2])?(o.hasAreaCodes=!0,[o].concat(u)):(s=s.concat(u),[o])):[o]})))),s]}function A(e,t,r,n){if(null!==r){var a=Object.keys(r),o=Object.values(r);a.forEach((function(r,a){if(n)return e.push([r,o[a]]);var i=e.findIndex((function(e){return e[0]===r}));if(-1===i){var u=[r];u[t]=o[a],e.push(u)}else e[i][t]=o[a]}))}}function D(e,t){return 0===t.length?e:e.map((function(e){var r=t.findIndex((function(t){return t[0]===e[2]}));if(-1===r)return e;var n=t[r];return n[1]&&(e[4]=n[1]),n[3]&&(e[5]=n[3]),n[2]&&(e[6]=n[2]),e}))}var P=function e(t,r,n,a,i,u,s,l,f,d,p,h,m,y){c(this,e),this.filterRegions=function(e,t){if(\"string\"==typeof e){var r=e;return t.filter((function(e){return e.regions.some((function(e){return e===r}))}))}return t.filter((function(t){return e.map((function(e){return t.regions.some((function(t){return t===e}))})).some((function(e){return e}))}))},this.sortTerritories=function(e,t){var r=[].concat(o(e),o(t));return r.sort((function(e,t){return e.name<t.name?-1:e.name>t.name?1:0})),r},this.getFilteredCountryList=function(e,t,r){return 0===e.length?t:r?e.map((function(e){var r=t.find((function(t){return t.iso2===e}));if(r)return r})).filter((function(e){return e})):t.filter((function(t){return e.some((function(e){return e===t.iso2}))}))},this.localizeCountries=function(e,t,r){for(var n=0;n<e.length;n++)void 0!==t[e[n].iso2]?e[n].localName=t[e[n].iso2]:void 0!==t[e[n].name]&&(e[n].localName=t[e[n].name]);return r||e.sort((function(e,t){return e.localName<t.localName?-1:e.localName>t.localName?1:0})),e},this.getCustomAreas=function(e,t){for(var r=[],n=0;n<t.length;n++){var a=JSON.parse(JSON.stringify(e));a.dialCode+=t[n],r.push(a)}return r},this.excludeCountries=function(e,t){return 0===t.length?e:e.filter((function(e){return!t.includes(e.iso2)}))};var b=function(e,t,r){var n=[];return A(n,1,e,!0),A(n,3,t),A(n,2,r),n}(l,f,d),g=D(JSON.parse(JSON.stringify(k)),b),v=D(JSON.parse(JSON.stringify(E)),b),C=O(I(g,t,h,m,y),2),_=C[0],w=C[1];if(r){var S=O(I(v,t,h,m,y),2),j=S[0];S[1];_=this.sortTerritories(j,_)}n&&(_=this.filterRegions(n,_)),this.onlyCountries=this.localizeCountries(this.excludeCountries(this.getFilteredCountryList(a,_,s.includes(\"onlyCountries\")),u),p,s.includes(\"onlyCountries\")),this.preferredCountries=0===i.length?[]:this.localizeCountries(this.getFilteredCountryList(i,_,s.includes(\"preferredCountries\")),p,s.includes(\"preferredCountries\")),this.hiddenAreaCodes=this.excludeCountries(this.getFilteredCountryList(a,w),u)},F=function(e){function t(e){var r;c(this,t),(r=function(e,t){return!t||\"object\"!==f(t)&&\"function\"!=typeof t?d(e):t}(this,p(t).call(this,e))).getProbableCandidate=C()((function(e){return e&&0!==e.length?r.state.onlyCountries.filter((function(t){return j()(t.name.toLowerCase(),e.toLowerCase())}),d(d(r)))[0]:null})),r.guessSelectedCountry=C()((function(e,t,n,a){var o;if(!1===r.props.enableAreaCodes&&(a.some((function(t){if(j()(e,t.dialCode))return n.some((function(e){if(t.iso2===e.iso2&&e.mainCode)return o=e,!0})),!0})),o))return o;var i=n.find((function(e){return e.iso2==t}));if(\"\"===e.trim())return i;var u=n.reduce((function(t,r){if(j()(e,r.dialCode)){if(r.dialCode.length>t.dialCode.length)return r;if(r.dialCode.length===t.dialCode.length&&r.priority<t.priority)return r}return t}),{dialCode:\"\",priority:10001},d(d(r)));return u.name?u:i})),r.updateCountry=function(e){var t,n=r.state.onlyCountries;(t=e.indexOf(0)>=\"0\"&&e.indexOf(0)<=\"9\"?n.find((function(t){return t.dialCode==+e})):n.find((function(t){return t.iso2==e})))&&t.dialCode&&r.setState({selectedCountry:t,formattedNumber:r.props.disableCountryCode?\"\":r.formatNumber(t.dialCode,t)})},r.scrollTo=function(e,t){if(e){var n=r.dropdownRef;if(n&&document.body){var a=n.offsetHeight,o=n.getBoundingClientRect().top+document.body.scrollTop,i=o+a,u=e,c=u.getBoundingClientRect(),s=u.offsetHeight,l=c.top+document.body.scrollTop,f=l+s,d=l-o+n.scrollTop,p=a/2-s/2;if(r.props.enableSearch?l<o+32:l<o)t&&(d-=p),n.scrollTop=d;else if(f>i){t&&(d+=p);var h=a-s;n.scrollTop=d-h}}}},r.scrollToTop=function(){var e=r.dropdownRef;e&&document.body&&(e.scrollTop=0)},r.formatNumber=function(e,t){if(!t)return e;var n,o=t.format,c=r.props,s=c.disableCountryCode,l=c.enableAreaCodeStretch,f=c.enableLongNumbers,d=c.autoFormat;if(s?((n=o.split(\" \")).shift(),n=n.join(\" \")):l&&t.isAreaCode?((n=o.split(\" \"))[1]=n[1].replace(/\\.+/,\"\".padEnd(t.areaCodeLength,\".\")),n=n.join(\" \")):n=o,!e||0===e.length)return s?\"\":r.props.prefix;if(e&&e.length<2||!n||!d)return s?e:r.props.prefix+e;var p,h=w()(n,(function(e,t){if(0===e.remainingText.length)return e;if(\".\"!==t)return{formattedText:e.formattedText+t,remainingText:e.remainingText};var r,n=i(r=e.remainingText)||a(r)||u(),o=n[0],c=n.slice(1);return{formattedText:e.formattedText+o,remainingText:c}}),{formattedText:\"\",remainingText:e.split(\"\")});return(p=f?h.formattedText+h.remainingText.join(\"\"):h.formattedText).includes(\"(\")&&!p.includes(\")\")&&(p+=\")\"),p},r.cursorToEnd=function(){var e=r.numberInputRef;e.focus();var t=e.value.length;\")\"===e.value.charAt(t-1)&&(t-=1),e.setSelectionRange(t,t)},r.getElement=function(e){return r[\"flag_no_\".concat(e)]},r.getCountryData=function(){return r.state.selectedCountry?{name:r.state.selectedCountry.name||\"\",dialCode:r.state.selectedCountry.dialCode||\"\",countryCode:r.state.selectedCountry.iso2||\"\",format:r.state.selectedCountry.format||\"\"}:{}},r.handleFlagDropdownClick=function(e){if(e.preventDefault(),r.state.showDropdown||!r.props.disabled){var t=r.state,n=t.preferredCountries,a=t.selectedCountry,o=n.concat(r.state.onlyCountries).findIndex((function(e){return e.dialCode===a.dialCode&&e.iso2===a.iso2}));r.setState({showDropdown:!r.state.showDropdown,highlightCountryIndex:o},(function(){r.state.showDropdown&&r.scrollTo(r.getElement(r.state.highlightCountryIndex))}))}},r.handleInput=function(e){var t=e.target.value,n=r.props,a=n.prefix,o=n.onChange,i=r.props.disableCountryCode?\"\":a,u=r.state.selectedCountry,c=r.state.freezeSelection;if(!r.props.countryCodeEditable){var s=a+(u.hasAreaCodes?r.state.onlyCountries.find((function(e){return e.iso2===u.iso2&&e.mainCode})).dialCode:u.dialCode);if(t.slice(0,s.length)!==s)return}if(t===a)return o&&o(\"\",r.getCountryData(),e,\"\"),r.setState({formattedNumber:\"\"});if(t.replace(/\\D/g,\"\").length>15){if(!1===r.props.enableLongNumbers)return;if(\"number\"==typeof r.props.enableLongNumbers&&t.replace(/\\D/g,\"\").length>r.props.enableLongNumbers)return}if(t!==r.state.formattedNumber){e.preventDefault?e.preventDefault():e.returnValue=!1;var l=r.props.country,f=r.state,d=f.onlyCountries,p=f.selectedCountry,h=f.hiddenAreaCodes;if(o&&e.persist(),t.length>0){var m=t.replace(/\\D/g,\"\");(!r.state.freezeSelection||p.dialCode.length>m.length)&&(u=r.props.disableCountryGuess?p:r.guessSelectedCountry(m.substring(0,6),l,d,h)||p,c=!1),i=r.formatNumber(m,u),u=u.dialCode?u:p}var y=e.target.selectionStart,b=r.state.formattedNumber,g=i.length-b.length;r.setState({formattedNumber:i,freezeSelection:c,selectedCountry:u},(function(){g>0&&(y-=g),\")\"==i.charAt(i.length-1)?r.numberInputRef.setSelectionRange(i.length-1,i.length-1):y>0&&b.length>=i.length&&r.numberInputRef.setSelectionRange(y,y),o&&o(i.replace(/[^0-9]+/g,\"\"),r.getCountryData(),e,i)}))}},r.handleInputClick=function(e){r.setState({showDropdown:!1}),r.props.onClick&&r.props.onClick(e,r.getCountryData())},r.handleDoubleClick=function(e){var t=e.target.value.length;e.target.setSelectionRange(0,t)},r.handleFlagItemClick=function(e,t){var n=r.state.selectedCountry,a=r.state.onlyCountries.find((function(t){return t==e}));if(a){var o=r.state.formattedNumber.replace(\" \",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\"-\",\"\"),i=o.length>1?o.replace(n.dialCode,a.dialCode):a.dialCode,u=r.formatNumber(i.replace(/\\D/g,\"\"),a);r.setState({showDropdown:!1,selectedCountry:a,freezeSelection:!0,formattedNumber:u},(function(){r.cursorToEnd(),r.props.onChange&&r.props.onChange(u.replace(/[^0-9]+/g,\"\"),r.getCountryData(),t,u)}))}},r.handleInputFocus=function(e){r.numberInputRef&&r.numberInputRef.value===r.props.prefix&&r.state.selectedCountry&&!r.props.disableCountryCode&&r.setState({formattedNumber:r.props.prefix+r.state.selectedCountry.dialCode},(function(){r.props.jumpCursorToEnd&&setTimeout(r.cursorToEnd,0)})),r.setState({placeholder:\"\"}),r.props.onFocus&&r.props.onFocus(e,r.getCountryData()),r.props.jumpCursorToEnd&&setTimeout(r.cursorToEnd,0)},r.handleInputBlur=function(e){e.target.value||r.setState({placeholder:r.props.placeholder}),r.props.onBlur&&r.props.onBlur(e,r.getCountryData())},r.handleInputCopy=function(e){if(r.props.copyNumbersOnly){var t=window.getSelection().toString().replace(/[^0-9]+/g,\"\");e.clipboardData.setData(\"text/plain\",t),e.preventDefault()}},r.getHighlightCountryIndex=function(e){var t=r.state.highlightCountryIndex+e;return t<0||t>=r.state.onlyCountries.length+r.state.preferredCountries.length?t-e:r.props.enableSearch&&t>r.getSearchFilteredCountries().length?0:t},r.searchCountry=function(){var e=r.getProbableCandidate(r.state.queryString)||r.state.onlyCountries[0],t=r.state.onlyCountries.findIndex((function(t){return t==e}))+r.state.preferredCountries.length;r.scrollTo(r.getElement(t),!0),r.setState({queryString:\"\",highlightCountryIndex:t})},r.handleKeydown=function(e){var t=r.props.keys,n=e.target.className;if(n.includes(\"selected-flag\")&&e.which===t.ENTER&&!r.state.showDropdown)return r.handleFlagDropdownClick(e);if(n.includes(\"form-control\")&&(e.which===t.ENTER||e.which===t.ESC))return e.target.blur();if(r.state.showDropdown&&!r.props.disabled&&(!n.includes(\"search-box\")||e.which===t.UP||e.which===t.DOWN||e.which===t.ENTER||e.which===t.ESC&&\"\"===e.target.value)){e.preventDefault?e.preventDefault():e.returnValue=!1;var a=function(e){r.setState({highlightCountryIndex:r.getHighlightCountryIndex(e)},(function(){r.scrollTo(r.getElement(r.state.highlightCountryIndex),!0)}))};switch(e.which){case t.DOWN:a(1);break;case t.UP:a(-1);break;case t.ENTER:r.props.enableSearch?r.handleFlagItemClick(r.getSearchFilteredCountries()[r.state.highlightCountryIndex]||r.getSearchFilteredCountries()[0],e):r.handleFlagItemClick([].concat(o(r.state.preferredCountries),o(r.state.onlyCountries))[r.state.highlightCountryIndex],e);break;case t.ESC:case t.TAB:r.setState({showDropdown:!1},r.cursorToEnd);break;default:(e.which>=t.A&&e.which<=t.Z||e.which===t.SPACE)&&r.setState({queryString:r.state.queryString+String.fromCharCode(e.which)},r.state.debouncedQueryStingSearcher)}}},r.handleInputKeyDown=function(e){var t=r.props,n=t.keys,a=t.onEnterKeyPress,o=t.onKeyDown;e.which===n.ENTER&&a&&a(e),o&&o(e)},r.handleClickOutside=function(e){r.dropdownRef&&!r.dropdownContainerRef.contains(e.target)&&r.state.showDropdown&&r.setState({showDropdown:!1})},r.handleSearchChange=function(e){var t=e.currentTarget.value,n=r.state,a=n.preferredCountries,o=n.selectedCountry,i=0;if(\"\"===t&&o){var u=r.state.onlyCountries;i=a.concat(u).findIndex((function(e){return e==o})),setTimeout((function(){return r.scrollTo(r.getElement(i))}),100)}r.setState({searchValue:t,highlightCountryIndex:i})},r.getDropdownCountryName=function(e){return e.localName||e.name},r.getSearchFilteredCountries=function(){var e=r.state,t=e.preferredCountries,n=e.onlyCountries,a=e.searchValue,i=r.props.enableSearch,u=t.concat(n),c=a.trim().toLowerCase();if(i&&c){if(/^\\d+$/.test(c))return u.filter((function(e){var t=e.dialCode;return[\"\".concat(t)].some((function(e){return e.toLowerCase().includes(c)}))}));var s=u.filter((function(e){var t=e.iso2;return[\"\".concat(t)].some((function(e){return e.toLowerCase().includes(c)}))})),l=u.filter((function(e){var t=e.name,r=e.localName;e.iso2;return[\"\".concat(t),\"\".concat(r||\"\")].some((function(e){return e.toLowerCase().includes(c)}))}));return r.scrollToTop(),o(new Set([].concat(s,l)))}return u},r.getCountryDropdownList=function(){var e,t=r.state,a=t.preferredCountries,o=t.highlightCountryIndex,i=t.showDropdown,u=t.searchValue,c=r.props,s=c.disableDropdown,l=c.prefix,f=r.props,d=f.enableSearch,p=f.searchNotFound,h=f.disableSearchIcon,m=f.searchClass,b=f.searchStyle,g=f.searchPlaceholder,v=f.autocompleteSearch,C=r.getSearchFilteredCountries().map((function(e,t){var n=o===t,a=N()({country:!0,preferred:\"us\"===e.iso2||\"gb\"===e.iso2,active:\"us\"===e.iso2,highlight:n}),i=\"flag \".concat(e.iso2);return y.a.createElement(\"li\",Object.assign({ref:function(e){return r[\"flag_no_\".concat(t)]=e},key:\"flag_no_\".concat(t),\"data-flag-key\":\"flag_no_\".concat(t),className:a,\"data-dial-code\":\"1\",tabIndex:s?\"-1\":\"0\",\"data-country-code\":e.iso2,onClick:function(t){return r.handleFlagItemClick(e,t)},role:\"option\"},n?{\"aria-selected\":!0}:{}),y.a.createElement(\"div\",{className:i}),y.a.createElement(\"span\",{className:\"country-name\"},r.getDropdownCountryName(e)),y.a.createElement(\"span\",{className:\"dial-code\"},e.format?r.formatNumber(e.dialCode,e):l+e.dialCode))})),_=y.a.createElement(\"li\",{key:\"dashes\",className:\"divider\"});a.length>0&&(!d||d&&!u.trim())&&C.splice(a.length,0,_);var w=N()((n(e={},r.props.dropdownClass,!0),n(e,\"country-list\",!0),n(e,\"hide\",!i),e));return y.a.createElement(\"ul\",{ref:function(e){return!d&&e&&e.focus(),r.dropdownRef=e},className:w,style:r.props.dropdownStyle,role:\"listbox\",tabIndex:\"0\"},d&&y.a.createElement(\"li\",{className:N()(n({search:!0},m,m))},!h&&y.a.createElement(\"span\",{className:N()(n({\"search-emoji\":!0},\"\".concat(m,\"-emoji\"),m)),role:\"img\",\"aria-label\":\"Magnifying glass\"},\"🔎\"),y.a.createElement(\"input\",{className:N()(n({\"search-box\":!0},\"\".concat(m,\"-box\"),m)),style:b,type:\"search\",placeholder:g,autoFocus:!0,autoComplete:v?\"on\":\"off\",value:u,onChange:r.handleSearchChange})),C.length>0?C:y.a.createElement(\"li\",{className:\"no-entries-message\"},y.a.createElement(\"span\",null,p)))};var s,l=new P(e.enableAreaCodes,e.enableTerritories,e.regions,e.onlyCountries,e.preferredCountries,e.excludeCountries,e.preserveOrder,e.masks,e.priority,e.areaCodes,e.localization,e.prefix,e.defaultMask,e.alwaysDefaultMask),h=l.onlyCountries,m=l.preferredCountries,b=l.hiddenAreaCodes,v=e.value?e.value.replace(/\\D/g,\"\"):\"\";s=e.disableInitialCountryGuess?0:v.length>1?r.guessSelectedCountry(v.substring(0,6),e.country,h,b)||0:e.country&&h.find((function(t){return t.iso2==e.country}))||0;var _,S=v.length<2&&s&&!j()(v,s.dialCode)?s.dialCode:\"\";_=\"\"===v&&0===s?\"\":r.formatNumber((e.disableCountryCode?\"\":S)+v,s.name?s:void 0);var x=h.findIndex((function(e){return e==s}));return r.state={showDropdown:e.showDropdown,formattedNumber:_,onlyCountries:h,preferredCountries:m,hiddenAreaCodes:b,selectedCountry:s,highlightCountryIndex:x,queryString:\"\",freezeSelection:!1,debouncedQueryStingSearcher:g()(r.searchCountry,250),searchValue:\"\"},r}var r,l,m;return function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),r=t,(l=[{key:\"componentDidMount\",value:function(){document.addEventListener&&this.props.enableClickOutside&&document.addEventListener(\"mousedown\",this.handleClickOutside)}},{key:\"componentWillUnmount\",value:function(){document.removeEventListener&&this.props.enableClickOutside&&document.removeEventListener(\"mousedown\",this.handleClickOutside)}},{key:\"componentDidUpdate\",value:function(e,t,r){e.country!==this.props.country?this.updateCountry(this.props.country):e.value!==this.props.value&&this.updateFormattedNumber(this.props.value)}},{key:\"updateFormattedNumber\",value:function(e){if(null===e)return this.setState({selectedCountry:0,formattedNumber:\"\"});var t=this.state,r=t.onlyCountries,n=t.selectedCountry,a=t.hiddenAreaCodes,o=this.props,i=o.country,u=o.prefix;if(\"\"===e)return this.setState({selectedCountry:n,formattedNumber:\"\"});var c,s,l=e.replace(/\\D/g,\"\");if(n&&j()(e,u+n.dialCode))s=this.formatNumber(l,n),this.setState({formattedNumber:s});else{var f=(c=this.props.disableCountryGuess?n:this.guessSelectedCountry(l.substring(0,6),i,r,a)||n)&&j()(l,u+c.dialCode)?c.dialCode:\"\";s=this.formatNumber((this.props.disableCountryCode?\"\":f)+l,c||void 0),this.setState({selectedCountry:c,formattedNumber:s})}}},{key:\"render\",value:function(){var e,t,r,a,o,i=this,u=this.state,c=u.onlyCountries,s=u.selectedCountry,l=u.showDropdown,f=u.formattedNumber,d=u.hiddenAreaCodes,p=this.props,h=p.disableDropdown,m=p.renderStringAsFlag,b=p.isValid,g=p.defaultErrorMessage,v=p.specialLabel;if(\"boolean\"==typeof b)a=b;else{var C=b(f.replace(/\\D/g,\"\"),s,c,d);\"boolean\"==typeof C?!1===(a=C)&&(o=g):(a=!1,o=C)}var _=N()((n(e={},this.props.containerClass,!0),n(e,\"react-tel-input\",!0),e)),w=N()({arrow:!0,up:l}),S=N()((n(t={},this.props.inputClass,!0),n(t,\"form-control\",!0),n(t,\"invalid-number\",!a),n(t,\"open\",l),t)),j=N()({\"selected-flag\":!0,open:l}),x=N()((n(r={},this.props.buttonClass,!0),n(r,\"flag-dropdown\",!0),n(r,\"invalid-number\",!a),n(r,\"open\",l),r)),O=\"flag \".concat(s&&s.iso2);return y.a.createElement(\"div\",{className:_,style:this.props.style||this.props.containerStyle,onKeyDown:this.handleKeydown},v&&y.a.createElement(\"div\",{className:\"special-label\"},v),o&&y.a.createElement(\"div\",{className:\"invalid-number-message\"},o),y.a.createElement(\"input\",Object.assign({className:S,style:this.props.inputStyle,onChange:this.handleInput,onClick:this.handleInputClick,onDoubleClick:this.handleDoubleClick,onFocus:this.handleInputFocus,onBlur:this.handleInputBlur,onCopy:this.handleInputCopy,value:f,ref:function(e){return i.numberInputRef=e},onKeyDown:this.handleInputKeyDown,placeholder:this.props.placeholder,disabled:this.props.disabled,type:\"tel\"},this.props.inputProps)),y.a.createElement(\"div\",{className:x,style:this.props.buttonStyle,ref:function(e){return i.dropdownContainerRef=e}},m?y.a.createElement(\"div\",{className:j},m):y.a.createElement(\"div\",{onClick:h?void 0:this.handleFlagDropdownClick,className:j,title:s?\"\".concat(s.name,\": + \").concat(s.dialCode):\"\",tabIndex:h?\"-1\":\"0\",role:\"button\",\"aria-haspopup\":\"listbox\",\"aria-expanded\":!!l||void 0},y.a.createElement(\"div\",{className:O},!h&&y.a.createElement(\"div\",{className:w}))),l&&this.getCountryDropdownList()))}}])&&s(r.prototype,l),m&&s(r,m),t}(y.a.Component);F.defaultProps={country:\"\",value:\"\",onlyCountries:[],preferredCountries:[],excludeCountries:[],placeholder:\"1 (702) 123-4567\",searchPlaceholder:\"search\",searchNotFound:\"No entries to show\",flagsImagePath:\"./flags.png\",disabled:!1,containerStyle:{},inputStyle:{},buttonStyle:{},dropdownStyle:{},searchStyle:{},containerClass:\"\",inputClass:\"\",buttonClass:\"\",dropdownClass:\"\",searchClass:\"\",autoFormat:!0,enableAreaCodes:!1,enableTerritories:!1,disableCountryCode:!1,disableDropdown:!1,enableLongNumbers:!1,countryCodeEditable:!0,enableSearch:!1,disableSearchIcon:!1,disableInitialCountryGuess:!1,disableCountryGuess:!1,regions:\"\",inputProps:{},localization:{},masks:null,priority:null,areaCodes:null,preserveOrder:[],defaultMask:\"... ... ... ... ..\",alwaysDefaultMask:!1,prefix:\"+\",copyNumbersOnly:!0,renderStringAsFlag:\"\",autocompleteSearch:!1,jumpCursorToEnd:!0,enableAreaCodeStretch:!1,enableClickOutside:!0,showDropdown:!1,isValid:!0,defaultErrorMessage:\"\",specialLabel:\"Phone\",onEnterKeyPress:null,keys:{UP:38,DOWN:40,RIGHT:39,LEFT:37,ENTER:13,ESC:27,PLUS:43,A:65,Z:90,SPACE:32,TAB:9}};t.default=F}]);","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_extendSxProp as extendSxProp } from '@material-ui/system';\nimport { deepmerge } from '@material-ui/utils';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport useThemeProps from '../styles/useThemeProps';\n/**\n * Return an array with the separator React element interspersed between\n * each React node of the input children.\n *\n * > joinChildren([1,2,3], 0)\n * [1,0,2,0,3]\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction joinChildren(children, separator) {\n  const childrenArray = React.Children.toArray(children).filter(Boolean);\n  return childrenArray.reduce((output, child, index) => {\n    output.push(child);\n\n    if (index < childrenArray.length - 1) {\n      output.push( /*#__PURE__*/React.cloneElement(separator, {\n        key: `separator-${index}`\n      }));\n    }\n\n    return output;\n  }, []);\n}\n\nfunction resolveBreakpointValues({\n  values,\n  base\n}) {\n  const keys = Object.keys(base);\n\n  if (keys.length === 0) {\n    return values;\n  }\n\n  let previous;\n  return keys.reduce((acc, breakpoint) => {\n    if (typeof values === 'object') {\n      acc[breakpoint] = values[breakpoint] != null ? values[breakpoint] : values[previous];\n    } else {\n      acc[breakpoint] = values;\n    }\n\n    previous = breakpoint;\n    return acc;\n  }, {});\n}\n\nconst getSideFromDirection = direction => {\n  return {\n    row: 'Left',\n    'row-reverse': 'Right',\n    column: 'Top',\n    'column-reverse': 'Bottom'\n  }[direction];\n};\n\nexport const style = ({\n  styleProps,\n  theme\n}) => {\n  let styles = _extends({\n    display: 'flex'\n  }, handleBreakpoints({\n    theme\n  }, styleProps.direction, propValue => ({\n    flexDirection: propValue\n  })));\n\n  if (styleProps.spacing) {\n    const transformer = createUnarySpacing(theme);\n    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {\n      if (styleProps.spacing[breakpoint] != null || styleProps.direction[breakpoint] != null) {\n        acc[breakpoint] = true;\n      }\n\n      return acc;\n    }, {});\n    const directionValues = resolveBreakpointValues({\n      values: styleProps.direction,\n      base\n    });\n    const spacingValues = resolveBreakpointValues({\n      values: styleProps.spacing,\n      base\n    });\n\n    const styleFromPropValue = (propValue, breakpoint) => {\n      return {\n        '& > :not(style) + :not(style)': {\n          margin: 0,\n          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : styleProps.direction)}`]: getValue(transformer, propValue)\n        }\n      };\n    };\n\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, styleFromPropValue));\n  }\n\n  return styles;\n};\nconst StackRoot = experimentalStyled('div', {}, {\n  name: 'Stack'\n})(style);\nconst Stack = /*#__PURE__*/React.forwardRef(function Stack(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiStack'\n  });\n  const props = extendSxProp(themeProps);\n\n  const {\n    component = 'div',\n    direction = 'column',\n    spacing = 0,\n    divider,\n    children\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"component\", \"direction\", \"spacing\", \"divider\", \"children\"]);\n\n  const styleProps = {\n    direction,\n    spacing\n  };\n  return /*#__PURE__*/_jsx(StackRoot, _extends({\n    as: component,\n    styleProps: styleProps,\n    ref: ref\n  }, other, {\n    children: divider ? joinChildren(children, divider) : children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Stack.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'column'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * Add an element between each child.\n   */\n  divider: PropTypes.node,\n\n  /**\n   * Defines the space between immediate children.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop, which allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default Stack;","import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { MutationOptions, mergeOptions, ApolloCache, OperationVariables, DefaultContext } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends OperationData<MutationDataOptions<TData, TVariables, TContext, TCache>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables, TContext, TCache>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables, TContext, TCache> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables, TContext, TCache>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {} as MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        const { onError } = this.getOptions();\n        this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error,\n          };\n        } else {\n          throw error;\n        }\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables, TContext>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>): MutationResultWithoutClient<TData> | undefined {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { ApolloCache, DefaultContext, OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables, TContext>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables, TContext>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","// https://stackoverflow.com/a/46971044/970769\r\nexport default class ParseError {\r\n  constructor(code) {\r\n    this.name = this.constructor.name\r\n    this.message = code\r\n    this.stack = (new Error(code)).stack\r\n  }\r\n}\r\n\r\nParseError.prototype = Object.create(Error.prototype)\r\nParseError.prototype.constructor = ParseError","// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\n//\r\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\r\nexport default function(a, b) {\r\n    a = a.split('-')\r\n    b = b.split('-')\r\n    var pa = a[0].split('.')\r\n    var pb = b[0].split('.')\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i])\r\n        var nb = Number(pb[i])\r\n        if (na > nb) return 1\r\n        if (nb > na) return -1\r\n        if (!isNaN(na) && isNaN(nb)) return 1\r\n        if (isNaN(na) && !isNaN(nb)) return -1\r\n    }\r\n    if (a[1] && b[1]) {\r\n        return a[1] > b[1] ? 1 : (a[1] < b[1] ? -1 : 0)\r\n    }\r\n    return !a[1] && b[1] ? 1 : (a[1] && !b[1] ? -1 : 0)\r\n}","import compare from './tools/semver-compare'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif (!is_object(metadata) || !is_object(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }","import { VALID_DIGITS } from '../../constants'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\r\nconst getExtensionDigitsPattern = (maxLength) => `([${VALID_DIGITS}]{1,${maxLength}})`\r\n\r\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\r\nexport default function createExtensionPattern(purpose) {\r\n\t// We cap the maximum length of an extension based on the ambiguity of the way\r\n\t// the extension is prefixed. As per ITU, the officially allowed length for\r\n\t// extensions is actually 40, but we don't support this since we haven't seen real\r\n\t// examples and this introduces many false interpretations as the extension labels\r\n\t// are not standardized.\r\n\t/** @type {string} */\r\n\tvar extLimitAfterExplicitLabel = '20';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterLikelyLabel = '15';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterAmbiguousChar = '9';\r\n\t/** @type {string} */\r\n\tvar extLimitWhenNotSure = '6';\r\n\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\u00A0\\\\t,]*\";\r\n\t// Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\r\n\t/** @type {string} */\r\n\tvar possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*\";\r\n\t/** @type {string} */\r\n\tvar optionalExtnSuffix = \"#?\";\r\n\r\n\t// Here the extension is called out in more explicit way, i.e mentioning it obvious\r\n\t// patterns like \"ext.\".\r\n\t/** @type {string} */\r\n\tvar explicitExtLabels =\r\n\t  \"(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\";\r\n\t// One-character symbols that can be used to indicate an extension, and less\r\n\t// commonly used or more ambiguous extension labels.\r\n\t/** @type {string} */\r\n\tvar ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\";\r\n\t// When extension is not separated clearly.\r\n\t/** @type {string} */\r\n\tvar ambiguousSeparator = \"[- ]+\";\r\n\t// This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\r\n\t// comma as extension label may have it.\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsNumberExtLabelNoComma = \"[ \\u00A0\\\\t]*\";\r\n\t// \",,\" is commonly used for auto dialling the extension when connected. First\r\n\t// comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\r\n\t// not repeat it here. Semi-colon works in Iphone and Android also to pop up a\r\n\t// button with the extension number following.\r\n\t/** @type {string} */\r\n\tvar autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\r\n\r\n\t/** @type {string} */\r\n\tvar rfcExtn = RFC3966_EXTN_PREFIX\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\r\n\t/** @type {string} */\r\n\tvar explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel)\r\n\t     + optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t+ getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar americanStyleExtnWithSuffix = ambiguousSeparator\r\n\t+ getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\r\n\r\n\t/** @type {string} */\r\n\tvar autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t     + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterLikelyLabel)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t    + \"(?:,)+\" + possibleCharsAfterExtLabel\r\n\t    + getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t    + optionalExtnSuffix;\r\n\r\n\t// The first regular expression covers RFC 3966 format, where the extension is added\r\n\t// using \";ext=\". The second more generic where extension is mentioned with explicit\r\n\t// labels like \"ext:\". In both the above cases we allow more numbers in extension than\r\n\t// any other extension labels. The third one captures when single character extension\r\n\t// labels or less commonly used labels are used. In such cases we capture fewer\r\n\t// extension digits in order to reduce the chance of falsely interpreting two\r\n\t// numbers beside each other as a number + extension. The fourth one covers the\r\n\t// special case of American numbers where the extension is written with a hash\r\n\t// at the end, such as \"- 503#\". The fifth one is exclusively for extension\r\n\t// autodialling formats which are used when dialling and in this case we accept longer\r\n\t// extensions. The last one is more liberal on the number of commas that acts as\r\n\t// extension labels, so we have a strict cap on the number of digits in such extensions.\r\n\treturn rfcExtn + \"|\"\r\n\t       + explicitExtn + \"|\"\r\n\t       + ambiguousExtn + \"|\"\r\n\t       + americanStyleExtnWithSuffix + \"|\"\r\n\t       + autoDiallingExtn + \"|\"\r\n\t       + onlyCommasExtn;\r\n}","import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from '../constants'\r\n\r\nimport createExtensionPattern from './extension/createExtensionPattern'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nexport const VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// This regular expression isn't present in Google's `libphonenumber`\r\n// and is only used to determine whether the phone number being input\r\n// is too short for it to even consider it a \"valid\" number.\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nconst VALID_PHONE_NUMBER_START_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){1,2}' +\r\n\t'$'\r\n, 'i')\r\n\r\nexport const VALID_PHONE_NUMBER_WITH_EXTENSION =\r\n\tVALID_PHONE_NUMBER +\r\n\t// Phone number extensions\r\n\t'(?:' + createExtensionPattern() + ')?'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER_WITH_EXTENSION +\r\n\t'$'\r\n, 'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number) {\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}\r\n\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nexport function isViablePhoneNumberStart(number) {\r\n\treturn VALID_PHONE_NUMBER_START_REG_EXP.test(number)\r\n}","import createExtensionPattern from './createExtensionPattern'\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport default function extractExtension(number) {\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst numberWithoutExtension = number.slice(0, start)\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length) {\r\n\t\tif (matches[i]) {\r\n\t\t\treturn {\r\n\t\t\t\tnumber: numberWithoutExtension,\r\n\t\t\t\text: matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS = {\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character) {\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}","import { parseDigit } from './helpers/parseDigits'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+') {\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (prevParsedCharacters) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","import mergeArrays from './mergeArrays'\r\n\r\nexport default function checkNumberLength(nationalNumber, metadata) {\r\n\treturn checkNumberLengthForType(nationalNumber, undefined, metadata)\r\n}\r\n\r\n// Checks whether a number is possible for the country based on its length.\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE')) {\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\t\tif (mobile_type) {\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths) {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// } else {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info) {\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length) {\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}","/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport default function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b) {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","import Metadata from './metadata'\r\nimport checkNumberLength from './helpers/checkNumberLength'\r\n\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\r\nexport default function matchesEntirely(text, regular_expression) {\r\n\t// If assigning the `''` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\ttext = text || ''\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}","import Metadata from '../metadata'\r\nimport matchesEntirely from './matchesEntirely'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES = [\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE')) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const type of NON_FIXED_LINE_PHONE_TYPES) {\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\r\n\ttype = metadata.type(type)\r\n\tif (!type || !type.pattern()) {\r\n\t\treturn false\r\n\t}\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0) {\r\n\t\treturn false\r\n\t}\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}","import { VALID_PUNCTUATION } from '../constants'\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\r\n\treturn formattedNumber.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle'\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly. Therefore, we use `\\d`, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport default function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\t{\r\n\t\tuseInternationalFormat,\r\n\t\twithNationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tmetadata\r\n\t}\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat\r\n\t\t\t? format.internationalFormat()\r\n\t\t\t: (\r\n\t\t\t\t// This library doesn't use `domestic_carrier_code_formatting_rule`,\r\n\t\t\t\t// because that one is only used when formatting phone numbers\r\n\t\t\t\t// for dialing from a mobile phone, and this is not a dialing library.\r\n\t\t\t\t// carrierCode && format.domesticCarrierCodeFormattingRule()\r\n\t\t\t\t// \t// First, replace the $CC in the formatting rule with the desired carrier code.\r\n\t\t\t\t// \t// Then, replace the $FG in the formatting rule with the first group\r\n\t\t\t\t// \t// and the carrier code combined in the appropriate way.\r\n\t\t\t\t// \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\r\n\t\t\t\t// \t: (\r\n\t\t\t\t// \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t// \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t// \t\t\t: format.format()\r\n\t\t\t\t// \t)\r\n\t\t\t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t\t: format.format()\r\n\t\t\t)\r\n\t)\r\n\tif (useInternationalFormat) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}","import Metadata from '../metadata'\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport default function getIddPrefix(country, callingCode, metadata) {\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tif (countryMetadata.defaultIDDPrefix()) {\r\n\t\treturn countryMetadata.defaultIDDPrefix()\r\n\t}\r\n\tif (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n}\r\n","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat'\r\nimport Metadata, { getCountryCallingCode } from './metadata'\r\nimport getIddPrefix from './helpers/getIddPrefix'\r\nimport { formatRFC3966 } from './helpers/RFC3966'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}","import isViablePhoneNumber from './isViablePhoneNumber'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text) {\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';')) {\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name) {\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext }) {\r\n\tif (!number) {\r\n\t\treturn ''\r\n\t}\r\n\tif (number[0] !== '+') {\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","import Metadata from './metadata'\r\nimport isPossibleNumber from './isPossibleNumber_'\r\nimport isValidNumber from './validate_'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_'\r\nimport getNumberType from './helpers/getNumberType'\r\nimport formatNumber from './format_'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`country` or `countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\tif (!metadata) {\r\n\t\t\tthrow new TypeError('`metadata` not passed')\r\n\t\t}\r\n\t\tconst _metadata = new Metadata(metadata)\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\t\tthis.country = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.metadata)\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)","import Metadata from './metadata'\r\nimport matchesEntirely from './helpers/matchesEntirely'\r\nimport getNumberType from './helpers/getNumberType'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// This is just to support `isValidNumber({})`\r\n\t// for cases when `parseNumber()` returns `{}`.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes())\r\n\t{\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(national_number, metadata.nationalNumberPattern())\r\n}","import Metadata from '../metadata'\r\nimport { VALID_DIGITS } from '../constants'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\t// Check if the number is IDD-prefixed.\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\t// If there're any digits after an IDD prefix,\r\n\t// then those digits are a country calling code.\r\n\t// Since no country code starts with a `0`,\r\n\t// the code below validates that the next digit (if present) is not `0`.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\r\n\t\tif (matchedGroups[1] === '0') {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\r\n\tif (number && metadata.numberingPlan.nationalPrefixForParsing()) {\r\n\t\t// See METADATA.md for the description of\r\n\t\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\t\t// Attempt to parse the first digits as a national prefix.\r\n\t\tconst prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')')\r\n\t\tconst prefixMatch = prefixPattern.exec(number)\r\n\t\tif (prefixMatch) {\r\n\t\t\tlet nationalNumber\r\n\t\t\tlet carrierCode\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\t\t// If a `national_prefix_for_parsing` has any \"capturing groups\"\r\n\t\t\t// then it means that the national (significant) number is equal to\r\n\t\t\t// those \"capturing groups\" transformed via `national_prefix_transform_rule`,\r\n\t\t\t// and nothing could be said about the actual national prefix:\r\n\t\t\t// what is it and was it even there.\r\n\t\t\t// If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\r\n\t\t\t// then everything it matches is a national prefix.\r\n\t\t\t// To determine whether `national_prefix_for_parsing` matched any\r\n\t\t\t// \"capturing groups\", the value of the result of calling `.exec()`\r\n\t\t\t// is looked at, and if it has non-undefined values where there're\r\n\t\t\t// \"capturing groups\" in the regular expression, then it means\r\n\t\t\t// that \"capturing groups\" have been matched.\r\n\t\t\t// It's not possible to tell whether there'll be any \"capturing gropus\"\r\n\t\t\t// before the matching process, because a `national_prefix_for_parsing`\r\n\t\t\t// could exhibit both behaviors.\r\n\t\t\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\t\t\tconst hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]\r\n\t\t\tif (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\r\n\t\t\t\tnationalNumber = number.replace(\r\n\t\t\t\t\tprefixPattern,\r\n\t\t\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t\t\t)\r\n\t\t\t\t// If there's more than one captured group,\r\n\t\t\t\t// then carrier code is the second one.\r\n\t\t\t\tif (capturedGroupsCount > 1) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If there're no \"capturing groups\",\r\n\t\t\t// or if there're \"capturing groups\" but no\r\n\t\t\t// `national_prefix_transform_rule`,\r\n\t\t\t// then just strip the national prefix from the number,\r\n\t\t\t// and possibly a carrier code.\r\n\t\t\t// Seems like there could be more.\r\n\t\t\telse {\r\n\t\t\t\t// `prefixBeforeNationalNumber` is the whole substring matched by\r\n\t\t\t\t// the `national_prefix_for_parsing` regular expression.\r\n\t\t\t\t// There seem to be no guarantees that it's just a national prefix.\r\n\t\t\t\t// For example, if there's a carrier code, it's gonna be a\r\n\t\t\t\t// part of `prefixBeforeNationalNumber` too.\r\n\t\t\t\tconst prefixBeforeNationalNumber = prefixMatch[0]\r\n\t\t\t\tnationalNumber = number.slice(prefixBeforeNationalNumber.length)\r\n\t\t\t\t// If there's at least one captured group,\r\n\t\t\t\t// then carrier code is the first one.\r\n\t\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Tries to guess whether a national prefix was present in the input.\r\n\t\t\t// This is not something copy-pasted from Google's library:\r\n\t\t\t// they don't seem to have an equivalent for that.\r\n\t\t\t// So this isn't an \"officially approved\" way of doing something like that.\r\n\t\t\t// But since there seems no other existing method, this library uses it.\r\n\t\t\tlet nationalPrefix\r\n\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\tconst possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1])\r\n\t\t\t\tconst possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup)\r\n\t\t\t\t// Example: an Argentinian (AR) phone number `0111523456789`.\r\n\t\t\t\t// `prefixMatch[0]` is `01115`, and `$1` is `11`,\r\n\t\t\t\t// and the rest of the phone number is `23456789`.\r\n\t\t\t\t// The national number is transformed via `9$1` to `91123456789`.\r\n\t\t\t\t// National prefix `0` is detected being present at the start.\r\n\t\t\t\t// if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\r\n\t\t\t\tif (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\r\n\t\t\t\t\tnationalPrefix = metadata.numberingPlan.nationalPrefix()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnationalPrefix = prefixMatch[0]\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tnationalPrefix,\r\n\t\t\t\tcarrierCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   return {\r\n   \tnationalNumber: number\r\n   }\r\n}","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber'\r\nimport matchesEntirely from './matchesEntirely'\r\nimport checkNumberLength from './checkNumberLength'\r\n\r\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumber(number, metadata) {\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\tnumber,\r\n\t\tmetadata\r\n\t)\r\n\tif (!shouldExtractNationalPrefix(number, nationalNumber, metadata)) {\r\n\t\t// Don't strip the national prefix.\r\n\t\treturn { nationalNumber: number }\r\n\t}\r\n\t// If a national prefix has been extracted, check to see\r\n\t// if the resultant number isn't too short.\r\n\t// Same code in Google's `libphonenumber`:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3291-L3302\r\n\t// For some reason, they do this check right after the `national_number_pattern` check\r\n\t// this library does in `shouldExtractNationalPrefix()` function.\r\n\t// Why is there a second \"resultant\" number validity check?\r\n\t// They don't provide an explanation.\r\n\t// This library just copies the behavior.\r\n\tif (number.length !== nationalNumber.length + (carrierCode ? carrierCode.length : 0)) {\r\n\t\t// If not using legacy generated metadata (before version `1.0.18`)\r\n\t\t// then it has \"possible lengths\", so use those to validate the number length.\r\n\t\tif (metadata.possibleLengths()) {\r\n\t\t\t// \"We require that the NSN remaining after stripping the national prefix and\r\n\t\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t\t// a valid short number.\"\r\n\t\t\t// https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\r\n\t\t\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\t\t\tcase 'TOO_SHORT':\r\n\t\t\t\tcase 'INVALID_LENGTH':\r\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\t\t\t// Don't strip the national prefix.\r\n\t\t\t\t\treturn { nationalNumber: number }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { nationalNumber, carrierCode }\r\n}\r\n\r\n// In some countries, the same digit could be a national prefix\r\n// or a leading digit of a valid phone number.\r\n// For example, in Russia, national prefix is `8`,\r\n// and also `800 555 35 35` is a valid number\r\n// in which `8` is not a national prefix, but the first digit\r\n// of a national (significant) number.\r\n// Same's with Belarus:\r\n// `82004910060` is a valid national (significant) number,\r\n// but `2004910060` is not.\r\n// To support such cases (to prevent the code from always stripping\r\n// national prefix), a condition is imposed: a national prefix\r\n// is not extracted when the original number is \"viable\" and the\r\n// resultant number is not, a \"viable\" national number being the one\r\n// that matches `national_number_pattern`.\r\nfunction shouldExtractNationalPrefix(number, nationalSignificantNumber, metadata) {\r\n\t// The equivalent in Google's code is:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\r\n\tif (matchesEntirely(number, metadata.nationalNumberPattern()) &&\r\n\t\t!matchesEntirely(nationalSignificantNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn false\r\n\t}\r\n\t// Just \"possible\" number check would be more relaxed, so it's not used.\r\n\t// if (isPossibleNumber(number, metadata) &&\r\n\t// \t!isPossibleNumber(numberWithNationalPrefixExtracted, metadata)) {\r\n\t// \treturn false\r\n\t// }\r\n\treturn true\r\n}","import Metadata from '../metadata'\r\nimport matchesEntirely from './matchesEntirely'\r\nimport extractNationalNumber from './extractNationalNumber'\r\nimport checkNumberLength from './checkNumberLength'\r\nimport getCountryCallingCode from '../getCountryCallingCode'\r\n\r\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\r\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tconst countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode\r\n\tif (number.indexOf(countryCallingCode) === 0) {\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(country, callingCode)\r\n\t\tconst possibleShorterNumber = number.slice(countryCallingCode.length)\r\n\t\tconst {\r\n\t\t\tnationalNumber: possibleShorterNationalNumber,\r\n\t\t} = extractNationalNumber(\r\n\t\t\tpossibleShorterNumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tconst {\r\n\t\t\tnationalNumber\r\n\t\t} = extractNationalNumber(\r\n\t\t\tnumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// If the number was not valid before but is valid now,\r\n\t\t// or if it was too long before, we consider the number\r\n\t\t// with the country calling code stripped to be a better result\r\n\t\t// and keep that instead.\r\n\t\t// For example, in Germany (+49), `49` is a valid area code,\r\n\t\t// so if a number starts with `49`, it could be both a valid\r\n\t\t// national German number or an international number without\r\n\t\t// a leading `+`.\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t\t&&\r\n\t\t\t\tmatchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t)\r\n\t\t\t||\r\n\t\t\tcheckNumberLength(nationalNumber, metadata) === 'TOO_LONG'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: possibleShorterNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { number }\r\n}","import stripIddPrefix from './stripIddPrefix'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign'\r\nimport Metadata from '../metadata'\r\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants'\r\n\r\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\r\nexport default function extractCountryCallingCode(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then either extract an \"IDD\" prefix, or extract a\r\n\t// country calling code from a number by autocorrecting it\r\n\t// by prepending a leading `+` in cases when it starts\r\n\t// with the country calling code.\r\n\t// https://wikitravel.org/en/International_dialling_prefix\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata)\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\t// Check to see if the number starts with the country calling code\r\n\t\t\t// for the default country. If so, we remove the country calling code,\r\n\t\t\t// and do some checks on the validity of the number before and after.\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\t\tnumber,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcallingCode,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t\tif (countryCallingCode) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}","import Metadata from '../metadata'\r\nimport getNumberType from './getNumberType'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\t// Is always non-empty, because `callingCode` is always valid\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}\r\n\r\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// Leading digits check would be the simplest one\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN\r\n} from './constants'\r\n\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber'\r\nimport extractExtension from './helpers/extension/extractExtension'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\nimport getCountryCallingCode from './getCountryCallingCode'\r\nimport { isPossibleNumber } from './isPossibleNumber_'\r\nimport { parseRFC3966 } from './helpers/RFC3966'\r\nimport PhoneNumber from './PhoneNumber'\r\nimport matchesEntirely from './helpers/matchesEntirely'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign'\r\nimport extractNationalNumber from './helpers/extractNationalNumber'\r\nimport stripIddPrefix from './helpers/stripIddPrefix'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\r\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// Examples:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext, error } = parseInput(text, options.v2, options.extract)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tif (error === 'TOO_SHORT') {\r\n\t\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t\t}\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\t// isInternational: countryCallingCode !== undefined\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (throwOnError) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\tif (extract === false) {\r\n\t\treturn text\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2, extract) {\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0) {\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\tlet number = extractFormattedPhoneNumber(text, extract, v2)\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\tif (isViablePhoneNumberStart(number)) {\r\n\t\t\treturn { error: 'TOO_SHORT' }\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst withExtensionStripped = extractExtension(number)\r\n\tif (withExtensionStripped.ext) {\r\n\t\treturn withExtensionStripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, nationalNumber, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone: nationalNumber\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\t// Extract calling code from phone number.\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tparseIncompletePhoneNumber(formattedPhoneNumber),\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\t// Choose a country by `countryCallingCode`.\r\n\tlet country\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t}\r\n\t// If `formattedPhoneNumber` is in \"national\" format\r\n\t// then `number` is defined and `countryCallingCode` isn't.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumber(\r\n\t\tparseIncompletePhoneNumber(number),\r\n\t\tmetadata\r\n\t)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata)\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}","import parseNumber from './parse_'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\treturn parseNumber(text, { ...options, v2: true }, metadata)\r\n}","import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'","import parsePhoneNumber from './parsePhoneNumber_'\r\nimport ParseError from './ParseError'\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nexport default function parsePhoneNumberFromString(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumber(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_'\r\n\r\nexport default function parsePhoneNumberFromString() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberFromString_(text, options, metadata)\r\n}\r\n","import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_'\r\n\r\nexport default function isPossiblePhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumberFromString(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isPossible() || false\r\n}","import Metadata from './metadata'\r\n\r\nexport default function getCountries(metadata) {\r\n\treturn new Metadata(metadata).getCountries()\r\n}","import PropTypes from 'prop-types'\r\n\r\nexport const metadata = PropTypes.shape({\r\n\tcountry_calling_codes : PropTypes.object.isRequired,\r\n\tcountries : PropTypes.object.isRequired\r\n})\r\n\r\nexport const labels = PropTypes.objectOf(PropTypes.string)","// Counts all occurences of a symbol in a string\r\nexport function count_occurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes)\r\n\t// but template placeholder characters don't fall into that range\r\n\t// so skipping such miscellaneous \"exotic\" characters\r\n\t// won't matter here for just counting placeholder character occurrences.\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}","import { count_occurences } from './helpers'\r\n\r\nexport default function closeBraces(retained_template, template, placeholder = 'x', empty_placeholder = ' ')\r\n{\r\n\tlet cut_before = retained_template.length\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder)\r\n\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn retained_template\r\n}\r\n","import template_formatter from './templateFormatter'\r\n\r\n// Formats `value` value preserving `caret` at the same character.\r\n//\r\n// `{ value, caret }` attribute is the result of `parse()` function call.\r\n//\r\n// Returns `{ text, caret }` where the new `caret` is the caret position\r\n// inside `text` text corresponding to the original `caret` position inside `value`.\r\n//\r\n// `formatter(value)` is a function returning `{ text, template }`.\r\n//\r\n// `text` is the `value` value formatted using `template`.\r\n// It may either cut off the non-filled right part of the `template`\r\n// or it may fill the non-filled character placeholders\r\n// in the right part of the `template` with `spacer`\r\n// which is a space (' ') character by default.\r\n//\r\n// `template` is the template used to format the `value`.\r\n// It can be either a full-length template or a partial template.\r\n//\r\n// `formatter` can also be a string — a `template`\r\n// where character placeholders are denoted by 'x'es.\r\n// In this case `formatter` function is automatically created.\r\n//\r\n// Example:\r\n//\r\n// `value` is '880',\r\n// `caret` is `2` (before the first `0`)\r\n//\r\n// `formatter` is `'880' =>\r\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\r\n//\r\n// The result is `{ text: '8 (80 )', caret: 4 }`.\r\n//\r\nexport default function format(value, caret, formatter)\r\n{\r\n\tif (typeof formatter === 'string')\r\n\t{\r\n\t\tformatter = template_formatter(formatter)\r\n\t}\r\n\r\n\tlet { text, template } = formatter(value) || {}\r\n\r\n\tif (text === undefined)\r\n\t{\r\n\t\t text = value\r\n\t}\r\n\r\n\tif (template)\r\n\t{\r\n\t\tif (caret === undefined)\r\n\t\t{\r\n\t\t\tcaret = text.length\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet index = 0\r\n\t\t\tlet found = false\r\n\r\n\t\t\tlet possibly_last_input_character_index = -1\r\n\r\n\t\t\twhile (index < text.length && index < template.length)\r\n\t\t\t{\r\n\t\t\t\t// Character placeholder found\r\n\t\t\t\tif (text[index] !== template[index])\r\n\t\t\t\t{\r\n\t\t\t\t\tif (caret === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true\r\n\t\t\t\t\t\tcaret = index\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpossibly_last_input_character_index = index\r\n\r\n\t\t\t\t\tcaret--\r\n\t\t\t\t}\r\n\r\n\t\t\t\tindex++\r\n\t\t\t}\r\n\r\n\t\t\t// If the caret was positioned after last input character,\r\n\t\t\t// then the text caret index is just after the last input character.\r\n\t\t\tif (!found)\r\n\t\t\t{\r\n\t\t\t\tcaret = possibly_last_input_character_index + 1\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { text, caret }\r\n}","import { count_occurences } from './helpers'\r\nimport close_braces from './closeBraces'\r\n\r\n// Takes a `template` where character placeholders\r\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\r\n//\r\n// Returns a function which takes `value` characters\r\n// and returns the `template` filled with those characters.\r\n// If the `template` can only be partially filled\r\n// then it is cut off.\r\n//\r\n// If `should_close_braces` is `true`,\r\n// then it will also make sure all dangling braces are closed,\r\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\r\n//\r\nexport default function(template, placeholder = 'x', should_close_braces)\r\n{\r\n\tif (!template)\r\n\t{\r\n\t\treturn value => ({ text: value })\r\n\t}\r\n\r\n\tconst characters_in_template = count_occurences(placeholder, template)\r\n\r\n\treturn function(value)\r\n\t{\r\n\t\tif (!value)\r\n\t\t{\r\n\t\t\treturn { text: '', template }\r\n\t\t}\r\n\r\n\t\tlet value_character_index = 0\r\n\t\tlet filled_in_template = ''\r\n\r\n\t\t// Using `.split('')` here instead of normal `for ... of`\r\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t\t// (the ones consisting of four bytes)\r\n\t\t// but template placeholder characters don't fall into that range\r\n\t\t// and appending UTF-8 characters to a string in parts still works.\r\n\t\tfor (const character of template.split(''))\r\n\t\t{\r\n\t\t\tif (character !== placeholder)\r\n\t\t\t{\r\n\t\t\t\tfilled_in_template += character\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tfilled_in_template += value[value_character_index]\r\n\t\t\tvalue_character_index++\r\n\r\n\t\t\t// If the last available value character has been filled in,\r\n\t\t\t// then return the filled in template\r\n\t\t\t// (either trim the right part or retain it,\r\n\t\t\t//  if no more character placeholders in there)\r\n\t\t\tif (value_character_index === value.length)\r\n\t\t\t{\r\n\t\t\t\t// If there are more character placeholders\r\n\t\t\t\t// in the right part of the template\r\n\t\t\t\t// then simply trim it.\r\n\t\t\t\tif (value.length < characters_in_template)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (should_close_braces)\r\n\t\t{\r\n\t\t\tfilled_in_template = close_braces(filled_in_template, template)\r\n\t\t}\r\n\r\n\t\treturn { text: filled_in_template, template }\r\n\t}\r\n}","// Gets <input/> selection bounds\r\nexport function getSelection(element)\r\n{\r\n\t// If no selection, return nothing\r\n\tif (element.selectionStart === element.selectionEnd)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn { start: element.selectionStart, end: element.selectionEnd }\r\n}\r\n\r\n// Key codes\r\nexport const Keys =\r\n{\r\n\tBackspace : 8,\r\n\tDelete    : 46\r\n}\r\n\r\n// Finds out the operation to be intercepted and performed\r\n// based on the key down event `keyCode`.\r\nexport function getOperation(event)\r\n{\r\n\tswitch (event.keyCode)\r\n\t{\r\n\t\tcase Keys.Backspace:\r\n\t\t\treturn 'Backspace'\r\n\r\n\t\tcase Keys.Delete:\r\n\t\t\treturn 'Delete'\r\n\t}\r\n}\r\n\r\n// Gets <input/> caret position\r\nexport function getCaretPosition(element)\r\n{\r\n\treturn element.selectionStart\r\n}\r\n\r\n// Sets <input/> caret position\r\nexport function setCaretPosition(element, caret_position)\r\n{\r\n\t// Sanity check\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Set caret position.\r\n\t// There has been an issue with caret positioning on Android devices.\r\n\t// https://github.com/catamphetamine/input-format/issues/2\r\n\t// I was revisiting this issue and looked for similar issues in other libraries.\r\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\r\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\r\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\r\n\t// https://github.com/text-mask/text-mask/issues/300\r\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\r\n\t// https://github.com/text-mask/text-mask/pull/400/files\r\n\t// I've implemented the same workaround here.\r\n\tif (isAndroid()) {\r\n      setTimeout(() => element.setSelectionRange(caret_position, caret_position), 0)\r\n\t} else {\r\n\t\telement.setSelectionRange(caret_position, caret_position)\r\n\t}\r\n}\r\n\r\nfunction isAndroid() {\r\n\t// `navigator` is not defined when running mocha tests.\r\n\tif (typeof navigator !== 'undefined') {\r\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent)\r\n\t}\r\n}\r\n\r\nconst ANDROID_USER_AGENT_REG_EXP = /Android/i","import edit   from './edit'\r\nimport parse  from './parse'\r\nimport format from './format'\r\n\r\nimport\r\n{\r\n\tgetOperation,\r\n\tgetSelection,\r\n\tgetCaretPosition,\r\n\tsetCaretPosition\r\n}\r\nfrom './dom'\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onCut(event, input, _parse, _format, on_change)\r\n{\r\n\t// The actual cut hasn't happened just yet hence the timeout.\r\n\tsetTimeout(() => formatInputText(input, _parse, _format, undefined, on_change), 0)\r\n}\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onPaste(event, input, _parse, _format, on_change)\r\n{\r\n\tconst selection = getSelection(input)\r\n\r\n\t// If selection is made,\r\n\t// just erase the selected text\r\n\t// prior to pasting\r\n\tif (selection)\r\n\t{\r\n\t\teraseSelection(input, selection)\r\n\t}\r\n\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\nexport function onChange(event, input, _parse, _format, on_change)\r\n{\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\n// \"Delete\" and \"Backspace\" keys are special\r\n// in a way that they're not handled by the regular `onChange()` handler\r\n// and instead are intercepted and re-applied manually.\r\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\r\n// results in erasing a character, but that character might be any character,\r\n// while it would be a better \"user experience\" if it erased not just any character\r\n// but the closest \"meaningful\" character.\r\n// For example, if a template is `(xxx) xxx-xxxx`,\r\n// and the `<input/>` value is `(111) 222-3333`,\r\n// then, if a user begins erasing the `3333` part via \"Backspace\"\r\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\r\n// Nothing wrong with that, but it would be a better \"user experience\"\r\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\r\n// character, which would be the rightmost `2`.\r\n// So, what this `onKeyDown()` handler does is it intercepts\r\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\r\n// following the logic described above.\r\nexport function onKeyDown(event, input, _parse, _format, on_change)\r\n{\r\n\tconst operation = getOperation(event)\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Delete':\r\n\t\tcase 'Backspace':\r\n\t\t\t// Intercept this operation and perform it manually.\r\n\t\t\tevent.preventDefault()\r\n\r\n\t\t\tconst selection = getSelection(input)\r\n\r\n\t\t\t// If a selection is made, just erase the selected text.\r\n\t\t\tif (selection)\r\n\t\t\t{\r\n\t\t\t\teraseSelection(input, selection)\r\n\t\t\t\treturn formatInputText(input, _parse, _format, undefined, on_change)\r\n\t\t\t}\r\n\r\n\t\t\t// Else, perform the (character erasing) operation manually.\r\n\t\t\treturn formatInputText(input, _parse, _format, operation, on_change)\r\n\r\n\t\tdefault:\r\n\t\t\t// Will be handled normally as part of the `onChange` handler.\r\n\t}\r\n}\r\n\r\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\r\nfunction eraseSelection(input, selection)\r\n{\r\n\tlet text = input.value\r\n\ttext = text.slice(0, selection.start) + text.slice(selection.end)\r\n\r\n\tinput.value = text\r\n\tsetCaretPosition(input, selection.start)\r\n}\r\n\r\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\r\nfunction formatInputText(input, _parse, _format, operation, on_change)\r\n{\r\n\t// Parse `<input/>` textual value.\r\n\t// Get the `value` and `caret` position.\r\n\tlet { value, caret } = parse(input.value, getCaretPosition(input), _parse)\r\n\r\n\t// If a user performed an operation (\"Backspace\", \"Delete\")\r\n\t// then apply that operation and get the new `value` and `caret` position.\r\n\tif (operation)\r\n\t{\r\n\t\tconst newValueAndCaret = edit(value, caret, operation)\r\n\r\n\t\tvalue = newValueAndCaret.value\r\n\t\tcaret = newValueAndCaret.caret\r\n\t}\r\n\r\n\t// Format the `value`.\r\n\t// (and reposition the caret accordingly)\r\n\tconst formatted = format(value, caret, _format)\r\n\r\n\tconst text = formatted.text\r\n\tcaret      = formatted.caret\r\n\r\n\t// Set `<input/>` textual value manually\r\n\t// to prevent React from resetting the caret position\r\n\t// later inside a subsequent `render()`.\r\n\t// Doesn't work for custom `inputComponent`s for some reason.\r\n\tinput.value = text\r\n\t// Position the caret properly.\r\n\tsetCaretPosition(input, caret)\r\n\r\n\t// If the `<input/>` textual value did change,\r\n\t// then the parsed `value` may have changed too.\r\n\ton_change(value)\r\n}","// Parses the `text`.\r\n//\r\n// Returns `{ value, caret }` where `caret` is\r\n// the caret position inside `value`\r\n// corresponding to the `caret_position` inside `text`.\r\n//\r\n// The `text` is parsed by feeding each character sequentially to\r\n// `parse_character(character, value)` function\r\n// and appending the result (if it's not `undefined`) to `value`.\r\n//\r\n// Example:\r\n//\r\n// `text` is `8 (800) 555-35-35`,\r\n// `caret_position` is `4` (before the first `0`).\r\n// `parse_character` is `(character, value) =>\r\n//   if (character >= '0' && character <= '9') { return character }`.\r\n//\r\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\r\n//\r\nexport default function parse(text, caret_position, parse_character)\r\n{\r\n\tlet value = ''\r\n\r\n\tlet focused_input_character_index = 0\r\n\r\n\tlet index = 0\r\n\twhile (index < text.length)\r\n\t{\r\n\t\tconst character = parse_character(text[index], value)\r\n\r\n\t\tif (character !== undefined)\r\n\t\t{\r\n\t\t\tvalue += character\r\n\r\n\t\t\tif (caret_position !== undefined)\r\n\t\t\t{\r\n\t\t\t\tif (caret_position === index)\r\n\t\t\t\t{\r\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (caret_position > index)\r\n\t\t\t\t{\r\n\t\t\t\t\tfocused_input_character_index = value.length\r\n\t\t\t\t}\r\n\t\t\t }\r\n\t\t}\r\n\r\n\t\tindex++\r\n\t}\r\n\r\n\t// If caret position wasn't specified\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\t// Then set caret position to \"after the last input character\"\r\n\t\tfocused_input_character_index = value.length\r\n\t}\r\n\r\n\tconst result =\r\n\t{\r\n\t\tvalue,\r\n\t\tcaret : focused_input_character_index\r\n\t}\r\n\r\n\treturn result\r\n}","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\r\n//\r\n// Example:\r\n//\r\n// value - '88005553535'\r\n// caret - 2 // starting from 0; is positioned before the first zero\r\n// operation - 'Backspace'\r\n//\r\n// Returns\r\n// {\r\n// \tvalue: '8005553535'\r\n// \tcaret: 1\r\n// }\r\n//\r\n// Currently supports just 'Delete' and 'Backspace' operations\r\n//\r\nexport default function edit(value, caret, operation)\r\n{\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Backspace':\r\n\t\t\t// If there exists the previous character,\r\n\t\t\t// then erase it and reposition the caret.\r\n\t\t\tif (caret > 0)\r\n\t\t\t{\r\n\t\t\t\t// Remove the previous character\r\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret)\r\n\t\t\t\t// Position the caret where the previous (erased) character was\r\n\t\t\t\tcaret--\r\n\t\t\t}\r\n\t\t\tbreak\r\n\r\n\t\tcase 'Delete':\r\n\t\t\t// Remove current digit (if any)\r\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1)\r\n\t\t\tbreak\r\n\t}\r\n\r\n\treturn { value, caret }\r\n}","// This is just `./ReactInput.js` rewritten in Hooks.\r\n\r\nimport React, { useCallback, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n\tonChange as onInputChange,\r\n\tonKeyDown as onInputKeyDown\r\n} from '../inputControl'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nfunction Input({\r\n\tvalue,\r\n\tparse,\r\n\tformat,\r\n\tinputComponent: InputComponent,\r\n\tonChange,\r\n\tonKeyDown,\r\n\t...rest\r\n}, ref) {\r\n\tconst internalRef = useRef();\r\n\tconst setRef = useCallback((instance) => {\r\n\t\tinternalRef.current = instance;\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(instance)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = instance\r\n\t\t\t}\r\n\t\t}\r\n\t}, [ref]);\r\n\tconst _onChange = useCallback((event) => {\r\n\t\treturn onInputChange(\r\n\t\t\tevent,\r\n\t\t\tinternalRef.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [internalRef, parse, format, onChange])\r\n\r\n\tconst _onKeyDown = useCallback((event) => {\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t\treturn onInputKeyDown(\r\n\t\t\tevent,\r\n\t\t\tinternalRef.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [internalRef, parse, format, onChange, onKeyDown])\r\n\r\n\treturn (\r\n\t\t<InputComponent\r\n\t\t\t{...rest}\r\n\t\t\tref={setRef}\r\n\t\t\tvalue={format(isEmptyValue(value) ? '' : value).text}\r\n\t\t\tonKeyDown={_onKeyDown}\r\n\t\t\tonChange={_onChange}/>\r\n\t)\r\n}\r\n\r\nInput = React.forwardRef(Input)\r\n\r\nInput.propTypes = {\r\n\t// Parses a single characher of `<input/>` text.\r\n\tparse: PropTypes.func.isRequired,\r\n\r\n\t// Formats `value` into `<input/>` text.\r\n\tformat: PropTypes.func.isRequired,\r\n\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: PropTypes.string.isRequired,\r\n\r\n\t// Is parsed from <input/> text.\r\n\tvalue: PropTypes.string,\r\n\r\n\t// This handler is called each time `<input/>` text is changed.\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// Passthrough\r\n\tonKeyDown: PropTypes.func,\r\n\tonCut: PropTypes.func,\r\n\tonPaste: PropTypes.func\r\n}\r\n\r\nInput.defaultProps = {\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: 'input',\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: 'text'\r\n}\r\n\r\nexport default Input\r\n\r\nfunction isEmptyValue(value) {\r\n\treturn value === undefined || value === null\r\n}","export default class AsYouTypeState {\r\n\tconstructor({ onCountryChange, onCallingCodeChange }) {\r\n\t\tthis.onCountryChange = onCountryChange\r\n\t\tthis.onCallingCodeChange = onCallingCodeChange\r\n\t}\r\n\r\n\treset(defaultCountry, defaultCallingCode) {\r\n\t\tthis.international = false\r\n\t\tthis.IDDPrefix = undefined\r\n\t\tthis.missingPlus = undefined\r\n\t\tthis.callingCode = undefined\r\n\t\tthis.digits = ''\r\n\t\tthis.resetNationalSignificantNumber()\r\n\t\tthis.initCountryAndCallingCode(defaultCountry, defaultCallingCode)\r\n\t}\r\n\r\n\tresetNationalSignificantNumber() {\r\n\t\tthis.nationalSignificantNumber = this.getNationalDigits()\r\n\t\tthis.nationalSignificantNumberMatchesInput = true\r\n\t\tthis.nationalPrefix = undefined\r\n\t\tthis.carrierCode = undefined\r\n\t\tthis.complexPrefixBeforeNationalSignificantNumber = undefined\r\n\t}\r\n\r\n\tupdate = (properties) => {\r\n\t\tfor (const key of Object.keys(properties)) {\r\n\t\t\tthis[key] = properties[key]\r\n\t\t}\r\n\t}\r\n\r\n\tinitCountryAndCallingCode(country, callingCode) {\r\n\t\tthis.setCountry(country)\r\n\t\tthis.setCallingCode(callingCode)\r\n\t}\r\n\r\n\tsetCountry(country) {\r\n\t\tthis.country = country\r\n\t\tthis.onCountryChange(country)\r\n\t}\r\n\r\n\tsetCallingCode(callingCode) {\r\n\t\tthis.callingCode = callingCode\r\n\t\treturn this.onCallingCodeChange(this.country, callingCode)\r\n\t}\r\n\r\n\tstartInternationalNumber() {\r\n\t\t// Prepend the `+` to parsed input.\r\n\t\tthis.international = true\r\n\t\t// If a default country was set then reset it\r\n\t\t// because an explicitly international phone\r\n\t\t// number is being entered.\r\n\t\tthis.initCountryAndCallingCode()\r\n\t}\r\n\r\n\tappendDigits(nextDigits) {\r\n\t\tthis.digits += nextDigits\r\n\t}\r\n\r\n\tappendNationalSignificantNumberDigits(nextDigits) {\r\n\t\tthis.nationalSignificantNumber += nextDigits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the part of `this.digits` that corresponds to the national number.\r\n\t * Basically, all digits that have been input by the user, except for the\r\n\t * international prefix and the country calling code part\r\n\t * (if the number is an international one).\r\n\t * @return {string}\r\n\t */\r\n\tgetNationalDigits() {\r\n\t\tif (this.international) {\r\n\t\t\treturn this.digits.slice(\r\n\t\t\t\t(this.IDDPrefix ? this.IDDPrefix.length : 0) +\r\n\t\t\t\t(this.callingCode ? this.callingCode.length : 0)\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n\r\n\tgetDigitsWithoutInternationalPrefix() {\r\n\t\tif (this.international) {\r\n\t\t\tif (this.IDDPrefix) {\r\n\t\t\t\treturn this.digits.slice(this.IDDPrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n}","// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function countOccurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times) {\r\n\tif (times < 1) {\r\n\t\treturn ''\r\n\t}\r\n\tlet result = ''\r\n\twhile (times > 1) {\r\n\t\tif (times & 1) {\r\n\t\t\tresult += string\r\n\t\t}\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\treturn result + string\r\n}\r\n\r\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\r\n\tif (string[cutBeforeIndex] === ')') {\r\n\t\tcutBeforeIndex++\r\n\t}\r\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex))\r\n}\r\n\r\nexport function closeNonPairedParens(template, cut_before) {\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\tconst opening_braces = countOccurences('(', retained_template)\r\n\tconst closing_braces = countOccurences(')', retained_template)\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length) {\r\n\t\tif (template[cut_before] === ')') {\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\nexport function stripNonPairedParens(string) {\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length) {\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces) {\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\treturn cleared_string\r\n}\r\n\r\nexport function populateTemplateWithDigits(template, position, digits) {\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for `digits` it is safe.\r\n\t// for (const digit of digits)\r\n\tfor (const digit of digits.split('')) {\r\n\t\t// If there is room for more digits in current `template`,\r\n\t\t// then set the next digit in the `template`,\r\n\t\t// and return the formatted digits so far.\r\n\t\t// If more digits are entered than the current format could handle.\r\n\t\tif (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tposition = template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\ttemplate = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t}\r\n\treturn [template, position]\r\n}","import checkNumberLength from './helpers/checkNumberLength'\r\nimport parseDigits from './helpers/parseDigits'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat'\r\n\r\nexport default function formatCompleteNumber(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\tif (matcher.test(state.nationalSignificantNumber)) {\r\n\t\treturn formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(\r\n\t\t\tstate,\r\n\t\t\tformat,\r\n\t\t\t{\r\n\t\t\t\tmetadata,\r\n\t\t\t\tshouldTryNationalPrefixFormattingRule,\r\n\t\t\t\tgetSeparatorAfterNationalPrefix\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\r\n\treturn checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE'\r\n}\r\n\r\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\t// `format` has already been checked for `nationalPrefix` requirement.\r\n\r\n\tconst {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode\r\n\t} = state\r\n\r\n\t// Format the number with using `national_prefix_formatting_rule`.\r\n\t// If the resulting formatted number is a valid formatted number, then return it.\r\n\t//\r\n\t// Google's AsYouType formatter is different in a way that it doesn't try\r\n\t// to format using the \"national prefix formatting rule\", and instead it\r\n\t// simply prepends a national prefix followed by a \" \" character.\r\n\t// This code does that too, but as a fallback.\r\n\t// The reason is that \"national prefix formatting rule\" may use parentheses,\r\n\t// which wouldn't be included has it used the simpler Google's way.\r\n\t//\r\n\tif (shouldTryNationalPrefixFormattingRule(format)) {\r\n\t\tconst formattedNumber = formatNationalNumber(state, format, {\r\n\t\t\tuseNationalPrefixFormattingRule: true,\r\n\t\t\tgetSeparatorAfterNationalPrefix,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\tif (formattedNumber) {\r\n\t\t\treturn formattedNumber\r\n\t\t}\r\n\t}\r\n\r\n\t// Format the number without using `national_prefix_formatting_rule`.\r\n\treturn formatNationalNumber(state, format, {\r\n\t\tuseNationalPrefixFormattingRule: false,\r\n\t\tgetSeparatorAfterNationalPrefix,\r\n\t\tmetadata\r\n\t})\r\n}\r\n\r\nfunction formatNationalNumber(state, format, {\r\n\tmetadata,\r\n\tuseNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tlet formattedNationalNumber = formatNationalNumberUsingFormat(\r\n\t\tstate.nationalSignificantNumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tcarrierCode: state.carrierCode,\r\n\t\t\tuseInternationalFormat: state.international,\r\n\t\t\twithNationalPrefix: useNationalPrefixFormattingRule,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n\tif (!useNationalPrefixFormattingRule) {\r\n\t\tif (state.nationalPrefix) {\r\n\t\t\t// If a national prefix was extracted, then just prepend it,\r\n\t\t\t// followed by a \" \" character.\r\n\t\t\tformattedNationalNumber = state.nationalPrefix +\r\n\t\t\t\tgetSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t} else if (state.complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\tformattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber +\r\n\t\t\t\t' ' +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t}\r\n\t}\r\n\tif (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n}\r\n\r\n// Check that the formatted phone number contains exactly\r\n// the same digits that have been input by the user.\r\n// For example, when \"0111523456789\" is input for `AR` country,\r\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\r\n// which means that the national part of `this.digits` isn't simply equal to\r\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\r\n//\r\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\r\n// being formatted via `metadata[country].national_prefix_transform_rule`.\r\n// For example, for `VI` country, it prepends `340` to the national number,\r\n// and if this check hasn't been implemented, then there would be a bug\r\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\r\n//\r\n// So, all these \"gotchas\" are filtered out.\r\n//\r\n// In the original Google's code, the comments say:\r\n// \"Check that we didn't remove nor add any extra digits when we matched\r\n// this formatting pattern. This usually happens after we entered the last\r\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\r\n// formatted but AYTF should retain all the number entered and not change\r\n// in order to match a format (of same leading digits and length) display\r\n// in that way.\"\r\n// \"If it's the same (i.e entered number and format is same), then it's\r\n// safe to return this in formatted number as nothing is lost / added.\"\r\n// Otherwise, don't use this format.\r\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\r\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\r\n//\r\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\r\n\treturn parseDigits(formattedNationalNumber) === state.getNationalDigits()\r\n}","import {\r\n\tDIGIT_PLACEHOLDER,\r\n\tcountOccurences,\r\n\trepeat,\r\n\tcutAndStripNonPairedParens,\r\n\tcloseNonPairedParens,\r\n\tstripNonPairedParens,\r\n\tpopulateTemplateWithDigits\r\n} from './AsYouTypeFormatter.util'\r\n\r\nimport formatCompleteNumber, {\r\n\tcanFormatCompleteNumber\r\n} from './AsYouTypeFormatter.complete'\r\n\r\nimport parseDigits from './helpers/parseDigits'\r\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util'\r\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat'\r\nimport { VALID_PUNCTUATION } from './constants'\r\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\r\n// us that we should separate the national prefix from the number when formatting.\r\nconst NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A regular expression that is used to determine if a `format` is\r\n// suitable to be used in the \"as you type formatter\".\r\n// A `format` is suitable when the resulting formatted number has\r\n// the same digits as the user has entered.\r\n//\r\n// In the simplest case, that would mean that the format\r\n// doesn't add any additional digits when formatting a number.\r\n// Google says that it also shouldn't add \"star\" (`*`) characters,\r\n// like it does in some Israeli formats.\r\n// Such basic format would only contain \"valid punctuation\"\r\n// and \"captured group\" identifiers ($1, $2, etc).\r\n//\r\n// An example of a format that adds additional digits:\r\n//\r\n// Country: `AR` (Argentina).\r\n// Format:\r\n// {\r\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n//    \"leading_digits_patterns\": [\"91\"],\r\n//    \"national_prefix_formatting_rule\": \"0$1\",\r\n//    \"format\": \"$2 15-$3-$4\",\r\n//    \"international_format\": \"$1 $2 $3-$4\"\r\n// }\r\n//\r\n// In the format above, the `format` adds `15` to the digits when formatting a number.\r\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\r\n// has previously removed `15` from a national number, so re-adding `15` in `format`\r\n// doesn't actually result in any extra digits added to user's input.\r\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\r\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\r\n//\r\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\r\n// `libphonenumber` code.\r\n//\r\nconst NON_ALTERING_FORMAT_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nexport default class AsYouTypeFormatter {\r\n\tconstructor({\r\n\t\tstate,\r\n\t\tmetadata\r\n\t}) {\r\n\t\tthis.metadata = metadata\r\n\t\tthis.resetFormat()\r\n\t}\r\n\r\n\tresetFormat() {\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.nationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t}\r\n\r\n\treset(numberingPlan, state) {\r\n\t\tthis.resetFormat()\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.isNANP = numberingPlan.callingCode() === '1'\r\n\t\t\tthis.matchingFormats = numberingPlan.formats()\r\n\t\t\tif (state.nationalSignificantNumber) {\r\n\t\t\t\tthis.narrowDownMatchingFormats(state)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.isNANP = undefined\r\n\t\t\tthis.matchingFormats = []\r\n\t\t}\r\n\t}\r\n\r\n\tformat(nextDigits, state) {\r\n\t\t// See if the phone number digits can be formatted as a complete phone number.\r\n\t\t// If not, use the results from `formatNationalNumberWithNextDigits()`,\r\n\t\t// which formats based on the chosen formatting pattern.\r\n\t\t//\r\n\t\t// Attempting to format complete phone number first is how it's done\r\n\t\t// in Google's `libphonenumber`, so this library just follows it.\r\n\t\t// Google's `libphonenumber` code doesn't explain in detail why does it\r\n\t\t// attempt to format digits as a complete phone number\r\n\t\t// instead of just going with a previoulsy (or newly) chosen `format`:\r\n\t\t//\r\n\t\t// \"Checks to see if there is an exact pattern match for these digits.\r\n\t\t//  If so, we should use this instead of any other formatting template\r\n\t\t//  whose leadingDigitsPattern also matches the input.\"\r\n\t\t//\r\n\t\tif (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\r\n\t\t\tfor (const format of this.matchingFormats) {\r\n\t\t\t\tconst formattedCompleteNumber = formatCompleteNumber(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmetadata: this.metadata,\r\n\t\t\t\t\t\tshouldTryNationalPrefixFormattingRule: format => this.shouldTryNationalPrefixFormattingRule(format, {\r\n\t\t\t\t\t\t\tinternational: state.international,\r\n\t\t\t\t\t\t\tnationalPrefix: state.nationalPrefix\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tgetSeparatorAfterNationalPrefix: this.getSeparatorAfterNationalPrefix\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t\tif (formattedCompleteNumber) {\r\n\t\t\t\t\tthis.resetFormat()\r\n\t\t\t\t\tthis.chosenFormat = format\r\n\t\t\t\t\tthis.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state)\r\n\t\t\t\t\tthis.populatedNationalNumberTemplate = formattedCompleteNumber\r\n\t\t\t\t\t// With a new formatting template, the matched position\r\n\t\t\t\t\t// using the old template needs to be reset.\r\n\t\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER)\r\n\t\t\t\t\treturn formattedCompleteNumber\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Format the digits as a partial (incomplete) phone number\r\n\t\t// using the previously chosen formatting pattern (or a newly chosen one).\r\n\t\treturn this.formatNationalNumberWithNextDigits(nextDigits, state)\r\n\t}\r\n\r\n\t// Formats the next phone number digits.\r\n\tformatNationalNumberWithNextDigits(nextDigits, state) {\r\n\t\tconst previouslyChosenFormat = this.chosenFormat\r\n\t\t// Choose a format from the list of matching ones.\r\n\t\tconst newlyChosenFormat = this.chooseFormat(state)\r\n\t\tif (newlyChosenFormat) {\r\n\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\r\n\t\t\t\t// If it can format the next (current) digits\r\n\t\t\t\t// using the previously chosen phone number format\r\n\t\t\t\t// then return the updated formatted number.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits)\r\n\t\t\t} else {\r\n\t\t\t\t// If a more appropriate phone number format\r\n\t\t\t\t// has been chosen for these \"leading digits\",\r\n\t\t\t\t// then re-format the national phone number part\r\n\t\t\t\t// using the newly selected format.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(state.getNationalDigits())\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tnarrowDownMatchingFormats({\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalPrefix,\r\n\t\tinternational\r\n\t}) {\r\n\t\tconst leadingDigits = nationalSignificantNumber\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digit patterns already match for a single first digit.\r\n\t\tlet leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (leadingDigitsPatternIndex < 0) {\r\n\t\t\tleadingDigitsPatternIndex = 0\r\n\t\t}\r\n\r\n\t\tthis.matchingFormats = this.matchingFormats.filter(\r\n\t\t\tformat => this.formatSuits(format, international, nationalPrefix)\r\n\t\t\t\t&& this.formatMatches(format, leadingDigits, leadingDigitsPatternIndex)\r\n\t\t)\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tformatSuits(format, international, nationalPrefix) {\r\n\t\t// When a prefix before a national (significant) number is\r\n\t\t// simply a national prefix, then it's parsed as `this.nationalPrefix`.\r\n\t\t// In more complex cases, a prefix before national (significant) number\r\n\t\t// could include a national prefix as well as some \"capturing groups\",\r\n\t\t// and in that case there's no info whether a national prefix has been parsed.\r\n\t\t// If national prefix is not used when formatting a phone number\r\n\t\t// using this format, but a national prefix has been entered by the user,\r\n\t\t// and was extracted, then discard such phone number format.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\r\n\t\tif (nationalPrefix &&\r\n\t\t\t!format.usesNationalPrefix() &&\r\n\t\t\t// !format.domesticCarrierCodeFormattingRule() &&\r\n\t\t\t!format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and there're no guarantees that a national prefix is present in user input\r\n\t\t// then discard this phone number format as not suitable.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\r\n\t\tif (!international &&\r\n\t\t\t!nationalPrefix &&\r\n\t\t\tformat.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tformatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\r\n\t\tconst leadingDigitsPatternsCount = format.leadingDigitsPatterns().length\r\n\t\t// If this format is not restricted to a certain\r\n\t\t// leading digits pattern then it fits.\r\n\t\tif (leadingDigitsPatternsCount === 0) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// Start excluding any non-matching formats only when the\r\n\t\t// national number entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives.\r\n\t\t// For example, when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\r\n\t\t// then format matching starts narrowing down the list of possible formats\r\n\t\t// (only previously matched formats are considered for next digits).\r\n\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1)\r\n\t\tconst leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]\r\n\t\t// Brackets are required for `^` to be applied to\r\n\t\t// all or-ed (`|`) parts, not just the first one.\r\n\t\treturn new RegExp(`^(${leadingDigitsPattern})`).test(leadingDigits)\r\n\t}\r\n\r\n\tgetFormatFormat(format, international) {\r\n\t\treturn international ? format.internationalFormat() : format.format()\r\n\t}\r\n\r\n\tchooseFormat(state) {\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\tfor (const format of this.matchingFormats.slice()) {\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still suitable, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t// Sometimes, a formatting rule inserts additional digits in a phone number,\r\n\t\t\t// and \"as you type\" formatter can't do that: it should only use the digits\r\n\t\t\t// that the user has input.\r\n\t\t\t//\r\n\t\t\t// For example, in Argentina, there's a format for mobile phone numbers:\r\n\t\t\t//\r\n\t\t\t// {\r\n\t\t\t//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n\t\t\t//    \"leading_digits_patterns\": [\"91\"],\r\n\t\t\t//    \"national_prefix_formatting_rule\": \"0$1\",\r\n\t\t\t//    \"format\": \"$2 15-$3-$4\",\r\n\t\t\t//    \"international_format\": \"$1 $2 $3-$4\"\r\n\t\t\t// }\r\n\t\t\t//\r\n\t\t\t// In that format, `international_format` is used instead of `format`\r\n\t\t\t// because `format` inserts `15` in the formatted number,\r\n\t\t\t// and `AsYouType` formatter should only use the digits\r\n\t\t\t// the user has actually input, without adding any extra digits.\r\n\t\t\t// In this case, it wouldn't make a difference, because the `15`\r\n\t\t\t// is first stripped when applying `national_prefix_for_parsing`\r\n\t\t\t// and then re-added when using `format`, so in reality it doesn't\r\n\t\t\t// add any new digits to the number, but to detect that, the code\r\n\t\t\t// would have to be more complex: it would have to try formatting\r\n\t\t\t// the digits using the format and then see if any digits have\r\n\t\t\t// actually been added or removed, and then, every time a new digit\r\n\t\t\t// is input, it should re-check whether the chosen format doesn't\r\n\t\t\t// alter the digits.\r\n\t\t\t//\r\n\t\t\t// Google's code doesn't go that far, and so does this library:\r\n\t\t\t// it simply requires that a `format` doesn't add any additonal\r\n\t\t\t// digits to user's input.\r\n\t\t\t//\r\n\t\t\t// Also, people in general should move from inputting phone numbers\r\n\t\t\t// in national format (possibly with national prefixes)\r\n\t\t\t// and use international phone number format instead:\r\n\t\t\t// it's a logical thing in the modern age of mobile phones,\r\n\t\t\t// globalization and the internet.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (!NON_ALTERING_FORMAT_REG_EXP.test(this.getFormatFormat(format, state.international))) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tif (!this.createTemplateForFormat(format, state)) {\r\n\t\t\t\t// Remove the format if it can't generate a template.\r\n\t\t\t\tthis.matchingFormats = this.matchingFormats.filter(_ => _ !== format)\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tthis.chosenFormat = format\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tif (!this.chosenFormat) {\r\n\t\t\t// No format matches the national (significant) phone number.\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t\treturn this.chosenFormat\r\n\t}\r\n\r\n\tcreateTemplateForFormat(format, state) {\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.getTemplateForFormat(format, state)\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (template) {\r\n\t\t\tthis.setNationalNumberTemplate(template, state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tgetSeparatorAfterNationalPrefix = (format) => {\r\n\t\t// `US` metadata doesn't have a `national_prefix_formatting_rule`,\r\n\t\t// so the `if` condition below doesn't apply to `US`,\r\n\t\t// but in reality there shoudl be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\t// So `US` national prefix separator is a \"special\" \"hardcoded\" case.\r\n\t\tif (this.isNANP) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// If a `format` has a `national_prefix_formatting_rule`\r\n\t\t// and that rule has a separator after a national prefix,\r\n\t\t// then it means that there should be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\tif (format &&\r\n\t\t\tformat.nationalPrefixFormattingRule() &&\r\n\t\t\tNATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// At this point, there seems to be no clear evidence that\r\n\t\t// there should be a separator between a national prefix\r\n\t\t// and a national (significant) number. So don't insert one.\r\n\t\treturn ''\r\n\t}\r\n\r\n\tgetInternationalPrefixBeforeCountryCallingCode({ IDDPrefix, missingPlus }, options) {\r\n\t\tif (IDDPrefix) {\r\n\t\t\treturn options && options.spacing === false ? IDDPrefix : IDDPrefix + ' '\r\n\t\t}\r\n\t\tif (missingPlus) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\r\n\tgetTemplate(state) {\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// `this.template` holds the template for a \"complete\" phone number.\r\n\t\t// The currently entered phone number is most likely not \"complete\",\r\n\t\t// so trim all non-populated digits.\r\n\t\tlet index = -1\r\n\t\tlet i = 0\r\n\t\tconst internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, { spacing: false }) : ''\r\n\t\twhile (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\t\treturn cutAndStripNonPairedParens(this.template, index + 1)\r\n\t}\r\n\r\n\tsetNationalNumberTemplate(template, state) {\r\n\t\tthis.nationalNumberTemplate = template\r\n\t\tthis.populatedNationalNumberTemplate = template\r\n\t\t// With a new formatting template, the matched position\r\n\t\t// using the old template needs to be reset.\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (state.international) {\r\n\t\t\tthis.template =\r\n\t\t\t\tthis.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) +\r\n\t\t\t\trepeat(DIGIT_PLACEHOLDER, state.callingCode.length) +\r\n\t\t\t\t' ' +\r\n\t\t\t\ttemplate\r\n\t\t} else {\r\n\t\t\tthis.template = template\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates formatting template for a national phone number,\r\n\t * optionally containing a national prefix, for a format.\r\n\t * @param  {Format} format\r\n\t * @param  {string} nationalPrefix\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplateForFormat(format, {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t}) {\r\n\t\tlet pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\r\n\t\t\tpattern = pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// Generate a dummy national number (consisting of `9`s)\r\n\t\t// that fits this format's `pattern`.\r\n\t\t//\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\t//\r\n\t\tlet digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (nationalSignificantNumber.length > digits.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strictPattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strictPattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalSignificantNumber : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// format : `$1 $2 $3`\r\n\t\t// digits : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then `this.nationalSignificantNumber`\r\n\t\t// is used instead of `digits`.\r\n\r\n\t\tconst strictPattern = new RegExp('^' + pattern + '$')\r\n\t\tconst nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then use it\r\n\t\t// instead of `digits`.\r\n\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\r\n\t\t\tdigits = nationalNumberDummyDigits\r\n\t\t}\r\n\r\n\t\tlet numberFormat = this.getFormatFormat(format, international)\r\n\t\tlet nationalPrefixIncludedInTemplate\r\n\r\n\t\t// If a user did input a national prefix (and that's guaranteed),\r\n\t\t// and if a `format` does have a national prefix formatting rule,\r\n\t\t// then see if that national prefix formatting rule\r\n\t\t// prepends exactly the same national prefix the user has input.\r\n\t\t// If that's the case, then use the `format` with the national prefix formatting rule.\r\n\t\t// Otherwise, use  the `format` without the national prefix formatting rule,\r\n\t\t// and prepend a national prefix manually to it.\r\n\t\tif (this.shouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix })) {\r\n\t\t\tconst numberFormatWithNationalPrefix = numberFormat.replace(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tformat.nationalPrefixFormattingRule()\r\n\t\t\t)\r\n\t\t\t// If `national_prefix_formatting_rule` of a `format` simply prepends\r\n\t\t\t// national prefix at the start of a national (significant) number,\r\n\t\t\t// then such formatting can be used with `AsYouType` formatter.\r\n\t\t\t// There seems to be no `else` case: everywhere in metadata,\r\n\t\t\t// national prefix formatting rule is national prefix + $1,\r\n\t\t\t// or `($1)`, in which case such format isn't even considered\r\n\t\t\t// when the user has input a national prefix.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\r\n\t\t\t\tnumberFormat = numberFormatWithNationalPrefix\r\n\t\t\t\tnationalPrefixIncludedInTemplate = true\r\n\t\t\t\t// Replace all digits of the national prefix in the formatting template\r\n\t\t\t\t// with `DIGIT_PLACEHOLDER`s.\r\n\t\t\t\tif (nationalPrefix) {\r\n\t\t\t\t\tlet i = nationalPrefix.length\r\n\t\t\t\t\twhile (i > 0) {\r\n\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER)\r\n\t\t\t\t\t\ti--\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format.\r\n\t\tlet template = digits\r\n\t\t\t// Format the dummy phone number according to the format.\r\n\t\t\t.replace(new RegExp(pattern), numberFormat)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\r\n\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t// as just a basic national prefix, then just prepend such prefix\r\n\t\t// before the national (significant) number, optionally spacing\r\n\t\t// the two with a whitespace.\r\n\t\tif (!nationalPrefixIncludedInTemplate) {\r\n\t\t\tif (complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\t\t// Prepend the prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) +\r\n\t\t\t\t\t' ' +\r\n\t\t\t\t\ttemplate\r\n\t\t\t} else if (nationalPrefix) {\r\n\t\t\t\t// Prepend national prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) +\r\n\t\t\t\t\tthis.getSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (international) {\r\n\t\t\ttemplate = applyInternationalSeparatorStyle(template)\r\n\t\t}\r\n\r\n\t\treturn template\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits) {\r\n\t\tconst result = populateTemplateWithDigits(\r\n\t\t\tthis.populatedNationalNumberTemplate,\r\n\t\t\tthis.populatedNationalNumberTemplatePosition,\r\n\t\t\tdigits\r\n\t\t)\r\n\r\n\t\tif (!result) {\r\n\t\t\t// Reset the format.\r\n\t\t\tthis.resetFormat()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.populatedNationalNumberTemplate = result[0]\r\n\t\tthis.populatedNationalNumberTemplatePosition = result[1]\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\r\n\t}\r\n\r\n\tshouldTryNationalPrefixFormattingRule = (format, { international, nationalPrefix }) => {\r\n\t\tif (format.nationalPrefixFormattingRule()) {\r\n\t\t\t// In some countries, `national_prefix_formatting_rule` is `($1)`,\r\n\t\t\t// so it applies even if the user hasn't input a national prefix.\r\n\t\t\t// `format.usesNationalPrefix()` detects such cases.\r\n\t\t\tconst usesNationalPrefix = format.usesNationalPrefix()\r\n\t\t\tif ((usesNationalPrefix && nationalPrefix) ||\r\n\t\t\t\t(!usesNationalPrefix && !international)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import extractCountryCallingCode from './helpers/extractCountryCallingCode'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign'\r\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber'\r\nimport stripIddPrefix from './helpers/stripIddPrefix'\r\nimport parseDigits from './helpers/parseDigits'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART =\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i')\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_PART =\r\n\t'(?:' +\r\n\t\t'[' + PLUS_CHARS + ']' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']*' +\r\n\t\t'|' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']+' +\r\n\t')'\r\n\r\nconst AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp(\r\n\t'[^' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+' +\r\n\t'.*' +\r\n\t'$'\r\n)\r\n\r\n// Tests whether `national_prefix_for_parsing` could match\r\n// different national prefixes.\r\n// Matches anything that's not a digit or a square bracket.\r\nconst COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/\r\n\r\nexport default class AsYouTypeParser {\r\n\tconstructor({\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata,\r\n\t\tonNationalSignificantNumberChange\r\n\t}) {\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.metadata = metadata\r\n\t\tthis.onNationalSignificantNumberChange = onNationalSignificantNumberChange\r\n\t}\r\n\r\n\tinput(text, state) {\r\n\t\tconst [formattedDigits, hasPlus] = extractFormattedDigitsAndPlus(text)\r\n\t\tconst digits = parseDigits(formattedDigits)\r\n\t\t// Checks for a special case: just a leading `+` has been entered.\r\n\t\tlet justLeadingPlus\r\n\t\tif (hasPlus) {\r\n\t\t\tif (!state.digits) {\r\n\t\t\t\tstate.startInternationalNumber()\r\n\t\t\t\tif (!digits) {\r\n\t\t\t\t\tjustLeadingPlus = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (digits) {\r\n\t\t\tthis.inputDigits(digits, state)\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number digits.\r\n\t * @param  {string} digits\r\n\t * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n\t */\r\n\tinputDigits(nextDigits, state) {\r\n\t\tconst { digits } = state\r\n\t\tconst hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3\r\n\r\n\t\t// Append phone number digits.\r\n\t\tstate.appendDigits(nextDigits)\r\n\r\n\t\t// Attempt to extract IDD prefix:\r\n\t\t// Some users input their phone number in international format,\r\n\t\t// but in an \"out-of-country\" dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers as soon as there're at least 3 digits.\r\n\t\t// Google's library attempts to extract IDD prefix at 3 digits,\r\n\t\t// so this library just copies that behavior.\r\n\t\t// I guess that's because the most commot IDD prefixes are\r\n\t\t// `00` (Europe) and `011` (US).\r\n\t\t// There exist really long IDD prefixes too:\r\n\t\t// for example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t// An IDD prefix is extracted here, and then every time when\r\n\t\t// there's a new digit and the number couldn't be formatted.\r\n\t\tif (hasReceivedThreeLeadingDigits) {\r\n\t\t\tthis.extractIddPrefix(state)\r\n\t\t}\r\n\r\n\t\tif (this.isWaitingForCountryCallingCode(state)) {\r\n\t\t\tif (!this.extractCountryCallingCode(state)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tstate.appendNationalSignificantNumberDigits(nextDigits)\r\n\t\t}\r\n\r\n\t\t// If a phone number is being input in international format,\r\n\t\t// then it's not valid for it to have a national prefix.\r\n\t\t// Still, some people incorrectly input such numbers with a national prefix.\r\n\t\t// In such cases, only attempt to strip a national prefix if the number becomes too long.\r\n\t\t// (but that is done later, not here)\r\n\t\tif (!state.international) {\r\n\t\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\t\tthis.extractNationalSignificantNumber(state.getNationalDigits(), state.update)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisWaitingForCountryCallingCode({ international, callingCode }) {\r\n\t\treturn international && !callingCode\r\n\t}\r\n\r\n\t// Extracts a country calling code from a number\r\n\t// being entered in internatonal format.\r\n\textractCountryCallingCode(state) {\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\t\t'+' + state.getDigitsWithoutInternationalPrefix(),\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (countryCallingCode) {\r\n\t\t\tstate.setCallingCode(countryCallingCode)\r\n\t\t\tstate.update({\r\n\t\t\t\tnationalSignificantNumber: number\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\treset(numberingPlan) {\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.hasSelectedNumberingPlan = true\r\n\t\t\tconst nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing()\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing)\r\n\t\t} else {\r\n\t\t\tthis.hasSelectedNumberingPlan = undefined\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts a national (significant) number from user input.\r\n\t * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n\t * and doesn't apply `national_prefix_transform_rule` after that.\r\n\t * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n\t * @return {boolean} [extracted]\r\n\t */\r\n\textractNationalSignificantNumber(nationalDigits, setState) {\r\n\t\tif (!this.hasSelectedNumberingPlan) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\tif (nationalNumber === nationalDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\t/**\r\n\t * In Google's code this function is called \"attempt to extract longer NDD\".\r\n\t * \"Some national prefixes are a substring of others\", they say.\r\n\t * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n\t */\r\n\textractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\r\n\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\treturn this.extractNationalSignificantNumber(nationalDigits, setState)\r\n\t\t}\r\n\t\tif (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\t// If a national prefix has been extracted previously,\r\n\t\t// then it's always extracted as additional digits are added.\r\n\t\t// That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\r\n\t\t// doesn't do anything different from what it currently does.\r\n\t\t// So, just in case, here's this check, though it doesn't occur.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (nationalNumber === prevNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\tonExtractedNationalNumber(\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalDigits,\r\n\t\tsetState\r\n\t) {\r\n\t\tlet complexPrefixBeforeNationalSignificantNumber\r\n\t\tlet nationalSignificantNumberMatchesInput\r\n\t\t// This check also works with empty `this.nationalSignificantNumber`.\r\n\t\tconst nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber)\r\n\t\t// If the extracted national (significant) number is the\r\n\t\t// last substring of the `digits`, then it means that it hasn't been altered:\r\n\t\t// no digits have been removed from the national (significant) number\r\n\t\t// while applying `national_prefix_transform_rule`.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\tif (nationalSignificantNumberIndex >= 0 &&\r\n\t\t\tnationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\r\n\t\t\tnationalSignificantNumberMatchesInput = true\r\n\t\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t\t// as just a basic national prefix, then such prefix is stored in\r\n\t\t\t// `this.complexPrefixBeforeNationalSignificantNumber` property and will be\r\n\t\t\t// prepended \"as is\" to the national (significant) number to produce\r\n\t\t\t// a formatted result.\r\n\t\t\tconst prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex)\r\n\t\t\t// `prefixBeforeNationalNumber` is always non-empty,\r\n\t\t\t// because `onExtractedNationalNumber()` isn't called\r\n\t\t\t// when a national (significant) number hasn't been actually \"extracted\":\r\n\t\t\t// when a national (significant) number is equal to the national part of `digits`,\r\n\t\t\t// then `onExtractedNationalNumber()` doesn't get called.\r\n\t\t\tif (prefixBeforeNationalNumber !== nationalPrefix) {\r\n\t\t\t\tcomplexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetState({\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tnationalSignificantNumberMatchesInput,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t\t})\r\n\t\t// `onExtractedNationalNumber()` is only called when\r\n\t\t// the national (significant) number actually did change.\r\n\t\tthis.hasExtractedNationalSignificantNumber = true\r\n\t\tthis.onNationalSignificantNumberChange()\r\n\t}\r\n\r\n\treExtractNationalSignificantNumber(state) {\r\n\t\t// Attempt to extract a national prefix.\r\n\t\t//\r\n\t\t// Some people incorrectly input national prefix\r\n\t\t// in an international phone number.\r\n\t\t// For example, some people write British phone numbers as `+44(0)...`.\r\n\t\t//\r\n\t\t// Also, in some rare cases, it is valid for a national prefix\r\n\t\t// to be a part of an international phone number.\r\n\t\t// For example, mobile phone numbers in Mexico are supposed to be\r\n\t\t// dialled internationally using a `1` national prefix,\r\n\t\t// so the national prefix will be part of an international number.\r\n\t\t//\r\n\t\t// Quote from:\r\n\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\r\n\t\t//\r\n\t\t// \"Dialing a Mexican cell phone from abroad\r\n\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\r\n\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\r\n\t\t// (which is “52”) and before the area code.\r\n\t\t// You also ignore the 045, and simply dial the area code and the\r\n\t\t// cell phone’s number.\r\n\t\t//\r\n\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\r\n\t\t// asking you to redial using it.\r\n\t\t//\r\n\t\t// For example, if you are calling from the USA to a cell phone\r\n\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\r\n\t\t// (Note that this is different to calling a land line in Mexico City\r\n\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\r\n\t\t//\r\n\t\t// Google's demo output:\r\n\t\t// https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\r\n\t\t//\r\n\t\tif (this.extractAnotherNationalSignificantNumber(\r\n\t\t\tstate.getNationalDigits(),\r\n\t\t\tstate.nationalSignificantNumber,\r\n\t\t\tstate.update\r\n\t\t)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// If no format matches the phone number, then it could be\r\n\t\t// \"a really long IDD\" (quote from a comment in Google's library).\r\n\t\t// An IDD prefix is first extracted when the user has entered at least 3 digits,\r\n\t\t// and then here — every time when there's a new digit and the number\r\n\t\t// couldn't be formatted.\r\n\t\t// For example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t//\r\n\t\t// Could also check `!hasReceivedThreeLeadingDigits` here\r\n\t\t// to filter out the case when this check duplicates the one\r\n\t\t// already performed when there're 3 leading digits,\r\n\t\t// but it's not a big deal, and in most cases there\r\n\t\t// will be a suitable `format` when there're 3 leading digits.\r\n\t\t//\r\n\t\tif (this.extractIddPrefix(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// Google's AsYouType formatter supports sort of an \"autocorrection\" feature\r\n\t\t// when it \"autocorrects\" numbers that have been input for a country\r\n\t\t// with that country's calling code.\r\n\t\t// Such \"autocorrection\" feature looks weird, but different people have been requesting it:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/375\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/316\r\n\t\tif (this.fixMissingPlus(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\textractIddPrefix(state) {\r\n\t\t// An IDD prefix can't be present in a number written with a `+`.\r\n\t\t// Also, don't re-extract an IDD prefix if has already been extracted.\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tIDDPrefix,\r\n\t\t\tdigits,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = state\r\n\t\tif (international || IDDPrefix) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Some users input their phone number in \"out-of-country\"\r\n\t\t// dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(\r\n\t\t\tdigits,\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\r\n\t\t\t// If an IDD prefix was stripped then convert the IDD-prefixed number\r\n\t\t\t// to international number for subsequent parsing.\r\n\t\t\tstate.update({\r\n\t\t\t\tIDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\r\n\t\t\t})\r\n\t\t\tthis.startInternationalNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tfixMissingPlus(state) {\r\n\t\tif (!state.international) {\r\n\t\t\tconst {\r\n\t\t\t\tcountryCallingCode: newCallingCode,\r\n\t\t\t\tnumber\r\n\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\tstate.digits,\r\n\t\t\t\tthis.defaultCountry,\r\n\t\t\t\tthis.defaultCallingCode,\r\n\t\t\t\tthis.metadata.metadata\r\n\t\t\t)\r\n\t\t\tif (newCallingCode) {\r\n\t\t\t\tstate.update({\r\n\t\t\t\t\tmissingPlus: true\r\n\t\t\t\t})\r\n\t\t\t\tthis.startInternationalNumber(state)\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstartInternationalNumber(state) {\r\n\t\tstate.startInternationalNumber()\r\n\t\t// If a national (significant) number has been extracted before, reset it.\r\n\t\tif (state.nationalSignificantNumber) {\r\n\t\t\tstate.resetNationalSignificantNumber()\r\n\t\t\tthis.onNationalSignificantNumberChange()\r\n\t\t\tthis.hasExtractedNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\textractCallingCodeAndNationalSignificantNumber(state) {\r\n\t\tif (this.extractCountryCallingCode(state)) {\r\n\t\t\t// `this.extractCallingCode()` is currently called when the number\r\n\t\t\t// couldn't be formatted during the standard procedure.\r\n\t\t\t// Normally, the national prefix would be re-extracted\r\n\t\t\t// for an international number if such number couldn't be formatted,\r\n\t\t\t// but since it's already not able to be formatted,\r\n\t\t\t// there won't be yet another retry, so also extract national prefix here.\r\n\t\t\tthis.extractNationalSignificantNumber(state.getNationalDigits(), state.update)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\r\nfunction extractFormattedPhoneNumber(text) {\r\n\t// Attempt to extract a possible number from the string passed in.\r\n\tconst startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\t// Trim everything to the left of the phone number.\r\n\ttext = text.slice(startsAt)\r\n\t// Trim the `+`.\r\n\tlet hasPlus\r\n\tif (text[0] === '+') {\r\n\t\thasPlus = true\r\n\t\ttext = text.slice('+'.length)\r\n\t}\r\n\t// Trim everything to the right of the phone number.\r\n\ttext = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, '')\r\n\t// Re-add the previously trimmed `+`.\r\n\tif (hasPlus) {\r\n\t\ttext = '+' + text\r\n\t}\r\n\treturn text\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nfunction _extractFormattedDigitsAndPlus(text) {\r\n\t// Extract a formatted phone number part from text.\r\n\tconst extractedNumber = extractFormattedPhoneNumber(text) || ''\r\n\t// Trim a `+`.\r\n\tif (extractedNumber[0] === '+') {\r\n\t\treturn [extractedNumber.slice('+'.length), true]\r\n\t}\r\n\treturn [extractedNumber]\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nexport function extractFormattedDigitsAndPlus(text) {\r\n\tlet [formattedDigits, hasPlus] = _extractFormattedDigitsAndPlus(text)\r\n\t// If the extracted phone number part\r\n\t// can possibly be a part of some valid phone number\r\n\t// then parse phone number characters from a formatted phone number.\r\n\tif (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\r\n\t\tformattedDigits = ''\r\n\t}\r\n\treturn [formattedDigits, hasPlus]\r\n}","import Metadata from './metadata'\r\nimport PhoneNumber from './PhoneNumber'\r\nimport AsYouTypeState from './AsYouTypeState'\r\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter'\r\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class AsYouType {\r\n\t/**\r\n\t * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(optionsOrDefaultCountry, metadata) {\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\t\tconst [defaultCountry, defaultCallingCode] = this.getCountryAndCallingCode(optionsOrDefaultCountry)\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tgetCountryAndCallingCode(optionsOrDefaultCountry) {\r\n\t\t// Set `defaultCountry` and `defaultCallingCode` options.\r\n\t\tlet defaultCountry\r\n\t\tlet defaultCallingCode\r\n\t\t// Turns out `null` also has type \"object\". Weird.\r\n\t\tif (optionsOrDefaultCountry) {\r\n\t\t\tif (typeof optionsOrDefaultCountry === 'object') {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry.defaultCountry\r\n\t\t\t\tdefaultCallingCode = optionsOrDefaultCountry.defaultCallingCode\r\n\t\t\t} else {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tdefaultCountry = undefined\r\n\t\t}\r\n\t\tif (defaultCallingCode) {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tdefaultCountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [defaultCountry, defaultCallingCode]\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number characters.\r\n\t * @param  {string} text\r\n\t * @return {string} Formatted phone number characters that have been input so far.\r\n\t */\r\n\tinput(text) {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t} = this.parser.input(text, this.state)\r\n\t\tif (justLeadingPlus) {\r\n\t\t\tthis.formattedOutput = '+'\r\n\t\t} else if (digits) {\r\n\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t// Match the available formats by the currently available leading digits.\r\n\t\t\tif (this.state.nationalSignificantNumber) {\r\n\t\t\t\tthis.formatter.narrowDownMatchingFormats(this.state)\r\n\t\t\t}\r\n\t\t\tlet formattedNationalNumber\r\n\t\t\tif (this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\t\tformattedNationalNumber = this.formatter.format(digits, this.state)\r\n\t\t\t}\r\n\t\t\tif (formattedNationalNumber === undefined) {\r\n\t\t\t\t// See if another national (significant) number could be re-extracted.\r\n\t\t\t\tif (this.parser.reExtractNationalSignificantNumber(this.state)) {\r\n\t\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\t\t// If it could, then re-try formatting the new national (significant) number.\r\n\t\t\t\t\tconst nationalDigits = this.state.getNationalDigits()\r\n\t\t\t\t\tif (nationalDigits) {\r\n\t\t\t\t\t\tformattedNationalNumber = this.formatter.format(nationalDigits, this.state)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.formattedOutput = formattedNationalNumber\r\n\t\t\t\t? this.getFullNumber(formattedNationalNumber)\r\n\t\t\t\t: this.getNonFormattedNumber()\r\n\t\t}\r\n\t\treturn this.formattedOutput\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.state = new AsYouTypeState({\r\n\t\t\tonCountryChange: (country) => {\r\n\t\t\t\t// Before version `1.6.0`, the official `AsYouType` formatter API\r\n\t\t\t\t// included the `.country` property of an `AsYouType` instance.\r\n\t\t\t\t// Since that property (along with the others) have been moved to\r\n\t\t\t\t// `this.state`, `this.country` property is emulated for compatibility\r\n\t\t\t\t// with the old versions.\r\n\t\t\t\tthis.country = country\r\n\t\t\t},\r\n\t\t\tonCallingCodeChange: (country, callingCode) => {\r\n\t\t\t\tthis.metadata.selectNumberingPlan(country, callingCode)\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t\tthis.parser.reset(this.metadata.numberingPlan)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.formatter = new AsYouTypeFormatter({\r\n\t\t\tstate: this.state,\r\n\t\t\tmetadata: this.metadata\r\n\t\t})\r\n\t\tthis.parser = new AsYouTypeParser({\r\n\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\tdefaultCallingCode: this.defaultCallingCode,\r\n\t\t\tmetadata: this.metadata,\r\n\t\t\tstate: this.state,\r\n\t\t\tonNationalSignificantNumberChange: () => {\r\n\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.state.reset(this.defaultCountry, this.defaultCallingCode)\r\n\t\tthis.formattedOutput = ''\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is being input in international format.\r\n\t * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisInternational() {\r\n\t\treturn this.state.international\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the \"country calling code\" part of the phone number.\r\n\t * Returns `undefined` if the number is not being input in international format.\r\n\t * Returns \"country calling code\" for \"non-geographic\" phone numbering plans too.\r\n\t * @return {string} [callingCode]\r\n\t */\r\n\tgetCallingCode() {\r\n\t\treturn this.state.callingCode\r\n\t}\r\n\r\n\t// A legacy alias.\r\n\tgetCountryCallingCode() {\r\n\t\treturn this.getCallingCode()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * Returns `undefined` if no phone number has been input yet.\r\n\t * @return {string} [country]\r\n\t */\r\n\tgetCountry() {\r\n\t\tconst { digits, country } = this.state\r\n\t\t// If no digits have been input yet,\r\n\t\t// then `this.country` is the `defaultCountry`.\r\n\t\t// Won't return the `defaultCountry` in such case.\r\n\t\tif (!digits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet countryCode = country\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t// `AsYouType.getCountry()` returns `undefined`\r\n\t\t\t// for \"non-geographic\" phone numbering plans.\r\n\t\t\tif (countryCode === '001') {\r\n\t\t\t\tcountryCode = undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn countryCode\r\n\t}\r\n\r\n\tdetermineTheCountryIfNeeded() {\r\n\t\t// Suppose a user enters a phone number in international format,\r\n\t\t// and there're several countries corresponding to that country calling code,\r\n\t\t// and a country has been derived from the number, and then\r\n\t\t// a user enters one more digit and the number is no longer\r\n\t\t// valid for the derived country, so the country should be re-derived\r\n\t\t// on every new digit in those cases.\r\n\t\t//\r\n\t\t// If the phone number is being input in national format,\r\n\t\t// then it could be a case when `defaultCountry` wasn't specified\r\n\t\t// when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\r\n\t\t// and that \"calling code\" could correspond to a \"non-geographic entity\",\r\n\t\t// or there could be several countries corresponding to that country calling code.\r\n\t\t// In those cases, `this.country` is `undefined` and should be derived\r\n\t\t// from the number. Again, if country calling code is ambiguous, then\r\n\t\t// `this.country` should be re-derived with each new digit.\r\n\t\t//\r\n\t\tif (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\r\n\t\t\tthis.determineTheCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode ` in case of an international phone number\r\n\tgetFullNumber(formattedNationalNumber) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tconst prefix = (text) => this.formatter.getInternationalPrefixBeforeCountryCallingCode(this.state, {\r\n\t\t\t\tspacing: text ? true : false\r\n\t\t\t}) + text\r\n\t\t\tconst { callingCode } = this.state\r\n\t\t\tif (!callingCode) {\r\n\t\t\t\treturn prefix(`${this.state.getDigitsWithoutInternationalPrefix()}`)\r\n\t\t\t}\r\n\t\t\tif (!formattedNationalNumber) {\r\n\t\t\t\treturn prefix(callingCode)\r\n\t\t\t}\r\n\t\t\treturn prefix(`${callingCode} ${formattedNationalNumber}`)\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\tgetNonFormattedNationalNumberWithPrefix() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber,\r\n\t\t\tnationalPrefix\r\n\t\t} = this.state\r\n\t\tlet number = nationalSignificantNumber\r\n\t\tconst prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix\r\n\t\tif (prefix) {\r\n\t\t\tnumber = prefix + number\r\n\t\t}\r\n\t\treturn number\r\n\t}\r\n\r\n\tgetNonFormattedNumber() {\r\n\t\tconst { nationalSignificantNumberMatchesInput } = this.state\r\n\t\treturn this.getFullNumber(\r\n\t\t\tnationalSignificantNumberMatchesInput\r\n\t\t\t\t? this.getNonFormattedNationalNumberWithPrefix()\r\n\t\t\t\t: this.state.getNationalDigits()\r\n\t\t)\r\n\t}\r\n\r\n\tgetNonFormattedTemplate() {\r\n\t\tconst number = this.getNonFormattedNumber()\r\n\t\tif (number) {\r\n\t\t\treturn number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\t}\r\n\r\n\tisCountryCallingCodeAmbiguous() {\r\n\t\tconst { callingCode } = this.state\r\n\t\tconst countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\treturn countryCodes && countryCodes.length > 1\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.state.setCountry(getCountryByCallingCode(\r\n\t\t\tthis.isInternational() ? this.state.callingCode : this.defaultCallingCode,\r\n\t\t\tthis.state.nationalSignificantNumber,\r\n\t\t\tthis.metadata\r\n\t\t))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber() {\r\n\t\tlet {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = this.state\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (!this.state.callingCode) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (!this.state.country && !this.defaultCallingCode) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!nationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst countryCode = this.getCountry()\r\n\t\tconst callingCode = this.getCountryCallingCode() || this.defaultCallingCode\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCode || callingCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"possible\".\r\n\t * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisPossible() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isPossible()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"valid\".\r\n\t * Is just a shortcut for `PhoneNumber.isValid()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisValid() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isValid()\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * This method is used in `react-phone-number-input/source/input-control.js`\r\n\t * in versions before `3.0.16`.\r\n\t */\r\n\tgetNationalNumber() {\r\n\t\treturn this.state.nationalSignificantNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the phone number characters entered by the user.\r\n\t * @return {string}\r\n\t */\r\n\tgetChars() {\r\n\t\treturn (this.state.international ? '+' : '') + this.state.digits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the template for the formatted phone number.\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplate() {\r\n\t\treturn this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || ''\r\n\t}\r\n}","import { getCountryCallingCode } from 'libphonenumber-js/core'\r\n\r\nexport function getInputValuePrefix({\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tmetadata\r\n}) {\r\n\treturn country && international && !withCountryCallingCode ?\r\n\t\t`+${getCountryCallingCode(country, metadata)}` :\r\n\t\t''\r\n}\r\n\r\nexport function removeInputValuePrefix(value, prefix) {\r\n\tif (prefix) {\r\n\t\tvalue = value.slice(prefix.length)\r\n\t\tif (value[0] === ' ') {\r\n\t\t\tvalue = value.slice(1)\r\n\t\t}\r\n\t}\r\n\treturn value\r\n}","import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from 'input-format/react'\r\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix'\r\n\r\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\r\nexport function createInput(defaultMetadata)\r\n{\r\n\tfunction InputSmart({\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst format = useCallback((value) => {\r\n\t\t\t// \"As you type\" formatter.\r\n\t\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t\tconst prefix = getInputValuePrefix({\r\n\t\t\t\tcountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\twithCountryCallingCode,\r\n\t\t\t\tmetadata\r\n\t\t\t})\r\n\t\t\t// Format the number.\r\n\t\t\tlet text = formatter.input(prefix + value)\r\n\t\t\tlet template = formatter.getTemplate()\r\n\t\t\tif (prefix) {\r\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\r\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\r\n\t\t\t\tif (template) {\r\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttext,\r\n\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}, [country, metadata])\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tparse={parsePhoneNumberCharacter}\r\n\t\t\t\tformat={format}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputSmart = React.forwardRef(InputSmart)\r\n\r\n\tInputSmart.propTypes = {\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tInputSmart.defaultProps = {\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn InputSmart\r\n}\r\n\r\nexport default createInput()","import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n\t * but still works good enough. When erasing or inserting digits in the middle\r\n\t * of a phone number the caret usually jumps to the end: this is the expected\r\n\t * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata,\r\n\t\tinputComponent: Input,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getInputValuePrefix({\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t// Working around this issue with this simple hack.\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [prefix, value, onChange, country, metadata])\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value`.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType.isRequired\r\n\t}\r\n\r\n\tInputBasic.defaultProps = {\r\n\t\tmetadata: defaultMetadata,\r\n\t\tinputComponent: 'input'\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removeInputValuePrefix(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}","import AsYouType from './AsYouType'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\r\n\tif (!metadata) {\r\n\t\tmetadata = country\r\n\t\tcountry = undefined\r\n\t}\r\n\treturn new AsYouType(country, metadata).input(value)\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n// Default country flag icon.\r\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\r\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\r\nexport default function FlagComponent({\r\n\tcountry,\r\n\tcountryName,\r\n\tflags,\r\n\tflagUrl,\r\n\t...rest\r\n}) {\r\n\tif (flags && flags[country]) {\r\n\t\treturn flags[country]({ title: countryName })\r\n\t}\r\n\treturn (\r\n\t\t<img\r\n\t\t\t{...rest}\r\n\t\t\talt={countryName}\r\n\t\t\trole={countryName ? undefined : \"presentation\"}\r\n\t\t\tsrc={flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())}/>\r\n\t)\r\n}\r\n\r\nFlagComponent.propTypes = {\r\n\t// The country to be selected by default.\r\n\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tcountry: PropTypes.string.isRequired,\r\n\r\n\t// Will be HTML `title` attribute of the `<img/>`.\r\n\tcountryName: PropTypes.string.isRequired,\r\n\r\n\t// Country flag icon components.\r\n\t// By default flag icons are inserted as `<img/>`s\r\n\t// with their `src` pointed to `country-flag-icons` gitlab pages website.\r\n\t// There might be cases (e.g. an offline application)\r\n\t// where having a large (3 megabyte) `<svg/>` flags\r\n\t// bundle is more appropriate.\r\n\t// `import flags from 'react-phone-number-input/flags'`.\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t// A URL for a country flag icon.\r\n\t// By default it points to `country-flag-icons` gitlab pages website.\r\n\tflagUrl: PropTypes.string.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function InternationalIcon({ aspectRatio, ...rest }) {\r\n\tif (aspectRatio === 1) {\r\n\t\treturn <InternationalIcon1x1 {...rest}/>\r\n\t} else {\r\n\t\treturn <InternationalIcon3x2 {...rest}/>\r\n\t}\r\n}\r\n\r\nInternationalIcon.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\taspectRatio: PropTypes.number\r\n}\r\n\r\n// 3x2.\r\n// Using `<title/>` in `<svg/>`s:\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\r\nfunction InternationalIcon3x2({ title, ...rest }) {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\t{...rest}\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\tviewBox=\"0 0 75 50\">\r\n\t\t\t<title>{title}</title>\r\n\t\t\t<g\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconGlobe\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeMiterlimit=\"10\">\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"/>\r\n\t\t\t\t<path d=\"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"/>\r\n\t\t\t\t<line x1=\"26\" y1=\"25\" x2=\"74\" y2=\"25\"/>\r\n\t\t\t\t<line x1=\"50\" y1=\"1\" x2=\"50\" y2=\"49\"/>\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"/>\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"/>\r\n\t\t\t</g>\r\n\t\t\t<path\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconPhone\"\r\n\t\t\t\tstroke=\"none\"\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"/>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nInternationalIcon3x2.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n}\r\n\r\n// 1x1.\r\n// Using `<title/>` in `<svg/>`s:\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\r\nfunction InternationalIcon1x1({ title, ...rest }) {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\t{...rest}\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\tviewBox=\"0 0 50 50\">\r\n\t\t\t<title>{title}</title>\r\n\t\t\t<g\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconGlobe\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeLinecap=\"round\">\r\n\t\t\t\t<path d=\"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"/>\r\n\t\t\t\t<path d=\"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"/>\r\n\t\t\t\t<path d=\"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"/>\r\n\t\t\t\t<path d=\"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"/>\r\n\t\t\t\t<line x1=\"27.8\" y1=\"0.85\" x2=\"27.8\" y2=\"34.61\"/>\r\n\t\t\t\t<line x1=\"15.2\" y1=\"22.23\" x2=\"49.15\" y2=\"22.23\"/>\r\n\t\t\t</g>\r\n\t\t\t<path\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconPhone\"\r\n\t\t\t\tstroke=\"transparent\"\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"/>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nInternationalIcon1x1.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n}\r\n","import { isSupportedCountry } from 'libphonenumber-js/core'\r\nexport { getCountries } from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\r\nexport function sortCountryOptions(options, order) {\r\n\tif (!order) {\r\n\t\treturn options\r\n\t}\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\tfor (const element of order) {\r\n\t\tif (element === '|') {\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t} else if (element === '...' || element === '…') {\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t} else {\r\n\t\t\tlet countryCode\r\n\t\t\tif (element === '🌐') {\r\n\t\t\t\tcountryCode = undefined\r\n\t\t\t} else {\r\n\t\t\t\tcountryCode = element\r\n\t\t\t}\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === countryCode)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nexport function getSupportedCountryOptions(countryOptions, metadata) {\r\n\tif (countryOptions) {\r\n\t\tcountryOptions = countryOptions.filter((option) => {\r\n\t\t\tswitch (option) {\r\n\t\t\t\tcase '🌐':\r\n\t\t\t\tcase '|':\r\n\t\t\t\tcase '...':\r\n\t\t\t\tcase '…':\r\n\t\t\t\t\treturn true\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn isCountrySupportedWithError(option, metadata)\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (countryOptions.length > 0) {\r\n\t\t\treturn countryOptions\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isCountrySupportedWithError(country, metadata) {\r\n\tif (isSupportedCountry(country, metadata)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\tconsole.error(`Country not found: ${country}`)\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nexport function getSupportedCountries(countries, metadata) {\r\n\tif (countries) {\r\n\t\tcountries = countries.filter(country => isCountrySupportedWithError(country, metadata))\r\n\t\tif (countries.length === 0) {\r\n\t\t\tcountries = undefined\r\n\t\t}\r\n\t}\r\n\treturn countries\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport DefaultInternationalIcon from './InternationalIcon'\r\nimport Flag from './Flag'\r\n\r\nexport function createCountryIconComponent({\r\n\tflags,\r\n\tflagUrl,\r\n\tflagComponent: FlagComponent,\r\n\tinternationalIcon: InternationalIcon\r\n}) {\r\n\tfunction CountryIcon({\r\n\t\tcountry,\r\n\t\tlabel,\r\n\t\taspectRatio\r\n\t}) {\r\n\t\t// `aspectRatio` is currently a hack for the default \"International\" icon\r\n\t\t// to render it as a square when Unicode flag icons are used.\r\n\t\t// So `aspectRatio` property is only used with the default \"International\" icon.\r\n\t\tconst _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={classNames('PhoneInputCountryIcon', {\r\n\t\t\t\t\t'PhoneInputCountryIcon--square': _aspectRatio === 1,\r\n\t\t\t\t\t'PhoneInputCountryIcon--border': country\r\n\t\t\t\t})}>\r\n\t\t\t\t{\r\n\t\t\t\t\tcountry\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<FlagComponent\r\n\t\t\t\t\t\tcountry={country}\r\n\t\t\t\t\t\tcountryName={label}\r\n\t\t\t\t\t\tflags={flags}\r\n\t\t\t\t\t\tflagUrl={flagUrl}\r\n\t\t\t\t\t\tclassName=\"PhoneInputCountryIconImg\"/>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<InternationalIcon\r\n\t\t\t\t\t\ttitle={label}\r\n\t\t\t\t\t\taspectRatio={_aspectRatio}\r\n\t\t\t\t\t\tclassName=\"PhoneInputCountryIconImg\"/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tCountryIcon.propTypes = {\r\n\t\tcountry: PropTypes.string,\r\n\t\tlabel: PropTypes.string.isRequired,\r\n\t\taspectRatio: PropTypes.number\r\n\t}\r\n\r\n\treturn CountryIcon\r\n}\r\n\r\nexport default createCountryIconComponent({\r\n\t// Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\tflagComponent: Flag,\r\n\tinternationalIcon: DefaultInternationalIcon\r\n})","import {\r\n\tgetCountryCallingCode,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nconst ONLY_DIGITS_REGEXP = /^\\d+$/\r\nexport default function getInternationalPhoneNumberPrefix(country, metadata) {\r\n\t// Standard international phone number prefix: \"+\" and \"country calling code\".\r\n\tlet prefix = '+' + getCountryCallingCode(country, metadata)\r\n\t// Get \"leading digits\" for a phone number of the country.\r\n\t// If there're \"leading digits\" then they can be part of the prefix too.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.country(country)\r\n\tif (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\r\n\t\tprefix += metadata.numberingPlan.leadingDigits()\r\n\t}\r\n\treturn prefix\r\n}","import {\r\n\tparsePhoneNumberFromString,\r\n\tgetCountryCallingCode,\r\n\tAsYouType,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix'\r\n\r\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\r\nexport function getPreSelectedCountry({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tlet country\r\n\r\n\t// If can get country from E.164 phone number\r\n\t// then it overrides the `country` passed (or not passed).\r\n\tif (phoneNumber && phoneNumber.country) {\r\n\t\t// `country` will be left `undefined` in case of non-detection.\r\n\t\tcountry = phoneNumber.country\r\n\t} else if (defaultCountry) {\r\n\t\tif (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// Only pre-select a country if it's in the available `countries` list.\r\n\tif (countries && countries.indexOf(country) < 0) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// If there will be no \"International\" option\r\n\t// then some `country` must be selected.\r\n\t// It will still be the wrong country though.\r\n\t// But still country `<select/>` can't be left in a broken state.\r\n\tif (!country && required && countries && countries.length > 0) {\r\n\t\tcountry = getAnyCountry()\r\n\t\t// noCountryMatchesTheNumber = true\r\n\t}\r\n\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\r\nexport function getCountrySelectOptions({\r\n\tcountries,\r\n\tcountryNames,\r\n\taddInternationalOption,\r\n\t// `locales` are only used in country name comparator:\r\n\t// depending on locale, string sorting order could be different.\r\n\tcompareStringsLocales,\r\n\tcompareStrings: _compareStrings\r\n}) {\r\n\t// Default country name comparator uses `String.localeCompare()`.\r\n\tif (!_compareStrings) {\r\n\t\t_compareStrings = compareStrings\r\n\t}\r\n\r\n\t// Generates a `<Select/>` option for each country.\r\n\tconst countrySelectOptions = countries.map((country) => ({\r\n\t\tvalue: country,\r\n\t\t// All `locale` country names included in this library\r\n\t\t// include all countries (this is checked at build time).\r\n\t\t// The only case when a country name might be missing\r\n\t\t// is when a developer supplies their own `labels` property.\r\n\t\t// To guard against such cases, a missing country name\r\n\t\t// is substituted by country code.\r\n\t\tlabel: countryNames[country] || country\r\n\t}))\r\n\r\n\t// Sort the list of countries alphabetically.\r\n\tcountrySelectOptions.sort((a, b) => _compareStrings(a.label, b.label, compareStringsLocales))\r\n\r\n\t// Add the \"International\" option to the country list (if suitable)\r\n\tif (addInternationalOption) {\r\n\t\tcountrySelectOptions.unshift({\r\n\t\t\tlabel: countryNames.ZZ\r\n\t\t})\r\n\t}\r\n\r\n\treturn countrySelectOptions\r\n}\r\n\r\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\r\nexport function parsePhoneNumber(value, metadata) {\r\n\treturn parsePhoneNumberFromString(value || '', metadata)\r\n}\r\n\r\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\r\nexport function generateNationalNumberDigits(phoneNumber) {\r\n\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n}\r\n\r\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\r\nexport function getPhoneDigitsForNewCountry(phoneDigits, {\r\n\tprevCountry,\r\n\tnewCountry,\r\n\tmetadata,\r\n\tuseNationalFormat\r\n}) {\r\n\t// If `parsed_input` is empty\r\n\t// then no need to migrate anything.\r\n\tif (!phoneDigits) {\r\n\t\tif (useNationalFormat) {\r\n\t\t\treturn ''\r\n\t\t} else {\r\n\t\t\t// If `phoneDigits` is empty then set `phoneDigits` to\r\n\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\treturn getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// If switching to some country.\r\n\t// (from \"International\" or another country)\r\n\t// If switching from \"International\" then `phoneDigits` starts with a `+`.\r\n\t// Otherwise it may or may not start with a `+`.\r\n\tif (newCountry) {\r\n\t\t// If the phone number was entered in international format\r\n\t\t// then migrate it to the newly selected country.\r\n\t\t// The phone number may be incomplete.\r\n\t\t// The phone number entered not necessarily starts with\r\n\t\t// the previously selected country phone prefix.\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\t// If the international phone number is for the new country\r\n\t\t\t// then convert it to local if required.\r\n\t\t\tif (useNationalFormat) {\r\n\t\t\t\t// // If a phone number is being input in international form\r\n\t\t\t\t// // and the country can already be derived from it,\r\n\t\t\t\t// // and if it is the new country, then format as a national number.\r\n\t\t\t\t// const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\r\n\t\t\t\t// if (derived_country === newCountry) {\r\n\t\t\t\t// \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\r\n\t\t\t\t// the condition could be looser here, because several countries\r\n\t\t\t\t// might share the same international phone number format\r\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\r\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\r\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\r\n\t\t\t\tif (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\r\n\t\t\t\t\treturn stripCountryCallingCode(phoneDigits, newCountry, metadata)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Simply discard the previously entered international phone number,\r\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\r\n\t\t\t\t// \"national (significant) number\" part and then prepending the\r\n\t\t\t\t// newly selected country's \"country calling code\" to it\r\n\t\t\t\t// would just be confusing for a user without being actually useful.\r\n\t\t\t\treturn ''\r\n\r\n\t\t\t\t// // Simply strip the leading `+` character\r\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\r\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\r\n\t\t\t\t// return phoneDigits.slice(1)\r\n\t\t\t}\r\n\r\n\t\t\tif (prevCountry) {\r\n\t\t\t\tconst newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(newCountryPrefix) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn newCountryPrefix\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is the same\r\n\t\t\t\t// as for the new `country`, then leave `phoneDigits` as is.\r\n\t\t\t\tif (phoneDigits.indexOf(defaultValue) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t}\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is not the same\r\n\t\t\t\t// as for the new `country`, then set `phoneDigits` to\r\n\t\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\treturn defaultValue\r\n\t\t\t}\r\n\r\n\t\t\t// // If the international phone number already contains\r\n\t\t\t// // any country calling code then trim the country calling code part.\r\n\t\t\t// // (that could also be the newly selected country phone code prefix as well)\r\n\t\t\t// // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\r\n\t\t\t// // (e.g. if a user enters an international number\r\n\t\t\t// //  not belonging to any of the reduced `countries` list).\r\n\t\t\t// phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\r\n\r\n\t\t\t// // Prepend country calling code prefix\r\n\t\t\t// // for the newly selected country.\r\n\t\t\t// return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\r\n\t\t}\r\n\t}\r\n\t// If switching to \"International\" from a country.\r\n\telse {\r\n\t\t// If the phone number was entered in national format.\r\n\t\tif (phoneDigits[0] !== '+') {\r\n\t\t\t// Format the national phone number as an international one.\r\n\t\t\t// The phone number entered not necessarily even starts with\r\n\t\t\t// the previously selected country phone prefix.\r\n\t\t\t// Even if the phone number belongs to whole another country\r\n\t\t\t// it will still be parsed into some national phone number.\r\n\t\t\treturn e164(phoneDigits, prevCountry, metadata) || ''\r\n\t\t}\r\n\t}\r\n\r\n\treturn phoneDigits\r\n}\r\n\r\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function e164(number, country, metadata) {\r\n\tif (!number) {\r\n\t\treturn\r\n\t}\r\n\t// If the phone number is being input in international format.\r\n\tif (number[0] === '+') {\r\n\t\t// If it's just the `+` sign then return nothing.\r\n\t\tif (number === '+') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// If there are any digits then the `value` is returned as is.\r\n\t\treturn number\r\n\t}\r\n\t// For non-international phone numbers\r\n\t// an accompanying country code is required.\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\tconst partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (partial_national_significant_number) {\r\n\t\treturn `+${getCountryCallingCode(country, metadata)}${partial_national_significant_number}`\r\n\t}\r\n}\r\n\r\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\r\nexport function trimNumber(number, country, metadata) {\r\n\tconst nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (nationalSignificantNumberPart) {\r\n\t\tconst overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata)\r\n\t\tif (overflowDigitsCount > 0) {\r\n\t\t\treturn number.slice(0, number.length - overflowDigitsCount)\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}\r\n\r\nfunction getMaxNumberLength(country, metadata) {\r\n\t// Get \"possible lengths\" for a phone number of the country.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.country(country)\r\n\t// Return the last \"possible length\".\r\n\treturn metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1]\r\n}\r\n\r\n// If the phone number being input is an international one\r\n// then tries to derive the country from the phone number.\r\n// (regardless of whether there's any country currently selected)\r\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryForPartialE164Number(partialE164Number, {\r\n\tcountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tif (partialE164Number === '+') {\r\n\t\t// Don't change the currently selected country yet.\r\n\t\treturn country\r\n\t}\r\n\r\n\tconst derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata)\r\n\r\n\t// If a phone number is being input in international form\r\n\t// and the country can already be derived from it,\r\n\t// then select that country.\r\n\tif (derived_country && (!countries || (countries.indexOf(derived_country) >= 0))) {\r\n\t\treturn derived_country\r\n\t}\r\n\t// If \"International\" country option has not been disabled\r\n\t// and the international phone number entered doesn't correspond\r\n\t// to the currently selected country then reset the currently selected country.\r\n\telse if (country &&\r\n\t\t!required &&\r\n\t\t!couldNumberBelongToCountry(partialE164Number, country, metadata)) {\r\n\t\treturn undefined\r\n\t}\r\n\r\n\t// Don't change the currently selected country.\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\r\nexport function onPhoneDigitsChange(phoneDigits, {\r\n\tprevPhoneDigits,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tcountryRequired,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\tinternational,\r\n\tlimitMaxLength,\r\n\tcountryCallingCodeEditable,\r\n\tmetadata\r\n}) {\r\n\tif (international && countryCallingCodeEditable === false) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t// The `<input/>` value must start with the country calling code.\r\n\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\tlet value\r\n\t\t\t// If a phone number input is declared as\r\n\t\t\t// `international` and `withCountryCallingCode`,\r\n\t\t\t// then it's gonna be non-empty even before the user\r\n\t\t\t// has input anything in it.\r\n\t\t\t// This will result in its contents (the country calling code part)\r\n\t\t\t// being selected when the user tabs into such field.\r\n\t\t\t// If the user then starts inputting the national part digits,\r\n\t\t\t// then `<input/>` value changes from `+xxx` to `y`\r\n\t\t\t// because inputting anything while having the `<input/>` value\r\n\t\t\t// selected results in erasing the `<input/>` value\r\n\t\t\t// So, the component handles such case by restoring\r\n\t\t\t// the intended `<input/>`` value: `+xxxy`.\r\n\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\tvalue = phoneDigits\r\n\t\t\t} else {\r\n\t\t\t\tphoneDigits = prefix\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tphoneDigits,\r\n\t\t\t\tvalue,\r\n\t\t\t\tcountry\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `international` property is `false`, then it means\r\n\t// \"enforce national-only format during input\",\r\n\t// so, if that's the case, then remove all `+` characters,\r\n\t// but only if some country is currently selected.\r\n\t// (not if \"International\" country is selected).\r\n\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// Trim the input to not exceed the maximum possible number length.\r\n\tif (phoneDigits && country && limitMaxLength) {\r\n\t\tphoneDigits = trimNumber(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// If this `onChange()` event was triggered\r\n\t// as a result of selecting \"International\" country,\r\n\t// then force-prepend a `+` sign if the phone number\r\n\t// `<input/>` value isn't in international format.\r\n\t// Also, force-prepend a `+` sign if international\r\n\t// phone number input format is set.\r\n\tif (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\r\n\t\tphoneDigits = '+' + phoneDigits\r\n\t}\r\n\r\n\t// If the previously entered phone number\r\n\t// has been entered in international format\r\n\t// and the user decides to erase it,\r\n\t// then also reset the `country`\r\n\t// because it was most likely automatically selected\r\n\t// while the user was typing in the phone number\r\n\t// in international format.\r\n\t// This fixes the issue when a user is presented\r\n\t// with a phone number input with no country selected\r\n\t// and then types in their local phone number\r\n\t// then discovers that the input's messed up\r\n\t// (a `+` has been prepended at the start of their input\r\n\t//  and a random country has been selected),\r\n\t// decides to undo it all by erasing everything\r\n\t// and then types in their local phone number again\r\n\t// resulting in a seemingly correct phone number\r\n\t// but in reality that phone number has incorrect country.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\r\n\tif (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\r\n\t\tif (international) {\r\n\t\t\tcountry = undefined\r\n\t\t} else {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\t// Also resets such \"randomly\" selected country\r\n\t// as soon as the user erases the number\r\n\t// digit-by-digit up to the leading `+` sign.\r\n\tif (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// Generate the new `value` property.\r\n\tlet value\r\n\tif (phoneDigits) {\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\tif (phoneDigits === '+') {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else {\r\n\t\t\t\tvalue = phoneDigits\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// Derive the country from the phone number.\r\n\t// (regardless of whether there's any country currently selected,\r\n\t//  because there could be several countries corresponding to one country calling code)\r\n\tif (value) {\r\n\t\tcountry = getCountryForPartialE164Number(value, {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\t// If `international` property is `false`, then it means\r\n\t\t// \"enforce national-only format during input\",\r\n\t\t// so, if that's the case, then remove all `+` characters,\r\n\t\t// but only if some country is currently selected.\r\n\t\t// (not if \"International\" country is selected).\r\n\t\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t\t\t// Re-calculate `value` because `phoneDigits` has changed.\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!country && countryRequired) {\r\n\t\tcountry = defaultCountry || getAnyCountry()\r\n\t}\r\n\r\n\treturn {\r\n\t\tphoneDigits,\r\n\t\tcountry,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\r\n\t// Handle the case when a user might have pasted\r\n\t// a phone number in international format.\r\n\tif (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\r\n\t\t// Create \"as you type\" formatter.\r\n\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t// Input partial national phone number.\r\n\t\tformatter.input(input)\r\n\t\t// Return the parsed partial national phone number.\r\n\t\tconst phoneNumber = formatter.getNumber()\r\n\t\tif (phoneNumber) {\r\n\t\t\t// Transform the number to a national one,\r\n\t\t\t// and remove all non-digits.\r\n\t\t\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n\t\t} else {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t} else {\r\n\t\t// Just remove the `+` sign.\r\n\t\treturn input.replace(/\\D/g, '')\r\n\t}\r\n}\r\n\r\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\r\n\tconst formatter = new AsYouType(null, metadata)\r\n\tformatter.input(number)\r\n\t// // `001` is a special \"non-geograpical entity\" code\r\n\t// // in Google's `libphonenumber` library.\r\n\t// if (formatter.getCountry() === '001') {\r\n\t// \treturn\r\n\t// }\r\n\treturn formatter.getCountry()\r\n}\r\n\r\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\r\nexport function compareStrings(a, b, locales) {\r\n  // Use `String.localeCompare` if it's available.\r\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n  // Which means everyone except IE <= 10 and Safari <= 10.\r\n  // `localeCompare()` is available in latest Node.js versions.\r\n  /* istanbul ignore else */\r\n  if (String.prototype.localeCompare) {\r\n    return a.localeCompare(b, locales);\r\n  }\r\n  /* istanbul ignore next */\r\n  return a < b ? -1 : (a > b ? 1 : 0);\r\n}\r\n\r\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\r\nexport function stripCountryCallingCode(number, country, metadata) {\r\n\t// Just an optimization, so that it\r\n\t// doesn't have to iterate through all country calling codes.\r\n\tif (country) {\r\n\t\tconst countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t\t// If `country` fits the actual `number`.\r\n\t\tif (number.length < countryCallingCodePrefix.length) {\r\n\t\t\tif (countryCallingCodePrefix.indexOf(number) === 0) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (number.indexOf(countryCallingCodePrefix) === 0) {\r\n\t\t\t\treturn number.slice(countryCallingCodePrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `country` doesn't fit the actual `number`.\r\n\t// Try all available country calling codes.\r\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes)) {\r\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\r\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\r\n\t\t}\r\n\t}\r\n\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\r\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\r\n\t// Create \"as you type\" formatter.\r\n\tconst formatter = new AsYouType(country, metadata)\r\n\t// Input partial national phone number.\r\n\tformatter.input(number)\r\n\t// Return the parsed partial national phone number.\r\n\tconst phoneNumber = formatter.getNumber()\r\n\treturn phoneNumber && phoneNumber.nationalNumber\r\n}\r\n\r\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\r\nexport function couldNumberBelongToCountry(number, country, metadata) {\r\n\tconst intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\tlet i = 0\r\n\twhile (i < number.length && i < intlPhoneNumberPrefix.length) {\r\n\t\tif (number[i] !== intlPhoneNumberPrefix[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n\r\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\r\nexport function getInitialPhoneDigits({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\tuseNationalFormat,\r\n\tmetadata\r\n}) {\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `useNationalFormat` is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\t// If `international` property is `true`,\r\n\t// meaning \"enforce international phone number format\",\r\n\t// then always show country calling code in the input field.\r\n\tif (!value && international && defaultCountry) {\r\n\t\treturn getInternationalPhoneNumberPrefix(defaultCountry, metadata)\r\n\t}\r\n\treturn value\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport Flag from './Flag'\r\nimport InternationalIcon from './InternationalIcon'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tinputRef = React.createRef()\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tconst preSelectedCountry = getPreSelectedCountry({\r\n\t\t\tvalue,\r\n\t\t\tphoneNumber,\r\n\t\t\tdefaultCountry,\r\n\t\t\trequired: !addInternationalOption,\r\n\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: preSelectedCountry,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\tsetInputRef = (instance) => {\r\n\t\tthis.inputRef.current = instance\r\n\t\tconst { inputRef: ref } = this.props\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(instance)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = instance\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountrySelectOptions({ countries }) {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tlocales,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\t\treturn useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\t}\r\n\r\n\tgetFirstSupportedCountry({ countries }) {\r\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\r\n\t\treturn countryOptions[0].value\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.inputRef.current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tcountryRequired: !addInternationalOption,\r\n\t\t\tdefaultCountry,\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries: countriesProperty,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused\r\n\t\t\t\t})}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.setInputRef}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * Updates the `value` as the user inputs the phone number.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onKeyDown` handler (e.g. to handle Enter key press).\r\n\t * @ignore\r\n\t */\r\n\tonKeyDown: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to disable both the phone number `<input/>`\r\n\t * and the country `<select/>`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * By default, the caret position is being \"intelligently\" managed\r\n\t * while a user inputs a phone number.\r\n\t * This \"smart\" caret behavior can be turned off\r\n\t * by passing `smartCaret={false}` property.\r\n\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType.isRequired,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool.isRequired\r\n}\r\n\r\nPhoneNumberInput.defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `true` the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: false,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nlet countrySelectOptionsMemo\r\nlet countrySelectOptionsMemoDependencies\r\nfunction useMemoCountrySelectOptions(generator, dependencies) {\r\n\tif (!countrySelectOptionsMemoDependencies ||\r\n\t\t!areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\r\n\t\tcountrySelectOptionsMemo = generator()\r\n\t\tcountrySelectOptionsMemoDependencies = dependencies\r\n\t}\r\n\treturn countrySelectOptionsMemo\r\n}\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}","import {\r\n\tgetInitialPhoneDigits,\r\n\tgetCountryForPartialE164Number,\r\n\tparsePhoneNumber\r\n} from './phoneInputHelpers'\r\n\r\nimport {\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries\r\n} from './countries'\r\n\r\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\r\n\tconst {\r\n\t\tmetadata,\r\n\t\tcountries,\r\n\t\tdefaultCountry: newDefaultCountry,\r\n\t\tvalue: newValue,\r\n\t\treset: newReset,\r\n\t\tinternational,\r\n\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t// superceded by `initialValueFormat` property.\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tinitialValueFormat\r\n\t} = props\r\n\r\n\tconst {\r\n\t\tdefaultCountry: prevDefaultCountry,\r\n\t\tvalue: prevValue,\r\n\t\treset: prevReset\r\n\t} = prevProps\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tvalue,\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\thasUserSelectedACountry\r\n\t} = state\r\n\r\n\tconst _getInitialPhoneDigits = (parameters) => getInitialPhoneDigits({\r\n\t\t...parameters,\r\n\t\tinternational,\r\n\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// Some users requested a way to reset the component\r\n\t// (both number `<input/>` and country `<select/>`).\r\n\t// Whenever `reset` property changes both number `<input/>`\r\n\t// and country `<select/>` are reset.\r\n\t// It's not implemented as some instance `.reset()` method\r\n\t// because `ref` is forwarded to `<input/>`.\r\n\t// It's also not replaced with just resetting `country` on\r\n\t// external `value` reset, because a user could select a country\r\n\t// and then not input any `value`, and so the selected country\r\n\t// would be \"stuck\", if not using this `reset` property.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\tif (newReset !== prevReset) {\r\n\t\treturn {\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: undefined,\r\n\t\t\tcountry: newDefaultCountry,\r\n\t\t\thasUserSelectedACountry: undefined\r\n\t\t}\r\n\t}\r\n\r\n\t// `value` is the value currently shown in the component:\r\n\t// it's stored in the component's `state`, and it's not the `value` property.\r\n\t// `prevValue` is \"previous `value` property\".\r\n\t// `newValue` is \"new `value` property\".\r\n\r\n\t// If the default country changed\r\n\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t// then select it, but only if the user hasn't already manually\r\n\t// selected a country, and no phone number has been manually entered so far.\r\n\t// Because if the user has already started inputting a phone number\r\n\t// then they're okay with no country being selected at all (\"International\")\r\n\t// and they don't want to be disturbed, don't want their input to be screwed, etc.\r\n\tif (newDefaultCountry !== prevDefaultCountry) {\r\n\t\tconst isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata)\r\n\t\tconst noValueHasBeenEnteredByTheUser = (\r\n\t\t\t// By default, \"no value has been entered\" means `value` is `undefined`.\r\n\t\t\t!value ||\r\n\t\t\t// When `international` is `true`, and some country has been pre-selected,\r\n\t\t\t// then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\r\n\t\t\t// so in case of `international` being `true`, \"the user hasn't entered anything\" situation\r\n\t\t\t// doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\r\n\t\t\t(international && value === _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: prevDefaultCountry\r\n\t\t\t}))\r\n\t\t)\r\n\t\t// Only update the `defaultCountry` property if no phone number\r\n\t\t// has been entered by the user or pre-set by the application.\r\n\t\tconst noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser\r\n\t\tif (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\r\n\t\t\treturn {\r\n\t\t\t\tcountry: newDefaultCountry,\r\n\t\t\t\t// If `phoneDigits` is empty, then automatically select the new `country`\r\n\t\t\t\t// and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\t// The code assumes that \"no phone number has been entered by the user\",\r\n\t\t\t\t// and no `value` property has been passed, so the `phoneNumber` parameter\r\n\t\t\t\t// of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\r\n\t\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\t\tvalue: undefined,\r\n\t\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t\t}),\r\n\t\t\t\t// `value` is `undefined` and it stays so.\r\n\t\t\t\tvalue: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If a new `value` is set externally.\r\n\t// (e.g. as a result of an ajax API request\r\n\t//  to get user's phone after page loaded)\r\n\t// The first part — `newValue !== prevValue` —\r\n\t// is basically `props.value !== prevProps.value`\r\n\t// so it means \"if value property was changed externally\".\r\n\t// The second part — `newValue !== value` —\r\n\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t// then the country flag would reset on each input.\r\n\tif (newValue !== prevValue && newValue !== value) {\r\n\t\tlet phoneNumber\r\n\t\tlet parsedCountry\r\n\t\tif (newValue) {\r\n\t\t\tphoneNumber = parsePhoneNumber(newValue, metadata)\r\n\t\t\tconst supportedCountries = getSupportedCountries(countries, metadata)\r\n\t\t\tif (phoneNumber && phoneNumber.country) {\r\n\t\t\t\t// Ignore `else` because all countries are supported in metadata.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparsedCountry = getCountryForPartialE164Number(newValue, {\r\n\t\t\t\t\tcountry: undefined,\r\n\t\t\t\t\tcountries: supportedCountries,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet hasUserSelectedACountryUpdate\r\n\t\tif (!newValue) {\r\n\t\t\t// Reset `hasUserSelectedACountry` flag in `state`.\r\n\t\t\thasUserSelectedACountryUpdate = {\r\n\t\t\t\thasUserSelectedACountry: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\t...hasUserSelectedACountryUpdate,\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tvalue: newValue,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: newValue,\r\n\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// `defaultCountry` didn't change.\r\n\t// `value` didn't change.\r\n\t// `phoneDigits` didn't change, because `value` didn't change.\r\n\t//\r\n\t// So no need to update state.\r\n}","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\r\nexport default function getCountryFlag(country) {\r\n\treturn getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1])\r\n}\r\n\r\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\r\nfunction getRegionalIndicatorSymbol(letter) {\r\n\treturn String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0))\r\n}","import React, { useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode'\r\n\r\nexport default function CountrySelect({\r\n\tvalue,\r\n\tonChange,\r\n\toptions,\r\n\t...rest\r\n}) {\r\n\tconst onChange_ = useCallback((event) => {\r\n\t\tconst value = event.target.value\r\n\t\tonChange(value === 'ZZ' ? undefined : value)\r\n\t}, [onChange])\r\n\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\t// \"ZZ\" means \"International\".\r\n\t// (HTML requires each `<option/>` have some string `value`).\r\n\treturn (\r\n\t\t<select\r\n\t\t\t{...rest}\r\n\t\t\tvalue={value || 'ZZ'}\r\n\t\t\tonChange={onChange_}>\r\n\t\t\t{options.map(({ value, label, divider }) => (\r\n\t\t\t\t<option\r\n\t\t\t\t\tkey={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tvalue={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tdisabled={divider ? true : false}\r\n\t\t\t\t\tstyle={divider ? DIVIDER_STYLE : undefined}>\r\n\t\t\t\t\t{label}\r\n\t\t\t\t</option>\r\n\t\t\t))}\r\n\t\t</select>\r\n\t)\r\n}\r\n\r\nCountrySelect.propTypes = {\r\n\t/**\r\n\t * A two-letter country code.\r\n\t * Example: \"US\", \"RU\", etc.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * Updates the `value`.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// `<select/>` options.\r\n\toptions: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tvalue: PropTypes.string,\r\n\t\tlabel: PropTypes.string,\r\n\t\tdivider: PropTypes.bool\r\n\t})).isRequired\r\n}\r\n\r\nconst DIVIDER_STYLE = {\r\n\tfontSize: '1px',\r\n\tbackgroundColor: 'currentColor',\r\n\tcolor: 'inherit'\r\n}\r\n\r\nexport function CountrySelectWithIcon({\r\n\tvalue,\r\n\toptions,\r\n\tclassName,\r\n\ticonComponent: Icon,\r\n\tgetIconAspectRatio,\r\n\tarrowComponent: Arrow,\r\n\tunicodeFlags,\r\n\t...rest\r\n}) {\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\treturn (\r\n\t\t<div className=\"PhoneInputCountry\">\r\n\t\t\t<CountrySelect\r\n\t\t\t\t{...rest}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\toptions={options}\r\n\t\t\t\tclassName={classNames('PhoneInputCountrySelect', className)}/>\r\n\r\n\t\t\t{/* Either a Unicode flag icon. */}\r\n\t\t\t{(unicodeFlags && value) &&\r\n\t\t\t\t<div className=\"PhoneInputCountryIconUnicode\">\r\n\t\t\t\t\t{getUnicodeFlagIcon(value)}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\r\n\t\t\t{/* Or an SVG flag icon. */}\r\n\t\t\t{!(unicodeFlags && value) &&\r\n\t\t\t\t<Icon\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tlabel={selectedOption && selectedOption.label}\r\n\t\t\t\t\taspectRatio={unicodeFlags ? 1 : undefined}/>\r\n\t\t\t}\r\n\r\n\t\t\t<Arrow/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nCountrySelectWithIcon.propTypes = {\r\n\t// Country flag component.\r\n\ticonComponent: PropTypes.elementType,\r\n\r\n\t// Select arrow component.\r\n\tarrowComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Set to `true` to render Unicode flag icons instead of SVG images.\r\n\tunicodeFlags: PropTypes.bool\r\n}\r\n\r\nCountrySelectWithIcon.defaultProps = {\r\n\t// Is \"International\" icon square?\r\n\tarrowComponent: () => <div className=\"PhoneInputCountrySelectArrow\"/>\r\n}\r\n\r\nfunction getSelectedOption(options, value) {\r\n\tfor (const option of options) {\r\n\t\tif (!option.divider && option.value === value) {\r\n\t\t\treturn option\r\n\t\t}\r\n\t}\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport labels from '../locale/en.json'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes'\r\n\r\nimport PhoneInput from './PhoneInputWithCountry'\r\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect'\r\n\r\nexport function createPhoneInput(defaultMetadata) {\r\n\tconst PhoneInputDefault = React.forwardRef((props, ref) => (\r\n\t\t<PhoneInput ref={ref} {...props}/>\r\n\t))\r\n\r\n\tPhoneInputDefault.propTypes = {\r\n\t\tmetadata: metadataPropType.isRequired,\r\n\t\tlabels: labelsPropType.isRequired,\r\n\t\tcountrySelectComponent: PropTypes.elementType.isRequired\r\n\t}\r\n\r\n\tPhoneInputDefault.defaultProps = {\r\n\t\tmetadata: defaultMetadata,\r\n\t\tlabels,\r\n\t\tcountrySelectComponent: CountrySelect\r\n\t}\r\n\r\n\treturn PhoneInputDefault\r\n}\r\n\r\nexport default createPhoneInput()","import metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index'\r\n\r\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createPhoneInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}","import { generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nconst cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    disableSpacing\n  } = styleProps;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\n\nconst CardActionsRoot = experimentalStyled('div', {}, {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return _extends({}, styles.root, !styleProps.disableSpacing && styles.spacing);\n  }\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the root element. */\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8\n}, !styleProps.disableSpacing && {\n  '& > :not(:first-of-type)': {\n    marginLeft: 8\n  }\n}));\nconst CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n\n  const {\n    disableSpacing = false,\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"disableSpacing\", \"className\"]);\n\n  const styleProps = _extends({}, props, {\n    disableSpacing\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    styleProps: styleProps,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default CardActions;"],"sourceRoot":""}