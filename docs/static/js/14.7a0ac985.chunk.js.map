{"version":3,"sources":["views/application/seller-request/ListHeader.tsx","views/application/seller-request/LoadMore.tsx","views/application/seller-request/SellerRequestList.tsx","views/pages/seller-request/ListPage.tsx","graphql/queries.ts","utils/table.ts","helpers/date.ts"],"names":["headCells","id","numeric","disablePadding","label","maxWidth","useStyles","makeStyles","sortSpan","visuallyHidden","ListHeader","props","classes","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","padding","sx","pl","Checkbox","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","undefined","TableSortLabel","active","direction","onClick","property","event","className","LoadMoreButton","withStyles","root","borderRadius","minWidth","Button","toolbar","LoadMore","onLoadMore","disabled","Grid","container","justifyContent","type","table","SellerRequestList","useQuery","gql","listSellRequests","variables","limit","config","pagination","fetchPolicy","loading","error","data","fetchMore","rows","_get","nextToken","theme","useTheme","React","useState","setOrder","setOrderBy","selected","setSelected","Loader","_isEmpty","Alert","severity","palette","main","TableContainer","Table","size","length","target","newSelectedId","n","RequestId","sellerRequest","TableBody","stableSort","getComparator","row","index","name","isItemSelected","indexOf","labelId","hover","selectedIndex","newSelected","params","slice","concat","handleClick","role","tabIndex","component","scope","SellerInfo","Email","formatDate","CreatedAt","UpdatedAt","ListPage","MainCard","title","getForm","getProperty","listFormCategories","listForms","listProperties","descendingComparator","a","b","array","comparator","stabilizedThis","el","sort","date","Intl","DateTimeFormat","locate","country","timeZone","timezone","format","Date"],"mappings":"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","file":"static/js/14.7a0ac985.chunk.js","sourcesContent":["import React from 'react';\nimport {\n\tCheckbox,\n\tTableCell,\n\tTableHead,\n\tTableSortLabel,\n\tTableRow,\n} from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { visuallyHidden } from '@material-ui/utils';\nimport { EnhancedTableHeadProps } from '../../../types';\n\nconst headCells = [\n\t{\n\t\tid: 'RequestId',\n\t\tnumeric: false,\n\t\tdisablePadding: true,\n\t\tlabel: 'ID',\n\t\tmaxWidth: 170,\n\t},\n\t{\n\t\tid: 'SellerInfo.Email',\n\t\tnumeric: false,\n\t\tdisablePadding: false,\n\t\tlabel: 'Requester',\n\t},\n\t{\n\t\tid: 'CreatedAt',\n\t\tnumeric: false,\n\t\tdisablePadding: false,\n\t\tlabel: 'Created',\n\t},\n\t{\n\t\tid: 'UpdatedAt',\n\t\tnumeric: false,\n\t\tdisablePadding: false,\n\t\tlabel: 'Updated',\n\t},\n];\n\nconst useStyles = makeStyles(() => ({\n\tsortSpan: { ...visuallyHidden },\n}));\n\nconst ListHeader = (props: EnhancedTableHeadProps) => {\n\tconst classes = useStyles();\n\tconst {\n\t\tonSelectAllClick,\n\t\torder,\n\t\torderBy,\n\t\tnumSelected,\n\t\trowCount,\n\t\tonRequestSort,\n\t} = props;\n\tconst createSortHandler =\n\t\t(property: string) => (event: React.SyntheticEvent) => {\n\t\t\tonRequestSort(event, property);\n\t\t};\n\n\treturn (\n\t\t<TableHead>\n\t\t\t<TableRow>\n\t\t\t\t<TableCell padding='checkbox' sx={{ pl: 3 }}>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\tindeterminate={numSelected > 0 && numSelected < rowCount}\n\t\t\t\t\t\tchecked={rowCount > 0 && numSelected === rowCount}\n\t\t\t\t\t\tonChange={onSelectAllClick}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t'aria-label': 'select all desserts',\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</TableCell>\n\t\t\t\t{headCells.map(headCell => (\n\t\t\t\t\t<TableCell\n\t\t\t\t\t\tkey={headCell.id}\n\t\t\t\t\t\talign={headCell.numeric ? 'right' : 'left'}\n\t\t\t\t\t\tpadding={headCell.disablePadding ? 'none' : 'normal'}\n\t\t\t\t\t\tsortDirection={orderBy === headCell.id ? order : undefined}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TableSortLabel\n\t\t\t\t\t\t\tactive={orderBy === headCell.id}\n\t\t\t\t\t\t\tdirection={orderBy === headCell.id ? order : 'asc'}\n\t\t\t\t\t\t\tonClick={createSortHandler(headCell.id)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{headCell.label}\n\t\t\t\t\t\t\t{orderBy === headCell.id ? (\n\t\t\t\t\t\t\t\t<span className={classes.sortSpan}>\n\t\t\t\t\t\t\t\t\t{order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</TableSortLabel>\n\t\t\t\t\t</TableCell>\n\t\t\t\t))}\n\t\t\t</TableRow>\n\t\t</TableHead>\n\t);\n};\n\nexport default ListHeader;\n","import { Grid, Button } from '@material-ui/core';\nimport { IconChevronDown } from '@tabler/icons';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nconst LoadMoreButton = withStyles({\n\troot: {\n\t\tborderRadius: '50%',\n\t\tminWidth: '0',\n\t\tpadding: '12px',\n\t},\n})(Button);\n\ntype Props = {\n\tonLoadMore: Function;\n\tdisabled: boolean;\n};\n\nconst useStyles = makeStyles(() => ({\n\ttoolbar: {\n\t\tpadding: '24px 16px 2px',\n\t},\n}));\n\nconst LoadMore = ({ onLoadMore, disabled }: Props) => {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<Grid container className={classes.toolbar} justifyContent='center'>\n\t\t\t<LoadMoreButton\n\t\t\t\ttype='button'\n\t\t\t\tonClick={() => onLoadMore()}\n\t\t\t\tdisabled={disabled}\n\t\t\t>\n\t\t\t\t<IconChevronDown />\n\t\t\t</LoadMoreButton>\n\t\t</Grid>\n\t);\n};\n\nexport default LoadMore;\n","import React from 'react';\nimport _get from 'lodash.get';\nimport _isEmpty from 'lodash.isempty';\nimport {\n\tCheckbox,\n\tTable,\n\tTableBody,\n\tTableCell,\n\tTableContainer,\n\tTableRow,\n\tAlert,\n\tuseTheme,\n} from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useQuery, gql } from '@apollo/client';\nimport { TSellerRequest, ArrangementOrder } from '../../../types';\nimport { listSellRequests } from '../../../graphql/queries';\n\nimport { getComparator, stableSort } from '../../../utils/table';\nimport Loader from '../../../ui-component/Loader';\nimport Header from './ListHeader';\nimport LoadMore from './LoadMore';\nimport config from '../../../config';\nimport { formatDate } from '../../../helpers/date';\n\nconst useStyles = makeStyles(() => ({\n\ttable: {\n\t\tminWidth: '750px',\n\t},\n}));\n\nconst SellerRequestList = () => {\n\tconst { loading, error, data, fetchMore } = useQuery(gql(listSellRequests), {\n\t\tvariables: { limit: config.pagination.limit },\n\t\tfetchPolicy: 'cache-first',\n\t});\n\n\tconst rows: TSellerRequest[] = _get(data, 'listSellRequests.items', []);\n\n\tconst nextToken: string | null | undefined = _get(\n\t\tdata,\n\t\t'listSellRequests.nextToken',\n\t\tundefined\n\t);\n\tconst theme = useTheme();\n\tconst classes = useStyles();\n\tconst [order, setOrder] = React.useState<ArrangementOrder>('asc');\n\tconst [orderBy, setOrderBy] = React.useState<string>('RequestId');\n\tconst [selected, setSelected] = React.useState<string[]>([]);\n\n\tif (loading) return <Loader />;\n\tif (error || _isEmpty(data)) {\n\t\treturn (\n\t\t\t<Alert severity='error' sx={{ color: theme.palette.error.main }}>\n\t\t\t\tSomething went wrong!\n\t\t\t</Alert>\n\t\t);\n\t}\n\n\tconst loadMore = () => {\n\t\tfetchMore({\n\t\t\tvariables: { limit: config.pagination.limit, nextToken },\n\t\t});\n\t};\n\n\tconst handleRequestSort = (\n\t\tevent: React.SyntheticEvent,\n\t\tsellerRequest: string\n\t) => {\n\t\tconst isAsc = orderBy === sellerRequest && order === 'asc';\n\t\tsetOrder(isAsc ? 'desc' : 'asc');\n\t\tsetOrderBy(sellerRequest);\n\t};\n\n\tconst handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tif (event.target.checked) {\n\t\t\tconst newSelectedId: string[] = rows.map(n => n.RequestId);\n\t\t\tsetSelected(newSelectedId);\n\t\t\treturn;\n\t\t}\n\t\tsetSelected([]);\n\t};\n\n\tconst handleClick = (name: string) => {\n\t\tconst selectedIndex = selected.indexOf(name);\n\t\tlet newSelected: string[] = [];\n\n\t\tlet params = [];\n\t\tswitch (selectedIndex) {\n\t\t\tcase -1:\n\t\t\t\tparams = [selected, name];\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tparams = [selected.slice(1)];\n\t\t\t\tbreak;\n\t\t\tcase selected.length - 1:\n\t\t\t\tparams = [selected.slice(0, -1)];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tparams = [\n\t\t\t\t\tselected.slice(0, selectedIndex),\n\t\t\t\t\tselected.slice(selectedIndex + 1),\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t}\n\t\tnewSelected = newSelected.concat(...params);\n\t\tsetSelected(newSelected);\n\t};\n\n\tconst isSelected = (name: string) => selected.indexOf(name) !== -1;\n\n\treturn (\n\t\t<>\n\t\t\t<TableContainer>\n\t\t\t\t<Table className={classes.table} aria-labelledby='tableTitle' size='small'>\n\t\t\t\t\t<Header\n\t\t\t\t\t\tnumSelected={selected.length}\n\t\t\t\t\t\torder={order}\n\t\t\t\t\t\torderBy={orderBy}\n\t\t\t\t\t\tonSelectAllClick={handleSelectAllClick}\n\t\t\t\t\t\tonRequestSort={handleRequestSort}\n\t\t\t\t\t\trowCount={rows.length}\n\t\t\t\t\t/>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{stableSort<TSellerRequest>(rows, getComparator(order, orderBy)).map(\n\t\t\t\t\t\t\t(row, index) => {\n\t\t\t\t\t\t\t\tif (typeof row === 'number') return null;\n\t\t\t\t\t\t\t\tconst isItemSelected = isSelected(row.RequestId);\n\t\t\t\t\t\t\t\tconst labelId = `enhanced-table-checkbox-${index}`;\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\thover\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleClick(row.RequestId)}\n\t\t\t\t\t\t\t\t\t\trole='checkbox'\n\t\t\t\t\t\t\t\t\t\taria-checked={isItemSelected}\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\tkey={row.RequestId}\n\t\t\t\t\t\t\t\t\t\tselected={isItemSelected}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<TableCell sx={{ pl: 3 }} padding='checkbox'>\n\t\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t\t\t\t\tchecked={isItemSelected}\n\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t'aria-labelledby': labelId,\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell component='th' id={labelId} scope='row' padding='none'>\n\t\t\t\t\t\t\t\t\t\t\t{row.RequestId}\n\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell align='left'>{row.SellerInfo.Email}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell align='left'>{formatDate(row.CreatedAt)}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell align='left'>{formatDate(row.UpdatedAt)}</TableCell>\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t\t<LoadMore onLoadMore={loadMore} disabled={!nextToken} />\n\t\t</>\n\t);\n};\n\nexport default SellerRequestList;\n","// material-ui\nimport MainCard from '../../../ui-component/cards/MainCard';\n\n// project imports\nimport SellerRequestList from '../../application/seller-request/SellerRequestList';\n\nconst ListPage = () => (\n\t<MainCard title='Seller Request List'>\n\t\t<SellerRequestList />\n\t</MainCard>\n);\n\nexport default ListPage;\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getForm = /* GraphQL */ `\n\tquery GetForm($FormId: ID!) {\n\t\tgetForm(FormId: $FormId) {\n\t\t\tCategoryId\n\t\t\tCreatedBy\n\t\t\tCreatedDT\n\t\t\tFormId\n\t\t\tFormStatus\n\t\t\tFormTypeId\n\t\t\tTemplate\n\t\t\tTitle\n\t\t\tUpdatedBy\n\t\t\tUpdatedDT\n\t\t}\n\t}\n`;\nexport const getFormCategory = /* GraphQL */ `\n\tquery GetFormCategory($CategoryId: ID!) {\n\t\tgetFormCategory(CategoryId: $CategoryId) {\n\t\t\tActive\n\t\t\tFormTypes {\n\t\t\t\tActive\n\t\t\t\tName\n\t\t\t\tOrder\n\t\t\t\tid\n\t\t\t}\n\t\t\tForms {\n\t\t\t\tCategoryId\n\t\t\t\tCreatedBy\n\t\t\t\tCreatedDT\n\t\t\t\tFormId\n\t\t\t\tFormStatus\n\t\t\t\tFormTypeId\n\t\t\t\tTemplate\n\t\t\t\tTitle\n\t\t\t\tUpdatedBy\n\t\t\t\tUpdatedDT\n\t\t\t}\n\t\t\tItemType\n\t\t\tTitle\n\t\t\tid\n\t\t}\n\t}\n`;\nexport const getOffer = /* GraphQL */ `\n\tquery GetOffer($OfferId: ID!) {\n\t\tgetOffer(OfferId: $OfferId) {\n\t\t\tAgentInfo {\n\t\t\t\tAssistantEmail\n\t\t\t\tDreNumber\n\t\t\t\tEmail\n\t\t\t\tFirstname\n\t\t\t\tLastname\n\t\t\t\tMiddlename\n\t\t\t\tPhone\n\t\t\t}\n\t\t\tBuyerInfo {\n\t\t\t\tFirstName\n\t\t\t\tLastName\n\t\t\t\tMiddleName\n\t\t\t\tTitleName\n\t\t\t}\n\t\t\tBuyerType\n\t\t\tContingencies {\n\t\t\t\tAllRemoved\n\t\t\t\tAnyAndAll\n\t\t\t\tFinanceContingency\n\t\t\t\tFinanceContingencyDueDate\n\t\t\t\tFinanceContingencyRemoved\n\t\t\t\tFinanceContingencyRemovedAt\n\t\t\t\tInspectionContingency\n\t\t\t\tInspectionContingencyDueDate\n\t\t\t\tInspectionContingencyRemoved\n\t\t\t\tInspectionContingencyRemovedAt\n\t\t\t\tSaleOfHomeContingency\n\t\t\t\tSaleOfHomeContingencyDueDate\n\t\t\t\tSaleOfHomeContingencyRemoved\n\t\t\t\tSaleOfHomeContingencyRemovedAt\n\t\t\t}\n\t\t\tCounterOffer {\n\t\t\t\tCounterOfferId\n\t\t\t\tForms\n\t\t\t\tPosition\n\t\t\t}\n\t\t\tFirmInfo {\n\t\t\t\tCompanyEmail\n\t\t\t\tCompanyPhone\n\t\t\t\tCompanyname\n\t\t\t\tDreNumber\n\t\t\t}\n\t\t\tFunding {\n\t\t\t\tDownPayment\n\t\t\t\tFicoScore\n\t\t\t\tLoanType\n\t\t\t\tPreapprovedForLoan\n\t\t\t\tPurchaseType\n\t\t\t}\n\t\t\tOffer {\n\t\t\t\tClosingPeriod\n\t\t\t\tFinanceContingency\n\t\t\t\tFurniture\n\t\t\t\tInspectionContingency\n\t\t\t\tOfferPrice\n\t\t\t\tSaleOfHomeContingency\n\t\t\t}\n\t\t\tOfferId\n\t\t\tOfferNo\n\t\t\tPropertyData {\n\t\t\t\tCity\n\t\t\t\tCounty\n\t\t\t\tFullAddress\n\t\t\t\tOwnerNames\n\t\t\t\tState\n\t\t\t\tStreetAddress\n\t\t\t\tVestingType\n\t\t\t\tYearBuilt\n\t\t\t\tZip\n\t\t\t}\n\t\t\tPropertyId\n\t\t\tPropertyNo\n\t\t\tStep {\n\t\t\t\tbuyer_can_submit_offer\n\t\t\t\tdisplay_on_advisor_portal\n\t\t\t\tdisplay_on_seller_dashboard\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\twaiting_seller_to_act\n\t\t\t}\n\t\t\tStepId\n\t\t}\n\t}\n`;\nexport const getOfferDocPutUrls = /* GraphQL */ `\n\tquery GetOfferDocPutUrls(\n\t\t$DocumentType: String!\n\t\t$Documents: [FileItemInput]!\n\t\t$OfferId: ID!\n\t) {\n\t\tgetOfferDocPutUrls(\n\t\t\tDocumentType: $DocumentType\n\t\t\tDocuments: $Documents\n\t\t\tOfferId: $OfferId\n\t\t) {\n\t\t\tid\n\t\t\turl\n\t\t}\n\t}\n`;\nexport const getOfferStep = /* GraphQL */ `\n\tquery GetOfferStep($StepId: ID!) {\n\t\tgetOfferStep(StepId: $StepId) {\n\t\t\tallowed_actions {\n\t\t\t\taction\n\t\t\t\tform_action\n\t\t\t\tnext_step_id\n\t\t\t}\n\t\t\tbuyer_can_submit_offer\n\t\t\tdisplay_on_advisor_portal\n\t\t\tdisplay_on_seller_dashboard\n\t\t\tid\n\t\t\tmessages {\n\t\t\t\tadvisor\n\t\t\t\tbuyer\n\t\t\t\tseller\n\t\t\t}\n\t\t\tname\n\t\t\twaiting_seller_to_act\n\t\t}\n\t}\n`;\nexport const getProperty = /* GraphQL */ `\n\tquery GetProperty($PropertyId: ID!) {\n\t\tgetProperty(PropertyId: $PropertyId) {\n\t\t\tCreatedAt\n\t\t\tListed\n\t\t\tPropertyData {\n\t\t\t\tCity\n\t\t\t\tCounty\n\t\t\t\tFullAddress\n\t\t\t\tOwnerNames\n\t\t\t\tState\n\t\t\t\tStreetAddress\n\t\t\t\tVestingType\n\t\t\t\tYearBuilt\n\t\t\t\tZip\n\t\t\t}\n\t\t\tPropertyId\n\t\t\tPropertyNo\n\t\t\tThumbnail {\n\t\t\t\tid\n\t\t\t\tkey\n\t\t\t\tname\n\t\t\t\tpresignedUrl\n\t\t\t\tsize\n\t\t\t\ttype\n\t\t\t}\n\t\t\tUpdatedAt\n\t\t}\n\t}\n`;\nexport const getPropertyThumbnailPutUrl = /* GraphQL */ `\n\tquery GetPropertyThumbnailPutUrl($Photos: [FileItemInput]!, $PropertyId: ID!) {\n\t\tgetPropertyThumbnailPutUrl(Photos: $Photos, PropertyId: $PropertyId) {\n\t\t\tid\n\t\t\turl\n\t\t}\n\t}\n`;\nexport const getSellRequest = /* GraphQL */ `\n\tquery GetSellRequest($RequestId: ID!) {\n\t\tgetSellRequest(RequestId: $RequestId) {\n\t\t\tApprovedBy\n\t\t\tApprovedByAdvisor\n\t\t\tCreatedAt\n\t\t\tCreatedBy\n\t\t\tDTPropertyId\n\t\t\tDataTreeProperties {\n\t\t\t\tCount\n\t\t\t}\n\t\t\tPropertyData {\n\t\t\t\tBedrooms\n\t\t\t\tCity\n\t\t\t\tCounty\n\t\t\t\tFullAddress\n\t\t\t\tFullBath\n\t\t\t\tLandUse\n\t\t\t\tLivingArea\n\t\t\t\tLotArea\n\t\t\t\tOwnerNames\n\t\t\t\tState\n\t\t\t\tStreetAddress\n\t\t\t\tVestingOwnershipRight\n\t\t\t\tVestingTypeMapped\n\t\t\t\tVestingTypeOverride\n\t\t\t\tYearBuilt\n\t\t\t\tYearBuiltOverride\n\t\t\t\tZip\n\t\t\t}\n\t\t\tPropertyId\n\t\t\tPropertyListPriceRange {\n\t\t\t\tMax\n\t\t\t\tMaxFormatted\n\t\t\t\tMin\n\t\t\t\tMinFormatted\n\t\t\t}\n\t\t\tRequestId\n\t\t\tSellerInfo {\n\t\t\t\tEmail\n\t\t\t\tFirstName\n\t\t\t\tLastName\n\t\t\t\tPhone\n\t\t\t}\n\t\t\tTaxReportTaxResourceMessage\n\t\t\tTaxReportTaxResourceStatus\n\t\t\tTaxReportTaxResourceStatusUpdatedAt\n\t\t\tTaxReportTotalViewMessage\n\t\t\tTaxReportTotalViewStatus\n\t\t\tTaxReportTotalViewUpdatedAt\n\t\t\tUpdatedAt\n\t\t\tUpdatedBy\n\t\t}\n\t}\n`;\nexport const listFormCategories = /* GraphQL */ `\n\tquery ListFormCategories {\n\t\tlistFormCategories {\n\t\t\tActive\n\t\t\tFormTypes {\n\t\t\t\tActive\n\t\t\t\tName\n\t\t\t\tOrder\n\t\t\t\tid\n\t\t\t}\n\t\t\tForms {\n\t\t\t\tCategoryId\n\t\t\t\tCreatedBy\n\t\t\t\tCreatedDT\n\t\t\t\tFormId\n\t\t\t\tFormStatus\n\t\t\t\tFormTypeId\n\t\t\t\tTemplate\n\t\t\t\tTitle\n\t\t\t\tUpdatedBy\n\t\t\t\tUpdatedDT\n\t\t\t}\n\t\t\tItemType\n\t\t\tTitle\n\t\t\tid\n\t\t}\n\t}\n`;\nexport const listForms = /* GraphQL */ `\n\tquery ListForms($limit: Int, $nextToken: String) {\n\t\tlistForms(limit: $limit, nextToken: $nextToken) {\n\t\t\titems {\n\t\t\t\tCategoryId\n\t\t\t\tCreatedBy\n\t\t\t\tCreatedDT\n\t\t\t\tFormId\n\t\t\t\tFormStatus\n\t\t\t\tFormTypeId\n\t\t\t\tTemplate\n\t\t\t\tTitle\n\t\t\t\tUpdatedBy\n\t\t\t\tUpdatedDT\n\t\t\t}\n\t\t\tnextToken\n\t\t}\n\t}\n`;\nexport const listOfferSteps = /* GraphQL */ `\n\tquery ListOfferSteps {\n\t\tlistOfferSteps {\n\t\t\tallowed_actions {\n\t\t\t\taction\n\t\t\t\tform_action\n\t\t\t\tnext_step_id\n\t\t\t}\n\t\t\tbuyer_can_submit_offer\n\t\t\tdisplay_on_advisor_portal\n\t\t\tdisplay_on_seller_dashboard\n\t\t\tid\n\t\t\tmessages {\n\t\t\t\tadvisor\n\t\t\t\tbuyer\n\t\t\t\tseller\n\t\t\t}\n\t\t\tname\n\t\t\twaiting_seller_to_act\n\t\t}\n\t}\n`;\nexport const listOffers = /* GraphQL */ `\n\tquery ListOffers($limit: Int, $nextToken: String) {\n\t\tlistOffers(limit: $limit, nextToken: $nextToken) {\n\t\t\titems {\n\t\t\t\tBuyerType\n\t\t\t\tOfferId\n\t\t\t\tOfferNo\n\t\t\t\tPropertyId\n\t\t\t\tPropertyNo\n\t\t\t\tStepId\n\t\t\t}\n\t\t\tnextToken\n\t\t}\n\t}\n`;\nexport const listProperties = /* GraphQL */ `\n\tquery ListProperties($limit: Int, $nextToken: String) {\n\t\tlistProperties(limit: $limit, nextToken: $nextToken) {\n\t\t\titems {\n\t\t\t\tCreatedAt\n\t\t\t\tListed\n\t\t\t\tPropertyId\n\t\t\t\tPropertyNo\n\t\t\t\tUpdatedAt\n\t\t\t\tPropertyData {\n\t\t\t\t\tCity\n\t\t\t\t\tCounty\n\t\t\t\t\tFullAddress\n\t\t\t\t\tOwnerNames\n\t\t\t\t\tState\n\t\t\t\t\tStreetAddress\n\t\t\t\t\tZip\n\t\t\t\t}\n\t\t\t}\n\t\t\tnextToken\n\t\t}\n\t}\n`;\nexport const listSellRequests = /* GraphQL */ `\n\tquery ListSellRequests($limit: Int, $nextToken: String) {\n\t\tlistSellRequests(limit: $limit, nextToken: $nextToken) {\n\t\t\titems {\n\t\t\t\tApprovedBy\n\t\t\t\tApprovedByAdvisor\n\t\t\t\tCreatedAt\n\t\t\t\tCreatedBy\n\t\t\t\tDTPropertyId\n\t\t\t\tPropertyId\n\t\t\t\tRequestId\n\t\t\t\tTaxReportTaxResourceMessage\n\t\t\t\tTaxReportTaxResourceStatus\n\t\t\t\tTaxReportTaxResourceStatusUpdatedAt\n\t\t\t\tTaxReportTotalViewMessage\n\t\t\t\tTaxReportTotalViewStatus\n\t\t\t\tTaxReportTotalViewUpdatedAt\n\t\t\t\tUpdatedAt\n\t\t\t\tUpdatedBy\n\t\t\t\tSellerInfo {\n\t\t\t\t\tEmail\n\t\t\t\t\tFirstName\n\t\t\t\t\tLastName\n\t\t\t\t\tPhone\n\t\t\t\t}\n\t\t\t}\n\t\t\tnextToken\n\t\t}\n\t}\n`;\nexport const listSupportedVestingTypes = /* GraphQL */ `\n\tquery ListSupportedVestingTypes {\n\t\tlistSupportedVestingTypes\n\t}\n`;\n","import _get from 'lodash.get';\nimport { KeyedObject, ArrangementOrder } from '../types';\n\nconst descendingComparator = (\n\ta: KeyedObject,\n\tb: KeyedObject,\n\torderBy: string\n) => {\n\tif (_get(b, orderBy) < _get(a, orderBy)) {\n\t\treturn -1;\n\t}\n\tif (_get(b, orderBy) > _get(a, orderBy)) {\n\t\treturn 1;\n\t}\n\treturn 0;\n};\n\nconst getComparator = (order: ArrangementOrder, orderBy: string) =>\n\torder === 'desc'\n\t\t? (a: KeyedObject, b: KeyedObject) => descendingComparator(a, b, orderBy)\n\t\t: (a: KeyedObject, b: KeyedObject) => -descendingComparator(a, b, orderBy);\n\nconst stableSort = <T>(\n\tarray: T[],\n\tcomparator: (a: KeyedObject, b: KeyedObject) => number\n) => {\n\tconst stabilizedThis = array.map((el, index) => [el, index]);\n\tstabilizedThis.sort((a, b) => {\n\t\tconst order = comparator(a[0] as T, b[0] as T);\n\t\tif (order !== 0) return order;\n\t\treturn (a[1] as number) - (b[1] as number);\n\t});\n\treturn stabilizedThis.map(el => el[0]);\n};\n\nexport { descendingComparator, getComparator, stableSort };\n","import config from '../config';\n\nexport const formatDate = (date: string | null): string =>\n\t`${\n\t\tdate\n\t\t\t? new Intl.DateTimeFormat(config.locate.country, {\n\t\t\t\t\ttimeZone: config.locate.timezone,\n\t\t\t  }).format(new Date(date))\n\t\t\t: ''\n\t}`;\n"],"sourceRoot":""}