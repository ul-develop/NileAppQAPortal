{"version":3,"sources":["views/application/form/FormEdit.tsx"],"names":["FormEdit","dispatch","useDispatch","saveSurveyFunc","sessionStorage","setItem","this","text","id","useParams","useQuery","gql","getForm","variables","FormId","loading","error","data","listFormCategories","isFormTypeLoading","isFormTypeError","formCategories","type","SNACKBAR_OPEN","open","message","variant","alertSeverity","anchorOrigin","vertical","horizontal","_isEmpty","form","_get","title","Title","formTypeId","FormTypeId","formCategoryId","CategoryId","formId","template","Template","categoryIdAndFormTypeIdValue","formTypes","jsonTemplate","JSON","parse","onSubmitHandler","values","a","setStatus","setSubmitting","categoryAndFormType","split","categoryId","currentTemplate","stringify","getItem","client","mutate","mutation","updateForm","Form","success","container","spacing","gridSpacing","item","xs","initialValues","validationSchema","yup","shape","required","onSubmit","errors","handleChange","handleBlur","handleSubmit","touched","isSubmitting","noValidate","alignItems","lg","defaultValue","fullWidth","placeholder","onChange","onBlur","Boolean","helperText","name","htmlFor","native","map","categoryName","types","FormTypes","label","formType","Name","typeId","categoryIdAndFormTypeId","value","direction","justifyContent","color","disabled"],"mappings":"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","file":"static/js/17.13ca9bee.chunk.js","sourcesContent":["import { useDispatch } from 'react-redux';\nimport { Button, Grid, Stack, TextField, Select } from '@material-ui/core';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as yup from 'yup';\nimport { useParams } from 'react-router-dom';\nimport { useQuery, gql } from '@apollo/client';\nimport _isEmpty from 'lodash.isempty';\nimport _get from 'lodash.get';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport AnimateButton from '../../../ui-component/extended/AnimateButton';\nimport { SNACKBAR_OPEN } from '../../../store/actions';\nimport SurveyComponent from './components/SurveyCreator';\nimport Loader from '../../../ui-component/Loader';\nimport { getForm, listFormCategories } from '../../../graphql/queries';\nimport { updateForm } from '../../../graphql/mutations';\nimport { gridSpacing } from '../../../store/constant';\nimport { client } from '../../../dataProvider';\nimport InputLabel from '../../../ui-component/extended/Form/InputLabel';\nimport { FormType } from '../../../types';\n\nconst FormEdit = () => {\n\tconst dispatch = useDispatch();\n\n\tfunction saveSurveyFunc() {\n\t\t// @ts-ignore\n\t\t// eslint-disable-next-line react/no-this-in-sfc\n\t\tsessionStorage.setItem('template', this.text);\n\t}\n\n\t// @ts-ignore\n\tconst { id } = useParams();\n\n\tconst { loading, error, data } = useQuery(\n\t\tgql`\n\t\t\t${getForm}\n\t\t`,\n\t\t{\n\t\t\tvariables: {\n\t\t\t\tFormId: id,\n\t\t\t},\n\t\t}\n\t);\n\n\tconst {\n\t\tloading: isFormTypeLoading,\n\t\terror: isFormTypeError,\n\t\tdata: formCategories,\n\t} = useQuery(\n\t\tgql`\n\t\t\t${listFormCategories}\n\t\t`,\n\t\t{}\n\t);\n\n\tif (loading || isFormTypeLoading) return <Loader />;\n\tif (error || isFormTypeError) {\n\t\tdispatch({\n\t\t\ttype: SNACKBAR_OPEN,\n\t\t\topen: true,\n\t\t\tmessage: 'Something went wrong',\n\t\t\tvariant: 'alert',\n\t\t\talertSeverity: 'error',\n\t\t\tanchorOrigin: { vertical: 'top', horizontal: 'center' },\n\t\t});\n\t\treturn <></>;\n\t}\n\n\tif (_isEmpty(data) || _isEmpty(formCategories)) return <></>;\n\n\tconst form = _get(data, ['getForm']);\n\tconst {\n\t\tTitle: title,\n\t\tFormTypeId: formTypeId,\n\t\tCategoryId: formCategoryId,\n\t\tFormId: formId,\n\t\tTemplate: template,\n\t} = form;\n\tconst categoryIdAndFormTypeIdValue = `${formCategoryId},${formTypeId}`;\n\tconst formTypes = _get(formCategories, 'listFormCategories');\n\tconst jsonTemplate = JSON.parse(template);\n\n\tconst onSubmitHandler = async (\n\t\tvalues: FormType,\n\t\t{ setStatus, setSubmitting }: FormikHelpers<FormType>\n\t) => {\n\t\tconst { formTypeId: categoryAndFormType, title } = values;\n\t\tconst [categoryId, formTypeId] = categoryAndFormType.split(',');\n\n\t\tconst currentTemplate = JSON.stringify(\n\t\t\tsessionStorage.getItem('template') as string\n\t\t);\n\n\t\ttry {\n\t\t\tawait client.mutate({\n\t\t\t\tmutation: gql`\n\t\t\t\t\t${updateForm}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tFormId: formId,\n\t\t\t\t\tForm: {\n\t\t\t\t\t\tCategoryId: categoryId,\n\t\t\t\t\t\tFormTypeId: formTypeId,\n\t\t\t\t\t\tTitle: title,\n\t\t\t\t\t\tTemplate: currentTemplate,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tdispatch({\n\t\t\t\ttype: SNACKBAR_OPEN,\n\t\t\t\topen: true,\n\t\t\t\tmessage: 'Form has Updated',\n\t\t\t\tvariant: 'alert',\n\t\t\t\talertSeverity: 'success',\n\t\t\t\tanchorOrigin: { vertical: 'top', horizontal: 'center' },\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconst message = _get(e, 'message', 'Something went wrong');\n\t\t\tsetStatus({ success: false });\n\t\t\tsetSubmitting(false);\n\n\t\t\tdispatch({\n\t\t\t\ttype: SNACKBAR_OPEN,\n\t\t\t\topen: true,\n\t\t\t\tmessage,\n\t\t\t\tvariant: 'alert',\n\t\t\t\talertSeverity: 'error',\n\t\t\t\tanchorOrigin: { vertical: 'top', horizontal: 'center' },\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<Grid container spacing={gridSpacing}>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<MainCard title={title}>\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\tformTypeId: categoryIdAndFormTypeIdValue,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvalidationSchema={yup.object().shape({\n\t\t\t\t\t\t\ttitle: yup.string().required('Title is require'),\n\t\t\t\t\t\t\tformTypeId: yup.string().required('Form Type is require'),\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tonSubmit={onSubmitHandler}\n\t\t\t\t\t>\n\t\t\t\t\t\t{({\n\t\t\t\t\t\t\terrors,\n\t\t\t\t\t\t\thandleChange,\n\t\t\t\t\t\t\thandleBlur,\n\t\t\t\t\t\t\thandleSubmit,\n\t\t\t\t\t\t\ttouched,\n\t\t\t\t\t\t\tvalues,\n\t\t\t\t\t\t\tisSubmitting,\n\t\t\t\t\t\t}) => (\n\t\t\t\t\t\t\t<form noValidate onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t<Grid container spacing={2} alignItems='center'>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} lg={6}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Title</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={values.title}\n\t\t\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t\t\tplaceholder='Title'\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\t\t\t\t\terror={touched.title && Boolean(errors.title)}\n\t\t\t\t\t\t\t\t\t\t\thelperText={touched.title && errors.title}\n\t\t\t\t\t\t\t\t\t\t\tname='title'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} lg={6}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel htmlFor='formTypeId'>Form Type</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tnative\n\t\t\t\t\t\t\t\t\t\t\tid='formTypeId'\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={values.formTypeId}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t\terror={touched.formTypeId && Boolean(errors.formTypeId)}\n\t\t\t\t\t\t\t\t\t\t\tname='formTypeId'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{formTypes.map((data: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\t\t\tTitle: categoryName,\n\t\t\t\t\t\t\t\t\t\t\t\t\tFormTypes: types,\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: categoryId,\n\t\t\t\t\t\t\t\t\t\t\t\t} = data;\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<optgroup label={categoryName} key={categoryId}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{types.map((formType: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst { Name: name, id: typeId } = formType;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst categoryIdAndFormTypeId = `${categoryId},${typeId}`;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={categoryIdAndFormTypeId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={categoryIdAndFormTypeId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</optgroup>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} lg={12}>\n\t\t\t\t\t\t\t\t\t\t<SurveyComponent\n\t\t\t\t\t\t\t\t\t\t\tvalue={jsonTemplate}\n\t\t\t\t\t\t\t\t\t\t\tname='Template'\n\t\t\t\t\t\t\t\t\t\t\tsaveSurveyFunc={saveSurveyFunc}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t\t<Stack direction='row' justifyContent='flex-end'>\n\t\t\t\t\t\t\t\t\t\t\t<AnimateButton>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tUpdate\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</AnimateButton>\n\t\t\t\t\t\t\t\t\t\t</Stack>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Formik>\n\t\t\t\t</MainCard>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\nexport default FormEdit;\n"],"sourceRoot":""}