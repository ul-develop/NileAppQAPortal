{"version":3,"sources":["../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../src/react/hooks/useQuery.ts","../../../../src/react/parser/index.ts","../node_modules/@material-ui/core/FormControl/useFormControl.js","../node_modules/@material-ui/core/FormControl/FormControlContext.js","../node_modules/lodash.isempty/index.js","../../../../src/react/data/OperationData.ts"],"names":["options","context","onNewData","runLazy","previous","Object","create","runLazyQuery","cleanup","lazyOptions","getQueryResult","result","observableQueryFields","getOptions","skip","data","undefined","error","loading","networkStatus","ready","called","currentObservable","currentResult","getCurrentResult","partial","errors","length","graphQLErrors","assign","getLastResult","fetchPolicy","keys","refetch","client","setOptions","previousResult","previousData","resetQueryStoreErrors","obsRefetch","variables","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","this","refreshClient","query","removeQuerySubscription","removeObservable","updateObservableQuery","isMounted","startQuerySubscription","getExecuteSsrResult","getExecuteResult","executeLazy","fetchData","ssr","Promise","resolve","afterExecute","lazy","handleErrorOrCompleted","previousOptions","unmount","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","addQueryPromise","prepareObservableQueryOptions","verifyDocumentType","Query","displayName","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","currentSubscription","subscribe","next","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","resetLastResults","onCompleted","onError","unsubscribe","andDelete","useBaseQuery","x","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","then","memoFn","key","ref","value","useDeepMemo","queryResult","useQuery","DocumentType","cache","Map","operationName","type","name","Mutation","Subscription","parser","document","cached","get","fragments","definitions","filter","kind","queries","operation","mutations","subscriptions","definition","useFormControl","React","FormControlContext","MAX_SAFE_INTEGER","mapTag","promiseTag","setTag","weakMapTag","dataViewTag","reIsHostCtor","freeGlobal","global","freeSelf","self","root","Function","freeExports","exports","nodeType","freeModule","module","moduleExports","func","transform","funcProto","prototype","objectProto","coreJsData","maskSrcKey","uid","exec","IE_PROTO","funcToString","toString","objectToString","reIsNative","RegExp","call","replace","Buffer","propertyIsEnumerable","nativeIsBuffer","isBuffer","nativeKeys","arg","DataView","getNative","Set","WeakMap","nonEnumShadows","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","baseIsNative","isObject","isMasked","isFunction","e","isHostObject","test","object","getValue","getTag","isArguments","isObjectLike","isArrayLike","isArrayLikeObject","ArrayBuffer","Ctor","constructor","ctorString","isArray","Array","isLength","tag","splice","size","isPrototype","newOptions","storePrevious","isNew"],"mappings":"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","file":"static/js/0.ad564bcb.chunk.js","sourcesContent":["import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  private currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: {};\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getQueryResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    if (this.getOptions().skip) return;\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null\n    };\n\n    if (\n      !equal(\n        newObservableQueryOptions,\n        this.previous.observableQueryOptions\n      )\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const lastError = currentObservable.getLastError();\n      const lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError,\n        lastResult\n      });\n    }\n  }\n\n  private getQueryResult = (): QueryResult<TData, TVariables> => {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: undefined,\n      onCompleted: undefined\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { QueryHookOptions, QueryResult } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to saftey check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","import * as React from 'react';\nimport FormControlContext from './FormControlContext';\nexport default function useFormControl() {\n  return React.useContext(FormControlContext);\n}","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nconst FormControlContext = /*#__PURE__*/React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  FormControlContext.displayName = 'FormControlContext';\n}\n\nexport function useFormControl() {\n  return React.useContext(FormControlContext);\n}\nexport default FormControlContext;","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap');\n\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' ||\n        typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (nonEnumShadows || isPrototype(value)) {\n    return !nativeKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEmpty;\n","import { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n"],"sourceRoot":""}