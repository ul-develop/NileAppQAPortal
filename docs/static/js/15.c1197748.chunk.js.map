{"version":3,"sources":["ui-component/cards/SubCard.tsx","views/application/property/PropertyEdit.tsx","views/pages/property/EditPage.tsx","graphql/queries.ts"],"names":["SubCard","children","content","contentClass","darkTitle","secondary","sx","title","others","theme","useTheme","Card","border","borderColor","palette","mode","dark","light","primary","boxShadow","CardHeader","p","Typography","variant","action","Divider","opacity","CardContent","className","defaultProps","useStyles","makeStyles","fileInput","width","marginBottom","background","fileContainer","padding","textAlign","borderRadius","cursor","verticalAlign","marginRight","uploadImage","position","overflow","minHeight","display","alignItems","justifyContent","zIndex","imageHover","left","top","height","transition","removeButton","margin","Row","property","source","label","TableRow","TableCell","_get","PropertyEdit","id","useQuery","gql","getProperty","variables","PropertyId","errorPolicy","loading","error","data","propertyThumbnail","useState","images","setImages","classes","useEffect","presignedUrl","dataURL","file","Loader","_isEmpty","Alert","severity","color","main","Grid","container","spacing","gridSpacing","item","lg","xs","TableContainer","Table","borderBottom","size","TableBody","value","onChange","imageList","onImageUpload","onImageRemove","dragProps","Box","component","Button","type","clsx","onClick","InputLabel","map","image","index","md","alignContent","CardMedia","Fab","EditPage","useParams","MainCard","getForm","listFormCategories","listForms","listProperties","listSellRequests"],"mappings":"gkBAyBMA,EAAU,SAAC,GASI,IARpBC,EAQmB,EARnBA,SACAC,EAOmB,EAPnBA,QACAC,EAMmB,EANnBA,aACAC,EAKmB,EALnBA,UACAC,EAImB,EAJnBA,UAImB,IAHnBC,UAGmB,MAHd,GAGc,EAFnBC,EAEmB,EAFnBA,MACGC,EACgB,iBACbC,EAAQC,cAEd,OACC,eAACC,EAAA,EAAD,yBACCL,GAAE,aACDM,OAAQ,YACRC,YACwB,SAAvBJ,EAAMK,QAAQC,KACXN,EAAMK,QAAQE,KAAKC,MAAQ,GAC3BR,EAAMK,QAAQI,QAAQD,MAC1B,SAAU,CACTE,UACwB,SAAvBV,EAAMK,QAAQC,KACX,qCACA,oCAEFT,IAEAE,GAfL,eAkBGJ,GAAaG,GACd,cAACa,EAAA,EAAD,CACCd,GAAI,CAAEe,EAAG,KACTd,MAAO,cAACe,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BhB,IACjCiB,OAAQnB,IAGTD,GAAaG,GACb,cAACa,EAAA,EAAD,CACCd,GAAI,CAAEe,EAAG,KACTd,MAAO,cAACe,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BhB,IACjCiB,OAAQnB,IAKTE,GACA,cAACkB,EAAA,EAAD,CACCnB,GAAI,CACHoB,QAAS,EACTb,YACwB,SAAvBJ,EAAMK,QAAQC,KACXN,EAAMK,QAAQE,KAAKC,MAAQ,GAC3BR,EAAMK,QAAQI,QAAQD,SAM5Bf,GACA,cAACyB,EAAA,EAAD,CAAarB,GAAI,CAAEe,EAAG,KAAOO,UAAWzB,GAAgB,GAAxD,SACEF,KAGDC,GAAWD,OAKhBD,EAAQ6B,aAAe,CACtB3B,SAAS,GAGKF,Q,2BCpET8B,EAAYC,aAAW,iBAAO,CACnCC,UAAW,CACVC,MAAO,OACPC,aAAc,OACd,0BAA2B,CAC1BC,WAAY,SAGdC,cAAe,CACdC,QAAS,SACTC,UAAW,SACXC,aAAc,MACdC,OAAQ,UACR,UAAW,CACVC,cAAe,MACfC,YAAa,QAGfC,YAAa,CACZC,SAAU,WACVC,SAAU,SACVN,aAAc,MACdC,OAAQ,UACRP,MAAO,OACPa,UAAW,QACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChB,UAAW,CACVR,cAAe,MACfC,YAAa,OAEd,sBAAuB,CACtBhB,QAAS,EACTwB,OAAQ,IAGVC,WAAY,CACXP,SAAU,WACVlB,QAAS,EACTwB,QAAS,EACTE,KAAM,IACNC,IAAK,IACLlB,WAAY,0BACZF,MAAO,OACPqB,OAAQ,OACRP,QAAS,cACTQ,WAAY,iBAEbC,aAAc,CACbC,OAAQ,YAcJC,EAAM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,MAArB,OACX,eAACC,EAAA,EAAD,WACC,cAACC,EAAA,EAAD,CAAWxC,QAAQ,OAAnB,SAA2BsC,IAC3B,cAACE,EAAA,EAAD,UAAYC,IAAKL,EAAUC,EAAQ,UA6HtBK,EAzHM,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,GACvB,EAAiCC,YAASC,YAAIC,KAAc,CAC3DC,UAAW,CAAEC,WAAYL,GACzBM,YAAa,QAFNC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIlBhB,EAAWK,IAAKW,EAAM,cAAe,IACrCC,EAAoBZ,IAAKL,EAAU,YAAa,MACtD,EAA4BkB,mBAC3B,IADD,mBAAOC,EAAP,KAAeC,EAAf,KAGMtE,EAAQC,cACRsE,EAAUlD,IAahB,GAXAmD,qBAAU,WACT,GAAKL,EAAL,CAEA,MAA8BA,EAAtBM,aAKRH,EAAU,CAJQ,CACjBI,aAFD,MAAuB,GAAvB,EAGCC,KAAM,WAGL,CAACR,IAEAH,EAAS,OAAO,cAACY,EAAA,EAAD,IAEpB,GAAIX,GAASY,IAASX,GACrB,OACC,cAACY,EAAA,EAAD,CAAOC,SAAS,QAAQlF,GAAI,CAAEmF,MAAOhF,EAAMK,QAAQ4D,MAAMgB,MAAzD,mCAUF,OACC,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAASC,IAAzB,UACC,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACC,cAAC,EAAD,CAAS1F,MAAM,uBAAf,SACC,cAAC2F,EAAA,EAAD,UACC,cAACC,EAAA,EAAD,CACC7F,GAAI,CACH,OAAQ,CACP8F,aAAc,SAGhBC,KAAK,QANN,SAQC,eAACC,EAAA,EAAD,WACC,cAAC,EAAD,CAAK3C,SAAUA,EAAUC,OAAO,aAAaC,MAAM,gBACnD,cAAC,EAAD,CACCF,SAAUA,EACVC,OAAO,6BACPC,MAAM,mBAEP,cAAC,EAAD,CAAKF,SAAUA,EAAUC,OAAO,sBAAsBC,MAAM,WAC5D,cAAC,EAAD,CAAKF,SAAUA,EAAUC,OAAO,qBAAqBC,MAAM,UAC3D,cAAC,EAAD,CAAKF,SAAUA,EAAUC,OAAO,mBAAmBC,MAAM,QACzD,cAAC,EAAD,CAAKF,SAAUA,EAAUC,OAAO,oBAAoBC,MAAM,oBAM/D,cAAC8B,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,SACC,cAAC,EAAD,CAAS1F,MAAM,iBAAf,SACC,cAAC,IAAD,CAAgBgG,MAAOzB,EAAQ0B,SAnClB,SAACC,GACjB1B,EAAU0B,IAkCP,SACE,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,cAAeC,EAAjC,EAAiCA,UAAjC,OACA,eAACC,EAAA,EAAD,CAAKC,UAAU,MAAf,UACC,cAACC,EAAA,EAAD,yBACC7C,GAAG,cACH8C,KAAK,SACLpF,UAAWqF,YAAKjC,EAAQhD,WACxBkF,QAASR,GACLE,GALL,aAOC,eAACO,EAAA,EAAD,CAAYvF,UAAWoD,EAAQ5C,cAA/B,UACC,cAAC,IAAD,IADD,iCAKD,cAACuD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACEf,EAAOsC,KAAI,SAACC,EAAOC,GAAR,OACX,cAAC3B,EAAA,EAAD,CACCI,MAAI,EACJE,GAAI,GACJsB,GAAI,EACJvB,GAAI,EACJwB,aAAa,SACbxE,WAAW,SANZ,SAUC,sBAAKpB,UAAWoD,EAAQrC,YAAxB,UACC,cAAC8E,EAAA,EAAD,CAAWX,UAAU,MAAMO,MAAOA,EAAMlC,QAAS5E,MAAM,UACvD,qBAAKqB,UAAWoD,EAAQ7B,WAAxB,SACC,cAACuE,EAAA,EAAD,CACCjC,MAAM,YACNY,KAAK,QACLzE,UAAWoD,EAAQxB,aACnB0D,QAAS,kBAAMP,EAAcW,IAJ9B,SAMC,cAAC,IAAD,YAXEA,sBC3KDK,UAjBE,WAChB,IAAQzD,EAAO0D,cAAP1D,GAER,OACC,cAAC2D,EAAA,EAAD,CACCtH,MAAK,WAAM2D,GACX7D,UACC,eAAC0G,EAAA,EAAD,CAAQC,KAAK,SAASzF,QAAQ,YAAYkE,MAAM,YAAhD,UACC,cAAC,IAAD,IAAa,IADd,UAHF,SAQC,cAAC,EAAD,CAAcvB,GAAIA,Q,iCCpBrB,4MAIO,IAAM4D,EAAO,uPA0KPzD,EAAW,gfA6FX0D,EAAkB,oaA4BlBC,EAAS,gWAwDTC,EAAc,0bAuBdC,EAAgB","file":"static/js/15.c1197748.chunk.js","sourcesContent":["import { ReactNode } from 'react';\n\n// material-ui\nimport { useTheme } from '@material-ui/core/styles';\nimport {\n\tCard,\n\tCardContent,\n\tCardHeader,\n\tDivider,\n\tTypography,\n} from '@material-ui/core';\n\nexport interface SubCardProps {\n\tchildren: ReactNode | string | null;\n\tcontent?: boolean;\n\tclassName?: string;\n\tcontentClass?: string;\n\tdarkTitle?: boolean;\n\tsecondary?: ReactNode | string | {};\n\tsx?: {};\n\ttitle?: ReactNode | string | {};\n}\n\n// -----------------------|| CUSTOM SUB CARD ||-----------------------//\n\nconst SubCard = ({\n\tchildren,\n\tcontent,\n\tcontentClass,\n\tdarkTitle,\n\tsecondary,\n\tsx = {},\n\ttitle,\n\t...others\n}: SubCardProps) => {\n\tconst theme = useTheme();\n\n\treturn (\n\t\t<Card\n\t\t\tsx={{\n\t\t\t\tborder: '1px solid',\n\t\t\t\tborderColor:\n\t\t\t\t\ttheme.palette.mode === 'dark'\n\t\t\t\t\t\t? theme.palette.dark.light + 15\n\t\t\t\t\t\t: theme.palette.primary.light,\n\t\t\t\t':hover': {\n\t\t\t\t\tboxShadow:\n\t\t\t\t\t\ttheme.palette.mode === 'dark'\n\t\t\t\t\t\t\t? '0 2px 14px 0 rgb(33 150 243 / 10%)'\n\t\t\t\t\t\t\t: '0 2px 14px 0 rgb(32 40 45 / 8%)',\n\t\t\t\t},\n\t\t\t\t...sx,\n\t\t\t}}\n\t\t\t{...others}\n\t\t>\n\t\t\t{/* card header and action */}\n\t\t\t{!darkTitle && title && (\n\t\t\t\t<CardHeader\n\t\t\t\t\tsx={{ p: 2.5 }}\n\t\t\t\t\ttitle={<Typography variant='h5'>{title}</Typography>}\n\t\t\t\t\taction={secondary}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{darkTitle && title && (\n\t\t\t\t<CardHeader\n\t\t\t\t\tsx={{ p: 2.5 }}\n\t\t\t\t\ttitle={<Typography variant='h4'>{title}</Typography>}\n\t\t\t\t\taction={secondary}\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t{/* content & header divider */}\n\t\t\t{title && (\n\t\t\t\t<Divider\n\t\t\t\t\tsx={{\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tborderColor:\n\t\t\t\t\t\t\ttheme.palette.mode === 'dark'\n\t\t\t\t\t\t\t\t? theme.palette.dark.light + 15\n\t\t\t\t\t\t\t\t: theme.palette.primary.light,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t{/* card content */}\n\t\t\t{content && (\n\t\t\t\t<CardContent sx={{ p: 2.5 }} className={contentClass || ''}>\n\t\t\t\t\t{children}\n\t\t\t\t</CardContent>\n\t\t\t)}\n\t\t\t{!content && children}\n\t\t</Card>\n\t);\n};\n\nSubCard.defaultProps = {\n\tcontent: true,\n};\n\nexport default SubCard;\n","import {\n\tGrid,\n\tTable,\n\tTableBody,\n\tTableCell,\n\tTableContainer,\n\tTableRow,\n\tAlert,\n\tuseTheme,\n\tInputLabel,\n\tButton,\n\tBox,\n\tCardMedia,\n\tFab,\n} from '@material-ui/core';\nimport _get from 'lodash.get';\nimport _isEmpty from 'lodash.isempty';\nimport { useQuery, gql } from '@apollo/client';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles } from '@material-ui/styles';\nimport ImageUploading, { ImageListType } from 'react-images-uploading';\nimport { useEffect, useState } from 'react';\nimport clsx from 'clsx';\n\nimport SubCard from '../../../ui-component/cards/SubCard';\nimport { gridSpacing } from '../../../store/constant';\nimport { TProperty } from '../../../types';\nimport { getProperty } from '../../../graphql/queries';\nimport Loader from '../../../ui-component/Loader';\n\nconst useStyles = makeStyles(() => ({\n\tfileInput: {\n\t\twidth: '100%',\n\t\tmarginBottom: '24px',\n\t\t'&:dragover, &:dragenter': {\n\t\t\tbackground: '#333',\n\t\t},\n\t},\n\tfileContainer: {\n\t\tpadding: '30px 0',\n\t\ttextAlign: 'center',\n\t\tborderRadius: '4px',\n\t\tcursor: 'pointer',\n\t\t'& > svg': {\n\t\t\tverticalAlign: 'sub',\n\t\t\tmarginRight: '5px',\n\t\t},\n\t},\n\tuploadImage: {\n\t\tposition: 'relative',\n\t\toverflow: 'hidden',\n\t\tborderRadius: '4px',\n\t\tcursor: 'pointer',\n\t\twidth: '100%',\n\t\tminHeight: '100px',\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\t'& > svg': {\n\t\t\tverticalAlign: 'sub',\n\t\t\tmarginRight: '5px',\n\t\t},\n\t\t'&:hover $imageHover': {\n\t\t\topacity: 1,\n\t\t\tzIndex: 1,\n\t\t},\n\t},\n\timageHover: {\n\t\tposition: 'absolute',\n\t\topacity: 0,\n\t\tzIndex: -1,\n\t\tleft: '0',\n\t\ttop: '0',\n\t\tbackground: 'rgba(255, 255, 255, .8)',\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tdisplay: 'inline-flex',\n\t\ttransition: 'all 0.3s ease',\n\t},\n\tremoveButton: {\n\t\tmargin: 'auto',\n\t},\n}));\n\ntype Props = {\n\tid: string;\n};\n\ntype TRowProps = {\n\tproperty: TProperty;\n\tsource: string;\n\tlabel: string;\n};\n\nconst Row = ({ property, source, label }: TRowProps) => (\n\t<TableRow>\n\t\t<TableCell variant='head'>{label}</TableCell>\n\t\t<TableCell>{_get(property, source, '')}</TableCell>\n\t</TableRow>\n);\n\nconst PropertyEdit = ({ id }: Props) => {\n\tconst { loading, error, data } = useQuery(gql(getProperty), {\n\t\tvariables: { PropertyId: id },\n\t\terrorPolicy: 'all',\n\t});\n\tconst property = _get(data, 'getProperty', {});\n\tconst propertyThumbnail = _get(property, 'Thumbnail', null);\n\tconst [images, setImages] = useState<Array<{ dataURL: string; file: any }>>(\n\t\t[]\n\t);\n\tconst theme = useTheme();\n\tconst classes = useStyles();\n\n\tuseEffect(() => {\n\t\tif (!propertyThumbnail) return;\n\n\t\tconst { presignedUrl = '' } = propertyThumbnail;\n\t\tconst thumbnail = {\n\t\t\tdataURL: presignedUrl,\n\t\t\tfile: null,\n\t\t};\n\t\tsetImages([thumbnail]);\n\t}, [propertyThumbnail]);\n\n\tif (loading) return <Loader />;\n\n\tif (error && _isEmpty(data)) {\n\t\treturn (\n\t\t\t<Alert severity='error' sx={{ color: theme.palette.error.main }}>\n\t\t\t\tSomething went wrong!\n\t\t\t</Alert>\n\t\t);\n\t}\n\n\tconst onChange = (imageList: ImageListType) => {\n\t\tsetImages(imageList as never[]);\n\t};\n\n\treturn (\n\t\t<Grid container spacing={gridSpacing}>\n\t\t\t<Grid item lg={6} xs={12}>\n\t\t\t\t<SubCard title='Property Information'>\n\t\t\t\t\t<TableContainer>\n\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\tsx={{\n\t\t\t\t\t\t\t\t'& td': {\n\t\t\t\t\t\t\t\t\tborderBottom: 'none',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tsize='small'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t<Row property={property} source='PropertyNo' label='Property No' />\n\t\t\t\t\t\t\t\t<Row\n\t\t\t\t\t\t\t\t\tproperty={property}\n\t\t\t\t\t\t\t\t\tsource='PropertyData.StreetAddress'\n\t\t\t\t\t\t\t\t\tlabel='Street Address'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Row property={property} source='PropertyData.County' label='County' />\n\t\t\t\t\t\t\t\t<Row property={property} source='PropertyData.State' label='State' />\n\t\t\t\t\t\t\t\t<Row property={property} source='PropertyData.Zip' label='Zip' />\n\t\t\t\t\t\t\t\t<Row property={property} source='PropertyData.City' label='City' />\n\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t</Table>\n\t\t\t\t\t</TableContainer>\n\t\t\t\t</SubCard>\n\t\t\t</Grid>\n\t\t\t<Grid item lg={6} xs={12}>\n\t\t\t\t<SubCard title='Property Photo'>\n\t\t\t\t\t<ImageUploading value={images} onChange={onChange}>\n\t\t\t\t\t\t{({ onImageUpload, onImageRemove, dragProps }) => (\n\t\t\t\t\t\t\t<Box component='div'>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tid='file-upload'\n\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\tclassName={clsx(classes.fileInput)}\n\t\t\t\t\t\t\t\t\tonClick={onImageUpload}\n\t\t\t\t\t\t\t\t\t{...dragProps}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<InputLabel className={classes.fileContainer}>\n\t\t\t\t\t\t\t\t\t\t<CloudUploadIcon />\n\t\t\t\t\t\t\t\t\t\tDrop file here to upload\n\t\t\t\t\t\t\t\t\t</InputLabel>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Grid container spacing={1}>\n\t\t\t\t\t\t\t\t\t{images.map((image, index) => (\n\t\t\t\t\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\txs={12}\n\t\t\t\t\t\t\t\t\t\t\tmd={6}\n\t\t\t\t\t\t\t\t\t\t\tlg={4}\n\t\t\t\t\t\t\t\t\t\t\talignContent='center'\n\t\t\t\t\t\t\t\t\t\t\talignItems='center'\n\t\t\t\t\t\t\t\t\t\t\t// eslint-disable-next-line react/no-array-index-key\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<div className={classes.uploadImage}>\n\t\t\t\t\t\t\t\t\t\t\t\t<CardMedia component='img' image={image.dataURL} title='image' />\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={classes.imageHover}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Fab\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize='small'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.removeButton}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onImageRemove(index)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<CloseIcon />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Fab>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ImageUploading>\n\t\t\t\t</SubCard>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\nexport default PropertyEdit;\n","import { useParams } from 'react-router-dom';\n\nimport SaveIcon from '@material-ui/icons/Save';\nimport { Button } from '@material-ui/core';\nimport MainCard from '../../../ui-component/cards/MainCard';\n\nimport PropertyEdit from '../../application/property/PropertyEdit';\n\nconst EditPage = () => {\n\tconst { id } = useParams<{ id: string }>();\n\n\treturn (\n\t\t<MainCard\n\t\t\ttitle={`#${id}`}\n\t\t\tsecondary={\n\t\t\t\t<Button type='button' variant='contained' color=\"secondary\">\n\t\t\t\t\t<SaveIcon />{\" \"}Save\n\t\t\t\t</Button>\n\t\t\t}\n\t\t>\n\t\t\t<PropertyEdit id={id} />\n\t\t</MainCard>\n\t);\n};\n\nexport default EditPage;\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getForm = /* GraphQL */ `\n\tquery GetForm($FormId: ID!) {\n\t\tgetForm(FormId: $FormId) {\n\t\t\tCategoryId\n\t\t\tCreatedBy\n\t\t\tCreatedDT\n\t\t\tFormId\n\t\t\tFormStatus\n\t\t\tFormTypeId\n\t\t\tTemplate\n\t\t\tTitle\n\t\t\tUpdatedBy\n\t\t\tUpdatedDT\n\t\t}\n\t}\n`;\nexport const getFormCategory = /* GraphQL */ `\n\tquery GetFormCategory($CategoryId: ID!) {\n\t\tgetFormCategory(CategoryId: $CategoryId) {\n\t\t\tActive\n\t\t\tFormTypes {\n\t\t\t\tActive\n\t\t\t\tName\n\t\t\t\tOrder\n\t\t\t\tid\n\t\t\t}\n\t\t\tForms {\n\t\t\t\tCategoryId\n\t\t\t\tCreatedBy\n\t\t\t\tCreatedDT\n\t\t\t\tFormId\n\t\t\t\tFormStatus\n\t\t\t\tFormTypeId\n\t\t\t\tTemplate\n\t\t\t\tTitle\n\t\t\t\tUpdatedBy\n\t\t\t\tUpdatedDT\n\t\t\t}\n\t\t\tItemType\n\t\t\tTitle\n\t\t\tid\n\t\t}\n\t}\n`;\nexport const getOffer = /* GraphQL */ `\n\tquery GetOffer($OfferId: ID!) {\n\t\tgetOffer(OfferId: $OfferId) {\n\t\t\tAgentInfo {\n\t\t\t\tAssistantEmail\n\t\t\t\tDreNumber\n\t\t\t\tEmail\n\t\t\t\tFirstname\n\t\t\t\tLastname\n\t\t\t\tMiddlename\n\t\t\t\tPhone\n\t\t\t}\n\t\t\tBuyerInfo {\n\t\t\t\tFirstName\n\t\t\t\tLastName\n\t\t\t\tMiddleName\n\t\t\t\tTitleName\n\t\t\t}\n\t\t\tBuyerType\n\t\t\tContingencies {\n\t\t\t\tAllRemoved\n\t\t\t\tAnyAndAll\n\t\t\t\tFinanceContingency\n\t\t\t\tFinanceContingencyDueDate\n\t\t\t\tFinanceContingencyRemoved\n\t\t\t\tFinanceContingencyRemovedAt\n\t\t\t\tInspectionContingency\n\t\t\t\tInspectionContingencyDueDate\n\t\t\t\tInspectionContingencyRemoved\n\t\t\t\tInspectionContingencyRemovedAt\n\t\t\t\tSaleOfHomeContingency\n\t\t\t\tSaleOfHomeContingencyDueDate\n\t\t\t\tSaleOfHomeContingencyRemoved\n\t\t\t\tSaleOfHomeContingencyRemovedAt\n\t\t\t}\n\t\t\tCounterOffer {\n\t\t\t\tCounterOfferId\n\t\t\t\tForms\n\t\t\t\tPosition\n\t\t\t}\n\t\t\tFirmInfo {\n\t\t\t\tCompanyEmail\n\t\t\t\tCompanyPhone\n\t\t\t\tCompanyname\n\t\t\t\tDreNumber\n\t\t\t}\n\t\t\tFunding {\n\t\t\t\tDownPayment\n\t\t\t\tFicoScore\n\t\t\t\tLoanType\n\t\t\t\tPreapprovedForLoan\n\t\t\t\tPurchaseType\n\t\t\t}\n\t\t\tOffer {\n\t\t\t\tClosingPeriod\n\t\t\t\tFinanceContingency\n\t\t\t\tFurniture\n\t\t\t\tInspectionContingency\n\t\t\t\tOfferPrice\n\t\t\t\tSaleOfHomeContingency\n\t\t\t}\n\t\t\tOfferId\n\t\t\tOfferNo\n\t\t\tPropertyData {\n\t\t\t\tCity\n\t\t\t\tCounty\n\t\t\t\tFullAddress\n\t\t\t\tOwnerNames\n\t\t\t\tState\n\t\t\t\tStreetAddress\n\t\t\t\tVestingType\n\t\t\t\tYearBuilt\n\t\t\t\tZip\n\t\t\t}\n\t\t\tPropertyId\n\t\t\tPropertyNo\n\t\t\tStep {\n\t\t\t\tbuyer_can_submit_offer\n\t\t\t\tdisplay_on_advisor_portal\n\t\t\t\tdisplay_on_seller_dashboard\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\twaiting_seller_to_act\n\t\t\t}\n\t\t\tStepId\n\t\t}\n\t}\n`;\nexport const getOfferDocPutUrls = /* GraphQL */ `\n\tquery GetOfferDocPutUrls(\n\t\t$DocumentType: String!\n\t\t$Documents: [FileItemInput]!\n\t\t$OfferId: ID!\n\t) {\n\t\tgetOfferDocPutUrls(\n\t\t\tDocumentType: $DocumentType\n\t\t\tDocuments: $Documents\n\t\t\tOfferId: $OfferId\n\t\t) {\n\t\t\tid\n\t\t\turl\n\t\t}\n\t}\n`;\nexport const getOfferStep = /* GraphQL */ `\n\tquery GetOfferStep($StepId: ID!) {\n\t\tgetOfferStep(StepId: $StepId) {\n\t\t\tallowed_actions {\n\t\t\t\taction\n\t\t\t\tform_action\n\t\t\t\tnext_step_id\n\t\t\t}\n\t\t\tbuyer_can_submit_offer\n\t\t\tdisplay_on_advisor_portal\n\t\t\tdisplay_on_seller_dashboard\n\t\t\tid\n\t\t\tmessages {\n\t\t\t\tadvisor\n\t\t\t\tbuyer\n\t\t\t\tseller\n\t\t\t}\n\t\t\tname\n\t\t\twaiting_seller_to_act\n\t\t}\n\t}\n`;\nexport const getProperty = /* GraphQL */ `\n\tquery GetProperty($PropertyId: ID!) {\n\t\tgetProperty(PropertyId: $PropertyId) {\n\t\t\tCreatedAt\n\t\t\tListed\n\t\t\tPropertyData {\n\t\t\t\tCity\n\t\t\t\tCounty\n\t\t\t\tFullAddress\n\t\t\t\tOwnerNames\n\t\t\t\tState\n\t\t\t\tStreetAddress\n\t\t\t\tVestingType\n\t\t\t\tYearBuilt\n\t\t\t\tZip\n\t\t\t}\n\t\t\tPropertyId\n\t\t\tPropertyNo\n\t\t\tThumbnail {\n\t\t\t\tid\n\t\t\t\tkey\n\t\t\t\tname\n\t\t\t\tpresignedUrl\n\t\t\t\tsize\n\t\t\t\ttype\n\t\t\t}\n\t\t\tUpdatedAt\n\t\t}\n\t}\n`;\nexport const getPropertyThumbnailPutUrl = /* GraphQL */ `\n\tquery GetPropertyThumbnailPutUrl($Photos: [FileItemInput]!, $PropertyId: ID!) {\n\t\tgetPropertyThumbnailPutUrl(Photos: $Photos, PropertyId: $PropertyId) {\n\t\t\tid\n\t\t\turl\n\t\t}\n\t}\n`;\nexport const getSellRequest = /* GraphQL */ `\n\tquery GetSellRequest($RequestId: ID!) {\n\t\tgetSellRequest(RequestId: $RequestId) {\n\t\t\tApprovedBy\n\t\t\tApprovedByAdvisor\n\t\t\tCreatedAt\n\t\t\tCreatedBy\n\t\t\tDTPropertyId\n\t\t\tDataTreeProperties {\n\t\t\t\tCount\n\t\t\t}\n\t\t\tPropertyData {\n\t\t\t\tBedrooms\n\t\t\t\tCity\n\t\t\t\tCounty\n\t\t\t\tFullAddress\n\t\t\t\tFullBath\n\t\t\t\tLandUse\n\t\t\t\tLivingArea\n\t\t\t\tLotArea\n\t\t\t\tOwnerNames\n\t\t\t\tState\n\t\t\t\tStreetAddress\n\t\t\t\tVestingOwnershipRight\n\t\t\t\tVestingTypeMapped\n\t\t\t\tVestingTypeOverride\n\t\t\t\tYearBuilt\n\t\t\t\tYearBuiltOverride\n\t\t\t\tZip\n\t\t\t}\n\t\t\tPropertyId\n\t\t\tPropertyListPriceRange {\n\t\t\t\tMax\n\t\t\t\tMaxFormatted\n\t\t\t\tMin\n\t\t\t\tMinFormatted\n\t\t\t}\n\t\t\tRequestId\n\t\t\tSellerInfo {\n\t\t\t\tEmail\n\t\t\t\tFirstName\n\t\t\t\tLastName\n\t\t\t\tPhone\n\t\t\t}\n\t\t\tTaxReportTaxResourceMessage\n\t\t\tTaxReportTaxResourceStatus\n\t\t\tTaxReportTaxResourceStatusUpdatedAt\n\t\t\tTaxReportTotalViewMessage\n\t\t\tTaxReportTotalViewStatus\n\t\t\tTaxReportTotalViewUpdatedAt\n\t\t\tUpdatedAt\n\t\t\tUpdatedBy\n\t\t}\n\t}\n`;\nexport const listFormCategories = /* GraphQL */ `\n\tquery ListFormCategories {\n\t\tlistFormCategories {\n\t\t\tActive\n\t\t\tFormTypes {\n\t\t\t\tActive\n\t\t\t\tName\n\t\t\t\tOrder\n\t\t\t\tid\n\t\t\t}\n\t\t\tForms {\n\t\t\t\tCategoryId\n\t\t\t\tCreatedBy\n\t\t\t\tCreatedDT\n\t\t\t\tFormId\n\t\t\t\tFormStatus\n\t\t\t\tFormTypeId\n\t\t\t\tTemplate\n\t\t\t\tTitle\n\t\t\t\tUpdatedBy\n\t\t\t\tUpdatedDT\n\t\t\t}\n\t\t\tItemType\n\t\t\tTitle\n\t\t\tid\n\t\t}\n\t}\n`;\nexport const listForms = /* GraphQL */ `\n\tquery ListForms($limit: Int, $nextToken: String) {\n\t\tlistForms(limit: $limit, nextToken: $nextToken) {\n\t\t\titems {\n\t\t\t\tCategoryId\n\t\t\t\tCreatedBy\n\t\t\t\tCreatedDT\n\t\t\t\tFormId\n\t\t\t\tFormStatus\n\t\t\t\tFormTypeId\n\t\t\t\tTemplate\n\t\t\t\tTitle\n\t\t\t\tUpdatedBy\n\t\t\t\tUpdatedDT\n\t\t\t}\n\t\t\tnextToken\n\t\t}\n\t}\n`;\nexport const listOfferSteps = /* GraphQL */ `\n\tquery ListOfferSteps {\n\t\tlistOfferSteps {\n\t\t\tallowed_actions {\n\t\t\t\taction\n\t\t\t\tform_action\n\t\t\t\tnext_step_id\n\t\t\t}\n\t\t\tbuyer_can_submit_offer\n\t\t\tdisplay_on_advisor_portal\n\t\t\tdisplay_on_seller_dashboard\n\t\t\tid\n\t\t\tmessages {\n\t\t\t\tadvisor\n\t\t\t\tbuyer\n\t\t\t\tseller\n\t\t\t}\n\t\t\tname\n\t\t\twaiting_seller_to_act\n\t\t}\n\t}\n`;\nexport const listOffers = /* GraphQL */ `\n\tquery ListOffers($limit: Int, $nextToken: String) {\n\t\tlistOffers(limit: $limit, nextToken: $nextToken) {\n\t\t\titems {\n\t\t\t\tBuyerType\n\t\t\t\tOfferId\n\t\t\t\tOfferNo\n\t\t\t\tPropertyId\n\t\t\t\tPropertyNo\n\t\t\t\tStepId\n\t\t\t}\n\t\t\tnextToken\n\t\t}\n\t}\n`;\nexport const listProperties = /* GraphQL */ `\n\tquery ListProperties($limit: Int, $nextToken: String) {\n\t\tlistProperties(limit: $limit, nextToken: $nextToken) {\n\t\t\titems {\n\t\t\t\tCreatedAt\n\t\t\t\tListed\n\t\t\t\tPropertyId\n\t\t\t\tPropertyNo\n\t\t\t\tUpdatedAt\n\t\t\t\tPropertyData {\n\t\t\t\t\tCity\n\t\t\t\t\tCounty\n\t\t\t\t\tFullAddress\n\t\t\t\t\tOwnerNames\n\t\t\t\t\tState\n\t\t\t\t\tStreetAddress\n\t\t\t\t\tZip\n\t\t\t\t}\n\t\t\t}\n\t\t\tnextToken\n\t\t}\n\t}\n`;\nexport const listSellRequests = /* GraphQL */ `\n\tquery ListSellRequests($limit: Int, $nextToken: String) {\n\t\tlistSellRequests(limit: $limit, nextToken: $nextToken) {\n\t\t\titems {\n\t\t\t\tApprovedBy\n\t\t\t\tApprovedByAdvisor\n\t\t\t\tCreatedAt\n\t\t\t\tCreatedBy\n\t\t\t\tDTPropertyId\n\t\t\t\tPropertyId\n\t\t\t\tRequestId\n\t\t\t\tTaxReportTaxResourceMessage\n\t\t\t\tTaxReportTaxResourceStatus\n\t\t\t\tTaxReportTaxResourceStatusUpdatedAt\n\t\t\t\tTaxReportTotalViewMessage\n\t\t\t\tTaxReportTotalViewStatus\n\t\t\t\tTaxReportTotalViewUpdatedAt\n\t\t\t\tUpdatedAt\n\t\t\t\tUpdatedBy\n\t\t\t\tSellerInfo {\n\t\t\t\t\tEmail\n\t\t\t\t\tFirstName\n\t\t\t\t\tLastName\n\t\t\t\t\tPhone\n\t\t\t\t}\n\t\t\t}\n\t\t\tnextToken\n\t\t}\n\t}\n`;\nexport const listSupportedVestingTypes = /* GraphQL */ `\n\tquery ListSupportedVestingTypes {\n\t\tlistSupportedVestingTypes\n\t}\n`;\n"],"sourceRoot":""}