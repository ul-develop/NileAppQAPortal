/* @license
        Papa Parse
        v5.3.0
        https://github.com/mholt/PapaParse
        License: MIT
        */

/*!
         * Signature Pad v2.3.2
         * https://github.com/szimek/signature_pad
         *
         * Copyright 2017 Szymon Nowak
         * Released under the MIT license
         *
         * The main idea and some parts of the code (e.g. drawing variable width Bézier curve) are taken from:
         * http://corner.squareup.com/2012/07/smoother-signatures.html
         *
         * Implementation of interpolation using cubic Bézier curves is taken from:
         * http://benknowscode.wordpress.com/2012/09/14/path-interpolation-using-cubic-bezier-and-control-point-estimation-in-javascript
         *
         * Algorithm for approximated length of a Bézier curve is taken from:
         * http://www.lemoda.net/maths/bezier-length/index.html
         *
         */

/*!
   * Sizzle CSS Selector Engine v2.3.6
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2021-02-16
   */

/*!
 * Knockout JavaScript library v3.5.1
 * (c) The Knockout.js team - http://knockoutjs.com/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

/*!
 * SurveyJS Creator v1.8.60
 * (c) 2015-2021 Devsoft Baltic OÜ - http://surveyjs.io/
 * Github: https://github.com/surveyjs/survey-creator
 * License: https://surveyjs.io/Licenses#SurveyCreator
 */

/*!
 * dist/inputmask
 * https://github.com/RobinHerbots/Inputmask
 * Copyright (c) 2010 - 2021 Robin Herbots
 * Licensed under the MIT license
 * Version: 5.0.6
 */

/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */

/*!
 * surveyjs - Survey JavaScript library v1.8.60
 * Copyright (c) 2015-2021 Devsoft Baltic OÜ  - http://surveyjs.io/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

/*! ../../base */

/*! ../../calculatedValue */

/*! ../../choicesRestful */

/*! ../../conditionProcessValue */

/*! ../../conditions */

/*! ../../conditionsParser */

/*! ../../defaultCss/cssstandard */

/*! ../../dragdrop/choices */

/*! ../../dragdrop/survey-elements */

/*! ../../dxSurveyService */

/*! ../../error */

/*! ../../expressionItems */

/*! ../../expressions/expressions */

/*! ../../flowpanel */

/*! ../../functionsfactory */

/*! ../../helpers */

/*! ../../itemvalue */

/*! ../../jsonobject */

/*! ../../kobase */

/*! ../../list */

/*! ../../localizablestring */

/*! ../../localization/arabic */

/*! ../../localization/basque */

/*! ../../localization/bulgarian */

/*! ../../localization/catalan */

/*! ../../localization/croatian */

/*! ../../localization/czech */

/*! ../../localization/danish */

/*! ../../localization/dutch */

/*! ../../localization/english */

/*! ../../localization/estonian */

/*! ../../localization/finnish */

/*! ../../localization/french */

/*! ../../localization/georgian */

/*! ../../localization/german */

/*! ../../localization/greek */

/*! ../../localization/hebrew */

/*! ../../localization/hindi */

/*! ../../localization/hungarian */

/*! ../../localization/icelandic */

/*! ../../localization/indonesian */

/*! ../../localization/italian */

/*! ../../localization/japanese */

/*! ../../localization/kazakh */

/*! ../../localization/korean */

/*! ../../localization/latvian */

/*! ../../localization/lithuanian */

/*! ../../localization/macedonian */

/*! ../../localization/norwegian */

/*! ../../localization/persian */

/*! ../../localization/polish */

/*! ../../localization/portuguese */

/*! ../../localization/portuguese-br */

/*! ../../localization/romanian */

/*! ../../localization/russian */

/*! ../../localization/serbian */

/*! ../../localization/simplified-chinese */

/*! ../../localization/spanish */

/*! ../../localization/swahili */

/*! ../../localization/swedish */

/*! ../../localization/tajik */

/*! ../../localization/thai */

/*! ../../localization/traditional-chinese */

/*! ../../localization/turkish */

/*! ../../localization/ukrainian */

/*! ../../localization/vietnamese */

/*! ../../localization/welsh */

/*! ../../main.scss */

/*! ../../page */

/*! ../../panel */

/*! ../../popup */

/*! ../../question */

/*! ../../questionCustomWidgets */

/*! ../../question_baseselect */

/*! ../../question_boolean */

/*! ../../question_buttongroup */

/*! ../../question_checkbox */

/*! ../../question_comment */

/*! ../../question_custom */

/*! ../../question_dropdown */

/*! ../../question_empty */

/*! ../../question_expression */

/*! ../../question_file */

/*! ../../question_html */

/*! ../../question_image */

/*! ../../question_imagepicker */

/*! ../../question_matrix */

/*! ../../question_matrixdropdown */

/*! ../../question_matrixdropdownbase */

/*! ../../question_matrixdynamic */

/*! ../../question_multipletext */

/*! ../../question_paneldynamic */

/*! ../../question_radiogroup */

/*! ../../question_ranking */

/*! ../../question_rating */

/*! ../../question_signaturepad */

/*! ../../question_text */

/*! ../../questionfactory */

/*! ../../questionnonvalue */

/*! ../../settings */

/*! ../../stylesmanager */

/*! ../../survey */

/*! ../../survey-element */

/*! ../../survey-error */

/*! ../../surveyProgressButtons */

/*! ../../surveyStrings */

/*! ../../surveyWindow */

/*! ../../surveytimer */

/*! ../../template-renderer */

/*! ../../textPreProcessor */

/*! ../../trigger */

/*! ../../utils/is-mobile */

/*! ../../utils/utils */

/*! ../../validator */

/*! ../../vendor/knockout-sortable.js */

/*! ../actions/action */

/*! ../actions/adaptive-container */

/*! ../actions/container */

/*! ../adorners/flowpanel-actions */

/*! ../adorners/image */

/*! ../adorners/image-items */

/*! ../adorners/item-editor */

/*! ../adorners/label-editor */

/*! ../adorners/question-actions */

/*! ../adorners/rating-item-editor */

/*! ../adorners/select-items */

/*! ../adorners/select-items-display */

/*! ../adorners/select-items-editor */

/*! ../adorners/title-actions */

/*! ../adorners/title-editor */

/*! ../adorners/title-image */

/*! ../base */

/*! ../components/element-selector */

/*! ../components/pages-editor */

/*! ../components/results */

/*! ../components/simulator */

/*! ../components/toolbar */

/*! ../components/toolbox */

/*! ../conditionProcessValue */

/*! ../defaultCss/cssbootstrap */

/*! ../defaultCss/cssbootstrapmaterial */

/*! ../defaultCss/cssmodern */

/*! ../defaultCss/cssstandard */

/*! ../dragdrophelper */

/*! ../editor */

/*! ../editorLocalization */

/*! ../entries */

/*! ../expressionToDisplayText */

/*! ../extentions */

/*! ../functionsfactory */

/*! ../helpers */

/*! ../images/YouTube.png */

/*! ../images/start-designing-form.svg */

/*! ../json5 */

/*! ../jsonobject */

/*! ../knockout/components/action-bar/action-bar */

/*! ../knockout/components/boolean-checkbox/boolean-checkbox */

/*! ../knockout/components/button-group/button-group-item */

/*! ../knockout/components/default-title/default-title */

/*! ../knockout/components/list/list */

/*! ../knockout/components/logo-image/logo-image */

/*! ../knockout/components/matrix-actions/detail-button/detail-button */

/*! ../knockout/components/matrix-actions/drag-drop-icon/drag-drop-icon */

/*! ../knockout/components/matrix-actions/remove-button/remove-button */

/*! ../knockout/components/panel/panel */

/*! ../knockout/components/popup/popup */

/*! ../knockout/components/progress/buttons */

/*! ../knockout/components/progress/progress */

/*! ../knockout/components/string-editor/string-editor */

/*! ../knockout/components/string-viewer/string-viewer */

/*! ../knockout/components/svg-icon/svg-icon */

/*! ../knockout/components/template-renderer/template-renderer */

/*! ../knockout/components/title-actions/title-actions */

/*! ../knockout/koSurveyWindow */

/*! ../knockout/kobase */

/*! ../knockout/koflowpanel */

/*! ../knockout/kopage */

/*! ../knockout/koquestion */

/*! ../knockout/koquestion_baseselect */

/*! ../knockout/koquestion_boolean */

/*! ../knockout/koquestion_buttongroup */

/*! ../knockout/koquestion_checkbox */

/*! ../knockout/koquestion_comment */

/*! ../knockout/koquestion_custom */

/*! ../knockout/koquestion_dropdown */

/*! ../knockout/koquestion_empty */

/*! ../knockout/koquestion_expression */

/*! ../knockout/koquestion_file */

/*! ../knockout/koquestion_html */

/*! ../knockout/koquestion_image */

/*! ../knockout/koquestion_imagepicker */

/*! ../knockout/koquestion_matrix */

/*! ../knockout/koquestion_matrixdropdown */

/*! ../knockout/koquestion_matrixdynamic */

/*! ../knockout/koquestion_multipletext */

/*! ../knockout/koquestion_paneldynamic */

/*! ../knockout/koquestion_radiogroup */

/*! ../knockout/koquestion_ranking */

/*! ../knockout/koquestion_rating */

/*! ../knockout/koquestion_signaturepad */

/*! ../knockout/koquestion_text */

/*! ../knockout/kosurvey */

/*! ../knockout/templateText */

/*! ../list */

/*! ../localization/croatian */

/*! ../localization/danish */

/*! ../localization/dutch */

/*! ../localization/english */

/*! ../localization/finnish */

/*! ../localization/french */

/*! ../localization/german */

/*! ../localization/hungarian */

/*! ../localization/indonesian */

/*! ../localization/italian */

/*! ../localization/korean */

/*! ../localization/norwegian */

/*! ../localization/persian */

/*! ../localization/polish */

/*! ../localization/portuguese */

/*! ../localization/russian */

/*! ../localization/simplified-chinese */

/*! ../localization/spanish */

/*! ../localization/swedish */

/*! ../localization/tajik */

/*! ../localization/traditional-chinese */

/*! ../localization/turkish */

/*! ../main.scss */

/*! ../objectProperty */

/*! ../popup */

/*! ../property-editors/bindings */

/*! ../property-editors/boolean */

/*! ../property-editors/cells */

/*! ../property-editors/color */

/*! ../property-editors/condition */

/*! ../property-editors/custom */

/*! ../property-editors/default-value */

/*! ../property-editors/dropdown */

/*! ../property-editors/error */

/*! ../property-editors/expression */

/*! ../property-editors/file */

/*! ../property-editors/html-pe */

/*! ../property-editors/item-values */

/*! ../property-editors/modal */

/*! ../property-editors/modal-content */

/*! ../property-editors/multiple-values */

/*! ../property-editors/nested */

/*! ../property-editors/nested-item */

/*! ../property-editors/nested-items */

/*! ../property-editors/number */

/*! ../property-editors/one-selected */

/*! ../property-editors/property-editor */

/*! ../property-editors/restfull */

/*! ../property-editors/string */

/*! ../property-editors/strings */

/*! ../property-editors/switch */

/*! ../property-editors/text */

/*! ../property-grid/object-editor */

/*! ../property-grid/object-editor-content */

/*! ../property-grid/object-editor-old-table-content */

/*! ../property-grid/object-editor-tab */

/*! ../property-grid/property-grid */

/*! ../propertyEditors/editableObject */

/*! ../propertyEditors/propertyBindingsEditor */

/*! ../propertyEditors/propertyCalculatedValues */

/*! ../propertyEditors/propertyCellsEditor */

/*! ../propertyEditors/propertyConditionEditor */

/*! ../propertyEditors/propertyCustomEditor */

/*! ../propertyEditors/propertyDefaultValueEditor */

/*! ../propertyEditors/propertyEditorBase */

/*! ../propertyEditors/propertyEditorFactory */

/*! ../propertyEditors/propertyHtmlConditionEditor */

/*! ../propertyEditors/propertyItemValuesEditor */

/*! ../propertyEditors/propertyItemsEditor */

/*! ../propertyEditors/propertyMatrixDropdownColumnsEditor */

/*! ../propertyEditors/propertyModalEditor */

/*! ../propertyEditors/propertyMultipleValuesEditor */

/*! ../propertyEditors/propertyNestedPropertyEditor */

/*! ../propertyEditors/propertyOneSelectedEditor */

/*! ../propertyEditors/propertyPagesEditor */

/*! ../propertyEditors/propertyRestfullEditor */

/*! ../propertyEditors/propertyTextItemsEditor */

/*! ../propertyEditors/propertyTriggersEditor */

/*! ../propertyEditors/propertyUrlConditionEditor */

/*! ../propertyEditors/propertyValidatorsEditor */

/*! ../propertyEditors/surveyElementSelector */

/*! ../questionEditors/properties */

/*! ../questionEditors/questionEditor */

/*! ../questionEditors/questionEditorDefinition */

/*! ../questionconverter */

/*! ../rendererFactory */

/*! ../settings */

/*! ../stylesmanager */

/*! ../surveyHelper */

/*! ../surveyObjects */

/*! ../surveyStrings */

/*! ../surveyjsObjects */

/*! ../svgbundle.html */

/*! ../tabs/embed */

/*! ../tabs/json-editor */

/*! ../tabs/logic */

/*! ../tabs/test */

/*! ../tabs/translation */

/*! ../textWorker */

/*! ../toolbox */

/*! ../utils/accordion */

/*! ../utils/boolean */

/*! ../utils/button */

/*! ../utils/custom-checkbox.scss */

/*! ../utils/custom-select.scss */

/*! ../utils/ddmenu.scss */

/*! ../utils/designer-container */

/*! ../utils/designer-h-container */

/*! ../utils/dropdown */

/*! ../utils/responsivity-manager */

/*! ../utils/splitter */

/*! ../utils/survey-widget */

/*! ../utils/svg-icon */

/*! ../utils/utils */

/*! ./../settings */

/*! ./accordion.scss */

/*! ./action */

/*! ./action-bar-item */

/*! ./action-bar-item-dropdown */

/*! ./action-bar-item-dropdown.html */

/*! ./action-bar-item.html */

/*! ./action-bar-separator */

/*! ./action-bar-separator.html */

/*! ./action-bar.html */

/*! ./action.html */

/*! ./actions/action */

/*! ./actions/adaptive-container */

/*! ./adorners/item-editor */

/*! ./base */

/*! ./bindings.html */

/*! ./bindings.scss */

/*! ./boolean-checkbox.html */

/*! ./boolean.html */

/*! ./boolean.scss */

/*! ./button-group-item.html */

/*! ./button.html */

/*! ./button.scss */

/*! ./cells.html */

/*! ./cells.scss */

/*! ./choicesRestful */

/*! ./chunks/localization */

/*! ./chunks/model */

/*! ./color.html */

/*! ./color.scss */

/*! ./commands */

/*! ./comment.html */

/*! ./condition.html */

/*! ./condition.scss */

/*! ./conditionProcessValue */

/*! ./conditions */

/*! ./conditionsParser */

/*! ./container */

/*! ./convert-action.html */

/*! ./core */

/*! ./creator-base */

/*! ./cssstandard */

/*! ./custom.html */

/*! ./custom.scss */

/*! ./default-title.html */

/*! ./default-value.html */

/*! ./default-value.scss */

/*! ./defaultCss/cssstandard */

/*! ./design-surface.html */

/*! ./designer-container.scss */

/*! ./designer-h-container.scss */

/*! ./detail-button.html */

/*! ./drag-drop-icon.html */

/*! ./dragdrop/matrix-rows */

/*! ./dragdrophelper */

/*! ./dropdown.html */

/*! ./dropdown.scss */

/*! ./dxSurveyService */

/*! ./editableObject */

/*! ./editorLocalization */

/*! ./element-selector.html */

/*! ./element-selector.scss */

/*! ./embed.html */

/*! ./embed.scss */

/*! ./error */

/*! ./error.html */

/*! ./error.scss */

/*! ./expression.html */

/*! ./expression.scss */

/*! ./expressions */

/*! ./expressions/expressionParser */

/*! ./expressions/expressions */

/*! ./file.html */

/*! ./file.scss */

/*! ./flowpanel-actions.scss */

/*! ./flowpanel.html */

/*! ./functionsfactory */

/*! ./header.html */

/*! ./helpers */

/*! ./html-pe.html */

/*! ./html-pe.scss */

/*! ./image */

/*! ./image-items.scss */

/*! ./image.scss */

/*! ./index.html */

/*! ./item-editor */

/*! ./item-editor.scss */

/*! ./item-values.html */

/*! ./item-values.scss */

/*! ./itemvalue */

/*! ./json-editor.html */

/*! ./json-editor.scss */

/*! ./json5 */

/*! ./jsonobject */

/*! ./knockout-ui */

/*! ./kobase */

/*! ./kopage */

/*! ./koquestion */

/*! ./koquestion_baseselect */

/*! ./koquestion_matrixdropdown */

/*! ./koquestion_text */

/*! ./kosurvey */

/*! ./label-editor.scss */

/*! ./list.html */

/*! ./localizablestring */

/*! ./localization/english */

/*! ./logic.html */

/*! ./logic.scss */

/*! ./logo-image.html */

/*! ./martixBase */

/*! ./modal-content.html */

/*! ./modal-content.scss */

/*! ./modal.html */

/*! ./modal.scss */

/*! ./multiple-values.html */

/*! ./multiple-values.scss */

/*! ./nested-item.html */

/*! ./nested-item.scss */

/*! ./nested-items.html */

/*! ./nested-items.scss */

/*! ./nested.html */

/*! ./nested.scss */

/*! ./number.html */

/*! ./number.scss */

/*! ./object-editor-content.html */

/*! ./object-editor-content.scss */

/*! ./object-editor-old-table-content.html */

/*! ./object-editor-old-table-content.scss */

/*! ./object-editor-tab.html */

/*! ./object-editor-tab.scss */

/*! ./object-editor.html */

/*! ./object-editor.scss */

/*! ./one-selected.html */

/*! ./one-selected.scss */

/*! ./page */

/*! ./page.html */

/*! ./pages-editor */

/*! ./pages-editor.scss */

/*! ./panel */

/*! ./panel.html */

/*! ./property-editor.html */

/*! ./property-editor.scss */

/*! ./property-grid.html */

/*! ./property-grid.scss */

/*! ./propertyCustomEditor */

/*! ./propertyDefaultValueEditor */

/*! ./propertyEditorBase */

/*! ./propertyEditorFactory */

/*! ./propertyEditors/editableObject */

/*! ./propertyEditors/propertyEditorFactory */

/*! ./propertyEditors/propertyeditor-triggersitems.html */

/*! ./propertyItemsEditor */

/*! ./propertyModalEditor */

/*! ./propertyNestedPropertyEditor */

/*! ./propertyOneSelectedEditor */

/*! ./question */

/*! ./question-actions */

/*! ./question-actions.scss */

/*! ./question-boolean.html */

/*! ./question-buttongroup.html */

/*! ./question-checkbox.html */

/*! ./question-comment.html */

/*! ./question-composite.html */

/*! ./question-custom.html */

/*! ./question-dropdown.html */

/*! ./question-empty.html */

/*! ./question-errors.html */

/*! ./question-expression.html */

/*! ./question-file.html */

/*! ./question-html.html */

/*! ./question-image.html */

/*! ./question-imagepicker.html */

/*! ./question-matrix.html */

/*! ./question-matrixdynamic.html */

/*! ./question-multipletext.html */

/*! ./question-paneldynamic-navigator.html */

/*! ./question-paneldynamic.html */

/*! ./question-radiogroup.html */

/*! ./question-ranking.html */

/*! ./question-rating.html */

/*! ./question-signaturepad.html */

/*! ./question-text.html */

/*! ./question.html */

/*! ./questionCustomWidgets */

/*! ./questionEditorDefinition */

/*! ./questionEditors/questionEditor */

/*! ./questionEditors/questioneditor.html */

/*! ./question_baseselect */

/*! ./question_checkbox */

/*! ./question_dropdown */

/*! ./question_expression */

/*! ./question_matrixdropdownbase */

/*! ./question_text */

/*! ./question_textbase */

/*! ./questionconverter */

/*! ./questionfactory */

/*! ./questionnonvalue */

/*! ./questiontitle.html */

/*! ./rating-item-editor.scss */

/*! ./remove-button.html */

/*! ./rendererFactory */

/*! ./restfull.html */

/*! ./restfull.scss */

/*! ./results-table-row.html */

/*! ./results.html */

/*! ./results.scss */

/*! ./row.html */

/*! ./rows.html */

/*! ./select-items */

/*! ./select-items-editor.scss */

/*! ./settings */

/*! ./simulator.html */

/*! ./simulator.scss */

/*! ./splitter.scss */

/*! ./string-editor.html */

/*! ./string-viewer.html */

/*! ./string.html */

/*! ./string.scss */

/*! ./strings.html */

/*! ./strings.scss */

/*! ./stylesmanager */

/*! ./survey */

/*! ./survey-element */

/*! ./survey-error */

/*! ./surveyElementSelector */

/*! ./surveyHelper */

/*! ./surveyObjects */

/*! ./surveyStrings */

/*! ./surveyjsObjects */

/*! ./surveytimer */

/*! ./svg-icon.html */

/*! ./switch.html */

/*! ./switch.scss */

/*! ./tabs.html */

/*! ./tabs/logic */

/*! ./tabs/test */

/*! ./template-renderer.html */

/*! ./templateText */

/*! ./test.html */

/*! ./test.scss */

/*! ./text.html */

/*! ./text.scss */

/*! ./textPreProcessor */

/*! ./textWorker */

/*! ./timerpanel.html */

/*! ./title-actions.html */

/*! ./title-actions.scss */

/*! ./title-editor */

/*! ./title-editor.scss */

/*! ./toolbar.html */

/*! ./toolbar.scss */

/*! ./toolbox */

/*! ./toolbox-item */

/*! ./toolbox-item.scss */

/*! ./toolbox.scss */

/*! ./translation-group.html */

/*! ./translation.html */

/*! ./translation.scss */

/*! ./undoredomanager */

/*! ./utils/is-mobile */

/*! ./utils/popup */

/*! ./utils/utils */

/*! ./validator */

/*! =======================================================
                      VERSION  10.6.2              
========================================================= */

/*! html-loader?interpolate!val-loader!./accordion.html */

/*! html-loader?interpolate!val-loader!./buttons.html */

/*! html-loader?interpolate!val-loader!./designer-container.html */

/*! html-loader?interpolate!val-loader!./designer-h-container.html */

/*! html-loader?interpolate!val-loader!./flowpanel-actions.html */

/*! html-loader?interpolate!val-loader!./image-items.html */

/*! html-loader?interpolate!val-loader!./image.html */

/*! html-loader?interpolate!val-loader!./item-editor.html */

/*! html-loader?interpolate!val-loader!./pages-editor.html */

/*! html-loader?interpolate!val-loader!./panel.html */

/*! html-loader?interpolate!val-loader!./popup.html */

/*! html-loader?interpolate!val-loader!./progress.html */

/*! html-loader?interpolate!val-loader!./question-actions.html */

/*! html-loader?interpolate!val-loader!./rating-item-editor.html */

/*! html-loader?interpolate!val-loader!./select-items-display.html */

/*! html-loader?interpolate!val-loader!./select-items-editor.html */

/*! html-loader?interpolate!val-loader!./templates/entry.html */

/*! html-loader?interpolate!val-loader!./templates/window/window.html */

/*! html-loader?interpolate!val-loader!./title-actions.html */

/*! html-loader?interpolate!val-loader!./title-editor.html */

/*! html-loader?interpolate!val-loader!./toolbox-item.html */

/*! html-loader?interpolate!val-loader!./toolbox.html */

/*! knockout */

/*! nouislider - 14.7.0 - 4/6/2021 */

/*! papaparse */

/*! rmodal */

/*! signature_pad */

/*! sortablejs */

/*! survey-core */

/*! survey-knockout */

/*! tslib */

/**
         * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.
         * @summary HTML2Canvas recording into video WebM.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef CanvasRecorder
         * @class
         * @example
         * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });
         * recorder.record();
         * recorder.stop(function(blob) {
         *     video.src = URL.createObjectURL(blob);
         * });
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.
         * @param {object} config - {disableLogs:true, initCallback: function}
         */

/**
         * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.
         * @summary Writing blobs into IndexedDB.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @example
         * DiskStorage.Store({
         *     audioBlob: yourAudioBlob,
         *     videoBlob: yourVideoBlob,
         *     gifBlob  : yourGifBlob
         * });
         * DiskStorage.Fetch(function(dataURL, type) {
         *     if(type === 'audioBlob') { }
         *     if(type === 'videoBlob') { }
         *     if(type === 'gifBlob')   { }
         * });
         * // DiskStorage.dataStoreName = 'recordRTC';
         * // DiskStorage.onError = function(error) { };
         * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.
         * @property {function} Fetch - This method fetches stored blobs from IndexedDB.
         * @property {function} Store - This method stores blobs in IndexedDB.
         * @property {function} onError - This function is invoked for any known/unknown error.
         * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         */

/**
         * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef GifRecorder
         * @class
         * @example
         * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });
         * recorder.record();
         * recorder.stop(function(blob) {
         *     img.src = URL.createObjectURL(blob);
         * });
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.
         * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}
         */

/**
         * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.
         * @summary MRecordRTC stands for "Multiple-RecordRTC".
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef MRecordRTC
         * @class
         * @example
         * var recorder = new MRecordRTC();
         * recorder.addStream(MediaStream);
         * recorder.mediaType = {
         *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder
         *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder
         *     gif: true    // or GifRecorder
         * };
         * // mimeType is optional and should be set only in advance cases.
         * recorder.mimeType = {
         *     audio: 'audio/wav',
         *     video: 'video/webm',
         *     gif:   'image/gif'
         * };
         * recorder.startRecording();
         * @see For further information:
         * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}
         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
         * @requires {@link RecordRTC}
         */

/**
         * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.
         * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://github.com/muaz-khan|Muaz Khan}
         * @typedef MediaStreamRecorder
         * @class
         * @example
         * var config = {
         *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis
         *     audioBitsPerSecond : 256 * 8 * 1024,
         *     videoBitsPerSecond : 256 * 8 * 1024,
         *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two
         *     checkForInactiveTracks: true,
         *     timeSlice: 1000, // concatenate intervals based blobs
         *     ondataavailable: function() {} // get intervals based blobs
         * }
         * var recorder = new MediaStreamRecorder(mediaStream, config);
         * recorder.record();
         * recorder.stop(function(blob) {
         *     video.src = URL.createObjectURL(blob);
         *
         *     // or
         *     var blob = recorder.blob;
         * });
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
         * @param {object} config - {disableLogs:true, initCallback: function, mimeType: "video/webm", timeSlice: 1000}
         * @throws Will throw an error if first argument "MediaStream" is missing. Also throws error if "MediaRecorder API" are not supported by the browser.
         */

/**
         * MultiStreamRecorder can record multiple videos in single container.
         * @summary Multi-videos recorder.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef MultiStreamRecorder
         * @class
         * @example
         * var options = {
         *     mimeType: 'video/webm'
         * }
         * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);
         * recorder.record();
         * recorder.stop(function(blob) {
         *     video.src = URL.createObjectURL(blob);
         *
         *     // or
         *     var blob = recorder.blob;
         * });
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStreams} mediaStreams - Array of MediaStreams.
         * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: "video/webm"}
         */

/**
         * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}
         * @summary Promises for {@link RecordRTC}
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef RecordRTCPromisesHandler
         * @class
         * @example
         * var recorder = new RecordRTCPromisesHandler(mediaStream, options);
         * recorder.startRecording()
         *         .then(successCB)
         *         .catch(errorCB);
         * // Note: You can access all RecordRTC API using "recorder.recordRTC" e.g. 
         * recorder.recordRTC.onStateChanged = function(state) {};
         * recorder.recordRTC.setRecordingDuration(5000);
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.
         * @param {object} config - {type:"video", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}
         * @throws Will throw an error if "new" keyword is not used to initiate "RecordRTCPromisesHandler". Also throws error if first argument "MediaStream" is missing.
         * @requires {@link RecordRTC}
         */

/**
         * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring "stereo" audio-recording in chrome.
         * @summary JavaScript standalone object for stereo audio recording.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef StereoAudioRecorder
         * @class
         * @example
         * var recorder = new StereoAudioRecorder(MediaStream, {
         *     sampleRate: 44100,
         *     bufferSize: 4096
         * });
         * recorder.record();
         * recorder.stop(function(blob) {
         *     video.src = URL.createObjectURL(blob);
         * });
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
         * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}
         */

/**
         * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. "new AudioContext".
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @example
         * Storage.AudioContext === webkitAudioContext
         * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         */

/**
         * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.
         * @summary Video recording feature in Chrome, Firefox and maybe Edge.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef WebAssemblyRecorder
         * @class
         * @example
         * var recorder = new WebAssemblyRecorder(mediaStream);
         * recorder.record();
         * recorder.stop(function(blob) {
         *     video.src = URL.createObjectURL(blob);
         * });
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
         * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024}
         */

/**
         * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}
         * @summary A real time javascript webm encoder based on a canvas hack.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef Whammy
         * @class
         * @example
         * var recorder = new Whammy().Video(15);
         * recorder.add(context || canvas || dataURL);
         * var output = recorder.compile();
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         */

/**
         * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.
         * @summary Video recording feature in Chrome.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef WhammyRecorder
         * @class
         * @example
         * var recorder = new WhammyRecorder(mediaStream);
         * recorder.record();
         * recorder.stop(function(blob) {
         *     video.src = URL.createObjectURL(blob);
         * });
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
         * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}
         */

/**
         * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.
         * @summary It returns best recorder-type available for your browser.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef GetRecorderType
         * @class
         * @example
         * var RecorderType = GetRecorderType(options);
         * var recorder = new RecorderType(options);
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
         * @param {object} config - {type:"video", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}
         */

/**
         * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.
         * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid "config" object.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef RecordRTCConfiguration
         * @class
         * @example
         * var options = RecordRTCConfiguration(mediaStream, options);
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
         * @param {object} config - {type:"video", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}
         */

/**
         * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. 
         * @summary Record audio, video or screen inside the browser.
         * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
         * @author {@link https://MuazKhan.com|Muaz Khan}
         * @typedef RecordRTC
         * @class
         * @example
         * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {
         *     type: 'video', // audio or video or gif or canvas
         *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc
         * });
         * recorder.startRecording();
         * @see For further information:
         * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
         * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.
         * @param {object} config - {type:"video", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}
         */

/**!
         * Sortable 1.13.0
         * @author	RubaXa   <trash@rubaxa.org>
         * @author	owenm    <owen23355@gmail.com>
         * @license MIT
         */

/**!
        * Sortable
        * @author	RubaXa   <trash@rubaxa.org>
        * @license MIT
        */

/**!
 * Sortable 1.14.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
